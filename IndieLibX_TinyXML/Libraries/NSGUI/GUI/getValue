Binääritiedosto GUIEvent.o täsmää
GUIFont.cpp:  //if(!element || element->getName() != "Font")
GUIFont.cpp: if(attr = element->getAttributeByName("path"))
GUIFont.cpp:    setName(attr->getName());
Binääritiedosto GUITexCoordDescriptor.o täsmää
Binääritiedosto GUIMaterialSurface.o täsmää
Binääritiedosto GUIRectangle.o täsmää
GUIText.cpp:  fontIndex =    -1;
GUIText.cpp:  fontIndex  =   -1;
GUIText.cpp:  this->operator=(copy);
GUIText.cpp:  if(!element || element->getName() != "Text")
GUIText.cpp:  if(child = element->getChildByName("Font"))
GUIText.cpp:  if(attr = element->getAttributeByName("string"))
GUIText.cpp:  	LOG_PRINT("attr->getValuec()=%s\n", attr->getValuec());
GUIText.cpp:    setString(attr->getValuec());
GUIText.cpp:  if(attr = element->getAttributeByName("fontIndex"))
GUIText.cpp:    setFontIndex(attr->getValuei());
GUIText.cpp:  if(attr = element->getAttributeByName("hScale"))
GUIText.cpp:    setHeightScale(attr->getValuef());
GUIText.cpp:  if(attr = element->getAttributeByName("wScale"))
GUIText.cpp:    setWidthScale(attr->getValuef());
GUIText.cpp:  if(child = element->getChildByName("Color"))
GUIText.cpp:  currentFont->getFontObject()->printSubString(float(x), float(y), scales.x, scales.y,
GUIText.cpp:  print(x - size.x/2, y, startIndex, endIndex);
GUIText.cpp:  print(x,  y - size.y/2, startIndex, endIndex);
GUIText.cpp:  print(x - size.x/2, y - size.y/2, startIndex, endIndex);
GUIText.cpp:      size = currentFont->getFontObject()->getStringDimensions(text);
GUIText.cpp:    size.y = int(float(currentFont->getFontObject()->getHeight())*scales.y);
GUIFrame.cpp:TextureID             GUIFrame::elementsTexture=-1;
GUIFrame.cpp:  if(element) LOG_PRINT("element->getName()=%s\n", element->getName().c_str());
GUIFrame.cpp:  if(!element || element->getName() != "Panel")
GUIFrame.cpp:  if(child = element->getChildByName("Texture"))
GUIFrame.cpp:    if(subChild = child->getChildByName("path"))
GUIFrame.cpp:      const String &path = child->getValue();
GUIFrame.cpp:  for(size_t i = 0; i < element->getChildrenCount(); i++)
GUIFrame.cpp:    if(!(child = element->getChild(i)))
GUIFrame.cpp:    const String &elementName = child->getName();
GUIFrame.cpp:      elements[t]->forceUpdate(true);
GUIFrame.cpp:    updateCount--;
GUIFrame.cpp:    //LOG_PRINT("%d %s\n", t, elements[t]->callbackString.c_str());
GUIFrame.cpp:    elements[t]->render(tick);
GUIFrame.cpp:	//elementsTexture=IRenderer::GetRendererInstance()->addImageLibTexture(texturePath,false, IRenderer::GetRendererInstance()->GetlinearClamp());
GUIFrame.cpp:  return elementsTexture==-1 ? 0 : &elementsTexture;
GUIFrame.cpp:    	//LOG_PRINT("children{%d]->getName()=%s\n", i, children[i]->getName().c_str());
GUIFrame.cpp:    		if(children[i]->getName()==std::string(name))
GUIFrame.cpp:    	//LOG_PRINT("children{%d]->getName()=%s\n", index, children[index]->getName().c_str());
GUIFrame.cpp:    	//LOG_PRINT("attributes{%d]->getName()=%s\n", i, attributes[i]->getName().c_str());
GUIFrame.cpp:    		if(attributes[i]->getName()==std::string(name))
GUIFrame.cpp:	LOG_PRINT("<Panel name=\"%s\" visible=\"%s\" >\n", rootPanelHandle.Element()->Attribute("name"), rootPanelHandle.Element()->Attribute("visible"));
GUIFrame.cpp:	LOG_PRINT("<Font path=\"%s\" />\n", fontHandle.Element()->Attribute("path"));
GUIFrame.cpp:	LOG_PRINT("<Panel name=\"%s\" layout=\"%s\" anchorPoint=\"%s\">\n", panelHandle.Element()->Attribute("name"), panelHandle.Element()->Attribute("layout"), panelHandle.Element()->Attribute("anchorPoint"));
GUIFrame.cpp:	LOG_PRINT("<Position x=\"%s\" y=\"%s\" />\n", PositionHandle.Element()->Attribute("x"), PositionHandle.Element()->Attribute("y"));
GUIFrame.cpp:	LOG_PRINT("<Interval x=\"%s\" y=\"%s\" />\n", IntervalHandle.Element()->Attribute("x"), IntervalHandle.Element()->Attribute("y"));
GUIFrame.cpp:	LOG_PRINT("<TabbedPanel callbackString=\"%s\" >\n", TabbedPanelHandle.Element()->Attribute("callbackString"));
GUIFrame.cpp: 	LOG_PRINT("<TabButtonsBordersColor x=\"%s\" g=\"%s\" b=\"%s\" />\n", TabButtonsBordersColorHandle.Element()->Attribute("x"), TabButtonsBordersColorHandle.Element()->Attribute("g"), TabButtonsBordersColorHandle.Element()->Attribute("b"));
GUIFrame.cpp: 	LOG_PRINT("<TabButtonsColor x=\"%s\" g=\"%s\" b=\"%s\" />\n", TabButtonsColorHandle.Element()->Attribute("x"), TabButtonsColorHandle.Element()->Attribute("g"), TabButtonsColorHandle.Element()->Attribute("b"));
GUIFrame.cpp:	LOG_PRINT("<BordersColor x=\"%s\" y=\"%s\" z=\"%s\" />\n", BordersColorHandle.Element()->Attribute("x"), BordersColorHandle.Element()->Attribute("y"), BordersColorHandle.Element()->Attribute("z"));
GUIFrame.cpp:	LOG_PRINT("<BGColor x=\"%s\" y=\"%s\" z=\"%s\" />\n", BGColorHandle.Element()->Attribute("x"), BGColorHandle.Element()->Attribute("y"), BGColorHandle.Element()->Attribute("z"));
GUIFrame.cpp:	LOG_PRINT("<Panel name=\"%s\" layout=\"%s\">\n", PanelHandle.Element()->Attribute("name"), PanelHandle.Element()->Attribute("layout"));
GUIFrame.cpp:		//Sequence::FrameInSequence frame(frameElement->Attribute("name"), t);	
GUIFrame.cpp:		LOG_PRINT("<RadioButton callbackString=\"%s\" checked=\"%s\" >\n", RadioButtonHandle.Element()->Attribute("callbackString"), RadioButtonHandle.Element()->Attribute("checked"));
GUIFrame.cpp:		LOG_PRINT("<Text string=\"%s\" />\n", TextHandle.Element()->Attribute("string"));
GUIFrame.cpp:	bool r=STXGUI::guiFrame->loadXMLSettings(p);
GUIFrame.cpp:    	for( TiXmlElement* child = pElement->FirstChild(); child; child = child->NextSibling() )
GUIFrame.cpp:    		LOG_PRINT("children[%d]->attributes.size()=%d\n", i, children[i]->attributes.size());
GUIFrame.cpp:    	for( TiXmlAttribute* attribute = pElement->FirstAttribute(); attribute; attribute = attribute->Next() )
GUIFrame.cpp:    	if(!pElement->ChildElementCount()) return;
GUIFrame.cpp:    	for( TiXmlElement* child = (TiXmlElement*) pElement->FirstChild(); child; child = (TiXmlElement*) child->NextSibling() )
GUIFrame.cpp:    		LOG_PRINT("child->Name()=%s\n", child->Value());
GUIFrame.cpp:    		for( TiXmlAttribute* attr = (TiXmlAttribute*) child->FirstAttribute(); attr; attr = (TiXmlAttribute*) attr->Next() )
GUIFrame.cpp:    			LOG_PRINT("attr->Name()=%s, attr->Value()=%s\n", attr->Name(), attr->Value());
GUIFrame.cpp:    			c->addAttribute(attr->Name(), attr->Value());
GUIFrame.cpp:    		XMLElement* child=children[i]->getChild(i);
GUIFrame.cpp:    		LOG_PRINT("children[%d].name=%s\n", i, children[i]->getChild(i)->getName().c_str());
GUIFrame.cpp:    		for(unsigned int j=0;j<child->attributes.size();j++)
GUIFrame.cpp:    			XMLAttribute* a=children[i]->getAttribute(j);
GUIFrame.cpp:    			LOG_PRINT("\tattribute[%d]=%s, %s\n", j, a->getName().c_str(), a->getValue().c_str());
GUIFrame.cpp:    		children[i]->Dump();
GUIFrame.cpp:    		XMLElement* child=children[i]->getChild(i);
GUIFrame.cpp:    		LOG_PRINT("children[%d].name=%s\n", i, children[i]->getChild(i)->getName().c_str());
GUIFrame.cpp:    		for(unsigned int j=0;j<child->attributes.size();j++)
GUIFrame.cpp:    			XMLAttribute* a=children[i]->getAttribute(j);
GUIFrame.cpp:    			LOG_PRINT("\tattribute[%d]=%s, %s\n", j, a->getName().c_str(), a->getValue().c_str());
GUIAlphaElement.cpp:  if(attr = element->getAttributeByName("alphaFadeScale"))
GUIAlphaElement.cpp:    setAlphaFadeScale(attr->getValuef());
GUIAlphaElement.cpp:  if(attr = element->getAttributeByName("minAlpha"))
GUIAlphaElement.cpp:    setMinAlpha(attr->getValuef());
GUIAlphaElement.cpp:  if(child = element->getChildByName("Text"))
GUIAlphaElement.cpp:  if(child = element->getChildByName("Color"))
GUIAlphaElement.cpp:  if(!mouseOver && !STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIAlphaElement.cpp:    setAlpha(color.w - clockTick * alphaFadeScale);
Binääritiedosto GUIFontManager.o täsmää
Binääritiedosto GUIButton.o täsmää
GUITextBox.cpp:                    GUIFontManager::getDefaultFont()->getFontObject()->getHeight() + padding.y : dimensions.y;
GUITextBox.cpp:  if(!element || element->getName() != "TextBox")
GUITextBox.cpp:  if(child = element->getChildByName("BordersColor"))
GUITextBox.cpp:                                  windowBounds.z  - padding.x);
GUITextBox.cpp:  blinkerTimer -= blinkerTimer > 1.0f ? 1.0f : 0.0f;
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Color4fv(color);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Begin(PRIM_TRIANGLE_STRIP);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.w);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.w);
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.w);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.w);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->End();
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Color3fv(&col.x);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Begin(PRIM_LINE_LOOP);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.w);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.w);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z + padding.x, windowBounds.y);
GUITextBox.cpp:  IRenderer::GetRendererInstance()->End();
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Color3fv(&col.x);
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Begin(PRIM_LINES);
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Vertex2i(realBlinkerPosition, windowBounds.y + padding.y/2);
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Vertex2i(realBlinkerPosition, windowBounds.w - padding.y);
GUITextBox.cpp:    IRenderer::GetRendererInstance()->End();
GUITextBox.cpp:    IRenderer::GetRendererInstance()->Color3f(1,1,1);
GUITextBox.cpp:  bool nRelease   = STX_Service::GetInputInstance()->IsMouseButtonReleased();
GUITextBox.cpp:  if(mouseOver && (STX_Service::GetInputInstance()->IsMouseButtonPressed()))
GUITextBox.cpp:    setupBlinker(STX_Service::GetInputInstance()->GetMouseX());
GUITextBox.cpp:  if((evt->getKeyID() >= 32 && evt->getKeyID() <= 127) ||
GUITextBox.cpp:     (evt->getKeyID() == 8));
GUITextBox.cpp:  if(evt->OnKeyPress(KEY_UNKNOWN+evt->getKeyID()))
GUITextBox.cpp://???    if(evt->displayable())
GUITextBox.cpp:      setupText(INSERT_CHAR, evt->getKeyChar());
GUITextBox.cpp:      switch(evt->getKeyID())
GUITextBox.cpp:  x -= 1;
GUITextBox.cpp:     spaces = font->getFontObject()->getCharHorizontalGlyphs();
GUITextBox.cpp:  const    int    *spaces = font ? font->getFontObject()->getCharHorizontalGlyphs() : 0,
GUITextBox.cpp:  LOG_PRINT_NONE("spaces = %x\n", font->getFontObject()->getCharHorizontalGlyphs());
GUITextBox.cpp:  LOG_PRINT_NONE("spaces = %d\n", *font->getFontObject()->getCharHorizontalGlyphs());
GUITextBox.cpp:      //temp.set(label.getCharString() + index, length - index);
GUITextBox.cpp:      setupBlinker(blinkerPosition - GUIFontManager::getCharacterWidth(label.getCharString()[index -1],
GUITextBox.cpp:      leftSide=label.getCharString() + index - 1;
GUITextBox.cpp:      //temp.set(label.getCharString() + index, length - index);
GUITextBox.cpp:    setupBlinker(blinkerPosition - GUIFontManager::getCharacterWidth(label.getCharString()[length -1],
GUITextBox.cpp:    temp=label.getCharString()+ length - 1;
GUITextBox.cpp:      //temp.set(label.getCharString() + index + 1, length - index - 1);
GUITextBox.cpp:     textEndIndex = font->getFontObject()->getMaxFittingLength(label.getString(), getWidth());
Binääritiedosto GUIClippedRectangle.o täsmää
GUISeparator.cpp:  if(!element || (element->getName() != "Separator"))
GUISeparator.cpp:  if(attr = element->getAttributeByName("ratio"))
GUISeparator.cpp:    setRatio(attr->getValuef());
GUISeparator.cpp:  if(!parent || !((GUIPanel*)parent)->isBGColorOn())
GUISeparator.cpp:  D3DXFROMWINEVECTOR3 col=((GUIPanel*)parent)->getBordersColor();
GUISeparator.cpp:  IRenderer::GetRendererInstance()->Color3fv(&col.x);
GUISeparator.cpp:  IRenderer::GetRendererInstance()->Begin(PRIM_LINES);
GUISeparator.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.y);
GUISeparator.cpp:  IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z, (orientation == VERTICAL) ? windowBounds.w : windowBounds.y);
GUISeparator.cpp:  IRenderer::GetRendererInstance()->End();
GUISeparator.cpp:  IRenderer::GetRendererInstance()->Color3f(1.0f, 1.0f, 1.0f);
GUISeparator.cpp:  const Tuple4i &parentBounds = parent->getWindowBounds();
GUISeparator.cpp:    float offset = (float(parent->getWidth()) - float(ratio*parent->getWidth()))/2.0f;
GUISeparator.cpp:                     int(parentBounds.z - offset), int(parentBounds.y + position.y));
GUISeparator.cpp:    float offset = (float(parent->getHeight()) - float(parent->getHeight())*ratio)/2.0f;
GUISeparator.cpp:                     int(parentBounds.x + position.x), int(parentBounds.w - offset));
Binääritiedosto GUIText.o täsmää
GUIFontManager.cpp:      return  currentFont->getFontObject()->getCharHorizontalGlyphs()[Char];
GUIFontManager.cpp:    return font->getFontObject()->getCharHorizontalGlyphs()[Char];
GUIFontManager.cpp:    return  currentFont->getFontObject()->getCharHorizontalGlyphs()[Char];
GUIFontManager.cpp:  if(!currentFont || currentFont->operator!=(*currentFont_))
GUIFontManager.cpp:    return -1;
GUIFontManager.cpp:    if(guiFontList[i]->operator ==(*font))
GUIFontManager.cpp:  return -1;
GUIFontManager.cpp:  int      index    = -1;
GUIFontManager.cpp:  if(newFont->loadXMLSettings(fontNode))
GUIFontManager.cpp:      if(!newFont->build())
GUIFontManager.cpp:        if(newFont->build())
GUIFontManager.cpp:          index = int(guiFontList.size() - 1);
Binääritiedosto GUIFrame.o täsmää
GUIUtils.h:      http://opensource.org/licenses/LGPL-2.1
Binääritiedosto GUITabbedPanel.o täsmää
GUILabel.cpp:  if(!element || element->getName() != "Label")
GUILabel.cpp:  if(attr = element->getAttributeByName("name"))
GUILabel.cpp:    setCallbackString(attr->getValuec());
GUILabel.cpp:    parent->forceUpdate(true);
GUILabel.cpp:    case CORNERLD: label.print(windowBounds.x, windowBounds.y - label.getHeight()); break;
GUILabel.cpp:    case CORNERRD: label.print(windowBounds.z, windowBounds.y - label.getHeight()); break;
GUITexCoordDescriptor.cpp:  this->operator=(copy);
GUITexCoordDescriptor.cpp:  //Logger::writeErrorLog(std::string("Unknow GUITexCoordDescriptor type -> ") + type);
GUITexCoordDescriptor.cpp:  if(!element || element->getName() != "TexCoordsDesc")
GUITexCoordDescriptor.cpp:  if(attr = element->getAttributeByName("xStart"))
GUITexCoordDescriptor.cpp:    xStart = attr->getValuei();
GUITexCoordDescriptor.cpp:  if(attr = element->getAttributeByName("yStart"))
GUITexCoordDescriptor.cpp:    yStart = attr->getValuei();
GUITexCoordDescriptor.cpp:  if(attr = element->getAttributeByName("xEnd"))
GUITexCoordDescriptor.cpp:    xEnd = attr->getValuei();
GUITexCoordDescriptor.cpp:  if(attr = element->getAttributeByName("yEnd"))
GUITexCoordDescriptor.cpp:    yEnd = attr->getValuei();
GUITexCoordDescriptor.cpp:  if(attr = element->getAttributeByName("type"))
GUITexCoordDescriptor.cpp:    if(widgetType = attr->getValuei());
GUITexCoordDescriptor.cpp:      setType(attr->getValue());
GUITexCoordDescriptor.cpp:  setTexCoords(xStart/float(textureGUIDimensions.x), 1.0f-yEnd/float(textureGUIDimensions.y),
GUITexCoordDescriptor.cpp:               xEnd  /float(textureGUIDimensions.x), 1.0f-yStart  /float(textureGUIDimensions.y));
Binääritiedosto GUITextBox.o täsmää
GUIRectangle.cpp:  if((attr = element->getAttributeByName("callbackString")) ||
GUIRectangle.cpp:     (attr = element->getAttributeByName("name")          ))
GUIRectangle.cpp:    setCallbackString(attr->getValuec());
GUIRectangle.cpp:                   //              + element->getName());
GUIRectangle.cpp:  if(attr = element->getAttributeByName("anchorPoint"))
GUIRectangle.cpp:    setAnchorPoint(attr->getValuec());
GUIRectangle.cpp:  if(attr = element->getAttributeByName("visible"))
GUIRectangle.cpp:    setVisible(attr->getValue() == "true");
GUIRectangle.cpp:  if(attr = element->getAttributeByName("active"))
GUIRectangle.cpp:    setActive(attr->getValue() == "true");
GUIRectangle.cpp:  if(child = element->getChildByName("Position"))
GUIRectangle.cpp:  if(child = element->getChildByName("Dimensions"))
GUIRectangle.cpp:    //parent->enableGUITexture();
GUIRectangle.cpp:  return !parent? 0 : parent->getTexCoordsInfo(type);
GUIRectangle.cpp:  return windowBounds.z - windowBounds.x;
GUIRectangle.cpp:  return windowBounds.w - windowBounds.y;
GUIRectangle.cpp:    const Tuple4i &parentBounds = parent->getWindowBounds();
GUIRectangle.cpp:    z  = parent->getZCoordinate() + 1;
GUIRectangle.cpp:    newDimensions.x  = float(parentBounds.z - parentBounds.x);
GUIRectangle.cpp:    newDimensions.y  = float(parentBounds.w - parentBounds.y);
GUIRectangle.cpp:        windowBounds.y -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.w -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.x -= int(newDimensions.x);
GUIRectangle.cpp:        windowBounds.z -= int(newDimensions.x);
GUIRectangle.cpp:        windowBounds.y -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.w -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.x -= int(newDimensions.x);
GUIRectangle.cpp:        windowBounds.z -= int(newDimensions.x);
GUIRectangle.cpp:        windowBounds.y -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.w -= int(newDimensions.y);
GUIRectangle.cpp:        windowBounds.x -= int(newDimensions.x);
GUIRectangle.cpp:        windowBounds.z -= int(newDimensions.x);
GUIRectangle.cpp:  return !parent ? 0 : parent->getEventsListener();
GUIRectangle.cpp:  int mx=STX_Service::GetInputInstance()->GetMouseX();
GUIRectangle.cpp:  int my=STX_Service::GetInputInstance()->GetMouseY();
GUIRectangle.cpp:  	if(STX_Service::GetInputInstance()->IsMouseClick())
GUIRectangle.cpp:  	if(STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIRectangle.cpp:  	if(STX_Service::GetInputInstance()->IsMouseButtonReleased())
GUIRectangle.cpp:	eventsListener->actionPerformed(*event);
Binääritiedosto GUISeparator.o täsmää
GUIEvent.cpp:		guiFrame->setPosition(0,0);
GUIEvent.cpp:    		guiFrame->setDimensions(float(IRenderer::GetRendererInstance()->GetViewportWidth()), float(IRenderer::GetRendererInstance()->GetViewportHeight()));		
GUIEvent.cpp:  		guiFrame->setVisible(true);
GUIEvent.cpp:    		guiFrame->forceUpdate(true);
GUIEvent.cpp:  		guiFrame->render(fi);
GUIEvent.cpp:		if(STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIEvent.cpp:  			guiFrame->checkMouseEvents(CLICKED ); 
GUIEvent.cpp:        	else if(STX_Service::GetInputInstance()->IsMouseDoubleClick())
GUIEvent.cpp:  			guiFrame->checkMouseEvents(DOUBLE_CLICKED );
GUIEvent.cpp:		else if(STX_Service::GetInputInstance()->IsMouseButtonReleased())
GUIEvent.cpp:			guiFrame->checkMouseEvents(RELEASED);
GUIEvent.cpp:        	else if(STX_Service::GetInputInstance()->IsMouseMotion())
GUIEvent.cpp:			if(STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIEvent.cpp:				guiFrame->checkMouseEvents(DRAGGED );
GUIEvent.cpp:				guiFrame->checkMouseEvents(MOVED   );
GUIEvent.cpp:		//if(STX_Service::GetInputInstance()->IsMouseButtonPressed(MBUTTON_WHEELDOWN))
GUIEvent.cpp:		GUIEvent* evt = (GUIEvent*)this->guiFrame->getWidgetByCallbackString("User Controls"); 
GUIEvent.cpp:  		if(guiFrame->GUIPanel::loadXMLSettings(pName.c_str()))
GUIEvent.cpp:    			userControls = (GUIPanel*)this->guiFrame->getWidgetByCallbackString("User Controls");    
GUIEvent.cpp:  		guiFrame->setGUIEventListener((GUIEventListener*)this);
GUIEvent.cpp:  		guiFrame->setVisible(true);
GUIEvent.cpp:  return sourceRectangle->isClicked();
GUIEvent.cpp:  int           widgetType      = sourceRectangle->getWidgetType();
GUIEvent.cpp:  	if(g_guiFrame->GUIPanel::loadXMLSettings(pName.c_str()))
GUIEvent.cpp:    		g_userControls = (GUIPanel*)g_guiFrame->getWidgetByCallbackString(aUserControls.c_str());
GUIEvent.cpp:  	g_guiFrame->setGUIEventListener(0);//???(GUIEventListener*)this);
GUIEvent.cpp:  	g_guiFrame->setVisible(true);
GUIEvent.cpp:	g_guiFrame->setPosition(0,0);
GUIEvent.cpp:	g_guiFrame->setDimensions(float(IRenderer::GetRendererInstance()->GetViewportWidth()), float(IRenderer::GetRendererInstance()->GetViewportHeight()));
GUIEvent.cpp:  	g_guiFrame->setVisible(true);
GUIEvent.cpp:	g_guiFrame->forceUpdate(true);
GUIEvent.cpp:	g_guiFrame->render(fi);
GUIEvent.cpp:	if(STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIEvent.cpp:  		g_guiFrame->checkMouseEvents(CLICKED ); 
GUIEvent.cpp:        else if(STX_Service::GetInputInstance()->IsMouseDoubleClick())
GUIEvent.cpp:  		g_guiFrame->checkMouseEvents(DOUBLE_CLICKED );
GUIEvent.cpp:	else if(STX_Service::GetInputInstance()->IsMouseButtonReleased())
GUIEvent.cpp:		g_guiFrame->checkMouseEvents(RELEASED);
GUIEvent.cpp:        else if(STX_Service::GetInputInstance()->IsMouseMotion())
GUIEvent.cpp:		if(STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUIEvent.cpp:			g_guiFrame->checkMouseEvents(DRAGGED );
GUIEvent.cpp:			g_guiFrame->checkMouseEvents(MOVED   ); 
GUIEvent.cpp:		//if(STX_Service::GetInputInstance()->IsMouseButtonPressed(MBUTTON_WHEELDOWN))
GUIEvent.cpp:  	callbackString = element? element->getCallbackString() : "Unknown";
GUIEvent.cpp:  this->operator =(copy);
GUIEvent.cpp:  int           widgetType      = sourceRectangle->getWidgetType();
Binääritiedosto GUIPanel.o täsmää
GUIText.h:    void  printCenteredXY(int x, int y, int startIndex = 0, int endIndex = -1);
GUIText.h:    void  printCenteredX (int x, int y, int startIndex = 0, int endIndex = -1);
GUIText.h:    void  printCenteredY (int x, int y, int startIndex = 0, int endIndex = -1);
GUIText.h:    void  print(int x, int y, int startIndex = 0, int endIndex = -1);
GUICheckBox.cpp:  if(!element || element->getName() != "CheckBox")
GUICheckBox.cpp:  if(!element || element->getName() != "RadioButton")
GUICheckBox.cpp:  if(attr = element->getAttributeByName("checked"))
GUICheckBox.cpp:    setChecked((attr->getValue() == "true"));
GUICheckBox.cpp:  if(child = element->getChildByName("BGColor"))
GUICheckBox.cpp:  GUITexCoordDescriptor *descriptor     = parent->getTexCoordsInfo(primaryTexDesc),
GUICheckBox.cpp:                        *descriptorCB   = parent->getTexCoordsInfo(secondaryTexDesc);
GUICheckBox.cpp:		float xPos = windowBounds.x - 9;
GUICheckBox.cpp:		float yTop = windowBounds.y - 9;
GUICheckBox.cpp:		ret=IRenderer::GetRendererInstance()->drawCircle(xPos + 17, yTop + 20, 7, col, 2);
GUICheckBox.cpp:		//IRenderer::GetRendererInstance()->RenderTex(GUIFrame::elementsTexture, D3DXFROMWINEVECTOR2(xPos + 9, yTop + 10), D3DXFROMWINEVECTOR2(25.0f,100.0f), D3DXFROMWINEVECTOR2(0.0f,0.0f), D3DXFROMWINEVECTOR2(0.25f,1.0f));
GUICheckBox.cpp:		IRenderer::GetRendererInstance()->RenderTex(GUIFrame::elementsTexture, D3DXFROMWINEVECTOR2(xPos + 9, yTop + 10), D3DXFROMWINEVECTOR2(25.0f,100.0f), D3DXFROMWINEVECTOR2(0.25f,0.0f), D3DXFROMWINEVECTOR2(0.25f,1.0f));
GUICheckBox.cpp:			ret=IRenderer::GetRendererInstance()->drawCircle(xPos + 17, yTop + 20, 4, col);
GUICheckBox.cpp:		IRenderer::GetRendererInstance()->RenderTex(GUIFrame::elementsTexture, D3DXFROMWINEVECTOR2(xPos + 9 /* + 17 */, yTop + 10 /* + 20 */), D3DXFROMWINEVECTOR2(14.0f,100.0f), D3DXFROMWINEVECTOR2(0.64f,0.0f), D3DXFROMWINEVECTOR2(0.14f,1.0f));
GUICheckBox.cpp:		float xPos = windowBounds.x - 9;
GUICheckBox.cpp:		float yTop = windowBounds.y - 9;
GUICheckBox.cpp:		ret=IRenderer::GetRendererInstance()->drawRect(xPos + 8, yTop + 11, xPos + 24, yTop + 28, col, 2);
GUICheckBox.cpp:			ret=IRenderer::GetRendererInstance()->drawLine(xPos + 11, yTop + 18, xPos + 15, yTop + 25, colblack, 2);
GUICheckBox.cpp:			ret=IRenderer::GetRendererInstance()->drawLine(xPos + 15, yTop + 25, xPos + 21, yTop + 14, colblack, 2);
GUICheckBox.cpp:		IRenderer::GetRendererInstance()->RenderTex(GUIFrame::elementsTexture, D3DXFROMWINEVECTOR2(xPos + 6 /* + 13 */, yTop + 10 /* + 21 */), D3DXFROMWINEVECTOR2(14.0f,100.0f), D3DXFROMWINEVECTOR2(0.50f,0.0f), D3DXFROMWINEVECTOR2(0.14f,1.0f));
GUICheckBox.cpp:	const D3DXFROMWINEVECTOR4 &texCoords = descriptor->getTexCoords();
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->Begin(PRIM_TRIANGLE_STRIP);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.y);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.y);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.w);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, windowBounds.w);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.y);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x + extra, windowBounds.y);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.w);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x + extra, windowBounds.w);
GUICheckBox.cpp:	IRenderer::GetRendererInstance()->End(GUIFrame::elementsTexture);
GUICheckBox.cpp:    markOffset = extra - int(dimensions.y*markRatio);
GUICheckBox.cpp:  return -1;
GUICheckBox.cpp:	std::string callbackString=sourceRectangle->getCallbackString();
GUICheckBox.cpp:	int i=((GUIPanel*)parent)->getWidgetIndexByCallbackString(callbackString);
GUICheckBox.cpp:	__DWORD__ t1=((GUIPanel*)parent)->getTime();
GUICheckBox.cpp:	if((t2-t1)<1000)
GUICheckBox.cpp:	((GUIPanel*)parent)->setTime(t2);
GUICheckBox.cpp:	((GUIPanel*)parent)->setCurrentElement(i);
GUICheckBox.cpp:	//((GUIPanel*)parent)->notify(this);
Binääritiedosto GUIComboBox.o täsmää
Binääritiedosto GUICheckBox.o täsmää
Binääritiedosto GUISlider.o täsmää
Binääritiedosto GUIFont.o täsmää
GUIMaterialSurface.cpp:  if(!element || element->getName() != "MaterialSurface")
GUIMaterialSurface.cpp:  for(size_t i = 0; i < element->getChildrenCount(); i++)
GUIMaterialSurface.cpp:    node = element->getChild(i);
GUIMaterialSurface.cpp:    const std::string &name = node->getName();
GUIMaterialSurface.cpp:  //    materialPointer->bindMaterial();
GUIMaterialSurface.cpp:    IRenderer::GetRendererInstance()->Color4fv(appearance.getColor());
GUIMaterialSurface.cpp:      IRenderer::GetRendererInstance()->setShader(appearance.getShaders());
GUIMaterialSurface.cpp:	//IRenderer::GetRendererInstance()->setShaderConstant4f("translation",
GUIMaterialSurface.cpp:	//	IRenderer::GetRendererInstance()->GetTranslation());
GUIMaterialSurface.cpp:      if(texturePointer==-1)
GUIMaterialSurface.cpp:      IRenderer::GetRendererInstance()->TexCoordPointer(2, /*GL_FLOAT,*/ 0, texCoords[0]) ;
GUIMaterialSurface.cpp:      	IRenderer::GetRendererInstance()->InitTex(IRenderer::GetRendererInstance()->GettexShader(),IRenderer::GetRendererInstance()->GettexVF());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setShader(IRenderer::GetRendererInstance()->GettexShader());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setVertexFormat(IRenderer::GetRendererInstance()->GettexVF());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setTexture("Base",texturePointer);
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setShaderConstant4f("colorRGBA", D3DXFROMWINEVECTOR4(1.0f,1.0f,1.0f,1.0f));
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setBlendState(IRenderer::GetRendererInstance()->GetblendSrcAlpha());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setDepthState(IRenderer::GetRendererInstance()->GetnoDepthTest());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setup2DMode(0, (float) IRenderer::GetRendererInstance()->GetViewportWidth(), 0, (float) IRenderer::GetRendererInstance()->GetViewportHeight());
GUIMaterialSurface.cpp:	IRenderer::GetRendererInstance()->setShaderConstant4f("scaleBias", IRenderer::GetRendererInstance()->GetscaleBias2D());
GUIMaterialSurface.cpp:        //->activate(i);
GUIMaterialSurface.cpp:    for(int i = 7; i >-1; i--)
GUIMaterialSurface.cpp:      if(texturePointer==-1)
GUIMaterialSurface.cpp:      texturePointer->deactivate();
GUIMaterialSurface.cpp:  IRenderer::GetRendererInstance()->VertexPointer(2, /*GL_INT,*/ 0, &vertices[0]);
GUIMaterialSurface.cpp:    IRenderer::GetRendererInstance()->Color3fv(bordersColor);
GUIMaterialSurface.cpp:    IRenderer::GetRendererInstance()->VertexPointer(2, /*GL_INT,*/ 0, &vertices[0]);
GUIMaterialSurface.cpp:  IRenderer::GetRendererInstance()->Color3f(1,1,1);
Binääritiedosto GUIRadioButton.o täsmää
GUIRadioButton.cpp:	std::string callbackString=sourceRectangle->getCallbackString();
GUIRadioButton.cpp:	int i=((GUIPanel*)parent)->getWidgetIndexByCallbackString(callbackString);
GUIRadioButton.cpp:	int c=((GUIPanel*)parent)->getCurrentElement();
GUIRadioButton.cpp:		((GUIPanel*)parent)->setCurrentElement(i);
GUIRadioButton.cpp:		((GUIPanel*)parent)->notify(this);
GUISlider.cpp:  if(!element || element->getName() != "Slider")
GUISlider.cpp:  if(attr = element->getAttributeByName("orientation"))
GUISlider.cpp:    orientation = (attr->getValue() == "VERTICAL") ? VERTICAL : HORIZONTAL;
GUISlider.cpp:  if(attr = element->getAttributeByName("progress"))
GUISlider.cpp:    setProgress(attr->getValuef());
GUISlider.cpp:  if(attr = element->getAttributeByName("discWidth"))
GUISlider.cpp:    discDimensions.x = attr->getValuei();
GUISlider.cpp:  if(attr = element->getAttributeByName("discHeight"))
GUISlider.cpp:    discDimensions.y = attr->getValuei();
GUISlider.cpp:  if(!STX_Service::GetInputInstance()->IsMouseButtonPressed())
GUISlider.cpp:  GUITexCoordDescriptor *descriptor    = parent->getTexCoordsInfo(SLIDER);
GUISlider.cpp:  discXBounds.x += int(float(windowBounds.z - windowBounds.x)*progress);
GUISlider.cpp:  discXBounds.x -= discDimensions.x/2;
GUISlider.cpp:  float xPos = windowBounds.x - 9;
GUISlider.cpp:  float yTop = windowBounds.y - 9;
GUISlider.cpp:  ret=IRenderer::GetRendererInstance()->drawRect(xPos + 8, yTop + 11, xPos + dimensions.x, yTop + dimensions.y, col, 2);
GUISlider.cpp:  //IRenderer::GetRendererInstance()->SetTranslation
GUISlider.cpp:	  ret=IRenderer::GetRendererInstance()->drawCircle(discXBounds.x+m_Translation.x, yTop + 11, 4, colblack);
GUISlider.cpp:		IRenderer::GetRendererInstance()->RenderTex(GUIFrame::elementsTexture, D3DXFROMWINEVECTOR2(discXBounds.x+m_Translation.x, yTop + 6 /* + 11 */ ), D3DXFROMWINEVECTOR2(14.0f,100.0f), D3DXFROMWINEVECTOR2(0.78f,0.0f), D3DXFROMWINEVECTOR2(0.14f,1.0f));
GUISlider.cpp:	const D3DXFROMWINEVECTOR4 &texCoords = descriptor->getTexCoords();
GUISlider.cpp:	IRenderer::GetRendererInstance()->Begin(PRIM_TRIANGLE_STRIP);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.y); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(discXBounds.x, windowBounds.y);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.w);
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(discXBounds.x, windowBounds.w);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.y); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(discXBounds.y, windowBounds.y);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.w); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(discXBounds.y, windowBounds.w);
GUISlider.cpp:	IRenderer::GetRendererInstance()->End(GUIFrame::elementsTexture);
GUISlider.cpp:  m_Translation=D3DXFROMWINEVECTOR3(float(-offset), 0, 0);
GUISlider.cpp:  GUITexCoordDescriptor *descriptor    = parent->getTexCoordsInfo(SLIDER);
GUISlider.cpp:  discYBounds.x -= int(float(getHeight())*progress);
GUISlider.cpp:  discYBounds.x -= discDimensions.y/2;
GUISlider.cpp:  float xPos = windowBounds.x - 9;
GUISlider.cpp:  float yTop = windowBounds.y - 9;
GUISlider.cpp:  IRenderer::GetRendererInstance()->Color4fv(color);
GUISlider.cpp:  ret=IRenderer::GetRendererInstance()->drawRect(xPos + 8, yTop + 11, xPos + dimensions.x, yTop + dimensions.y, col, 2);
GUISlider.cpp:	  ret=IRenderer::GetRendererInstance()->drawCircle(discYBounds.x+m_Translation.x, yTop + 11, 4, colblack);
GUISlider.cpp:	const D3DXFROMWINEVECTOR4 &texCoords = descriptor->getTexCoords();
GUISlider.cpp:	IRenderer::GetRendererInstance()->Begin(PRIM_TRIANGLE_STRIP);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.y); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, discYBounds.x);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.x, texCoords.w);
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.x, discYBounds.y);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.y); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z, discYBounds.x);
GUISlider.cpp:	IRenderer::GetRendererInstance()->TexCoord2f(texCoords.z, texCoords.w); 
GUISlider.cpp:	IRenderer::GetRendererInstance()->Vertex2i(windowBounds.z, discYBounds.y);
GUISlider.cpp:	IRenderer::GetRendererInstance()->End(GUIFrame::elementsTexture);
GUISlider.cpp:  m_Translation=D3DXFROMWINEVECTOR3(0, float(-offset), 0);
GUISlider.cpp:      int difference = label.getWidth() -  getWidth();
GUISlider.cpp:      realWindowBounds.x -= discDimensions.x/2;
GUISlider.cpp:        realWindowBounds.x -= difference;
GUISlider.cpp:      offset = clampNS(windowBounds.x - realWindowBounds.x, 0, 500);
GUISlider.cpp:      realWindowBounds.y  -= discDimensions.y/2;
GUISlider.cpp:  bool nRelease = STX_Service::GetInputInstance()->IsMouseButtonReleased();
GUISlider.cpp:                clampNS(float(STX_Service::GetInputInstance()->GetMouseX() - windowBounds.x)/ (windowBounds.z - windowBounds.x), 0.0f, 1.0f) :
GUISlider.cpp:                clampNS(1.0f - float(STX_Service::GetInputInstance()->GetMouseY() - windowBounds.y)/ (windowBounds.w - windowBounds.y), 0.0f, 1.0f);
GUISlider.cpp:	eventsListener->actionPerformed(*event);
GUISlider.cpp:  windowBounds.x -= (orientation == HORIZONTAL) ? offset : 0;
GUISlider.cpp:  windowBounds.y -= (orientation != HORIZONTAL) ? offset : 0;
GUISlider.cpp:  windowBounds.z -= (orientation == HORIZONTAL) ? offset : 0;
GUISlider.cpp:  windowBounds.w -= (orientation != HORIZONTAL) ? offset : 0;
GUITexCoordDescriptor_new.cpp:  this->operator=(copy);
GUITexCoordDescriptor_new.cpp:  //LOG_PRINT_NONE("Unknow GUITexCoordDescriptor type -> ") + type);
GUITexCoordDescriptor_new.cpp:  if(!element || element->getName() != "TexCoordsDesc")
GUITexCoordDescriptor_new.cpp:  if(attr = element->getAttributeByName("xStart"))
GUITexCoordDescriptor_new.cpp:    xStart = attr->getValuei();
GUITexCoordDescriptor_new.cpp:  if(attr = element->getAttributeByName("yStart"))
GUITexCoordDescriptor_new.cpp:    yStart = attr->getValuei();
GUITexCoordDescriptor_new.cpp:  if(attr = element->getAttributeByName("xEnd"))
GUITexCoordDescriptor_new.cpp:    xEnd = attr->getValuei();
GUITexCoordDescriptor_new.cpp:  if(attr = element->getAttributeByName("yEnd"))
GUITexCoordDescriptor_new.cpp:    yEnd = attr->getValuei();
GUITexCoordDescriptor_new.cpp:  if(attr = element->getAttributeByName("type"))
GUITexCoordDescriptor_new.cpp:    if(widgetType = attr->getValuei());
GUITexCoordDescriptor_new.cpp:      setType(attr->getValue());
GUITexCoordDescriptor_new.cpp:  setTexCoords(xStart/float(textureGUIDimensions.x), 1.0f-yEnd/float(textureGUIDimensions.y),
GUITexCoordDescriptor_new.cpp:               xEnd  /float(textureGUIDimensions.x), 1.0f-yStart  /float(textureGUIDimensions.y));
GUITabbedPanel.cpp:  mainPanel->setLayout(YAXIS_LAYOUT);
GUITabbedPanel.cpp:  mainPanel->setInterval(2, 2);
GUITabbedPanel.cpp:  mainPanel->setVisibleBounds(true);
GUITabbedPanel.cpp:  mainPanel->enableBGColor(true);
GUITabbedPanel.cpp:  upperPanel->setLayout(XAXIS_LAYOUT);
GUITabbedPanel.cpp:  upperPanel->setClipSize(0);
GUITabbedPanel.cpp:  lowerPanel->setInterval(0,0);
GUITabbedPanel.cpp:  lowerPanel->setClipSize(0);
GUITabbedPanel.cpp:  mainPanel->addWidget(upperPanel);
GUITabbedPanel.cpp:  mainPanel->addWidget(lowerPanel);
GUITabbedPanel.cpp:  if(!element || element->getName() != "TabbedPanel")
GUITabbedPanel.cpp:  D3DXFROMWINEVECTOR3     bordersColor         = upperPanel->getBordersColor();
GUITabbedPanel.cpp:  D3DXFROMWINEVECTOR4     bgColor              = upperPanel->getBGColor();
GUITabbedPanel.cpp:  if(attr = element->getAttributeByName("hScale"))
GUITabbedPanel.cpp:    fontScales.y = attr->getValuef();
GUITabbedPanel.cpp:  if(attr = element->getAttributeByName("wScale"))
GUITabbedPanel.cpp:    fontScales.x = attr->getValuef();
GUITabbedPanel.cpp:  if(child = element->getChildByName("TabButtonsBordersColor"))
GUITabbedPanel.cpp:  if(child = element->getChildByName("TabButtonsColor"))
GUITabbedPanel.cpp:  if(child = element->getChildByName("BordersColor"))
GUITabbedPanel.cpp:  if(child = element->getChildByName("BGColor"))
GUITabbedPanel.cpp:  if(attr = element->getAttributeByName("fontIndex"))
GUITabbedPanel.cpp:    fontIndex =  clampNS(attr->getValuei(), 0, 50);
GUITabbedPanel.cpp:  for(size_t i = 0; i < element->getChildrenCount(); i++)
GUITabbedPanel.cpp:    if(!(child = element->getChild(i)))
GUITabbedPanel.cpp:    const std::string &childName = child->getName();
GUITabbedPanel.cpp:      if(!panel->loadXMLSettings(child) || !addPanel(panel))
GUITabbedPanel.cpp:  mainPanel->setBordersColor(bordersColor);
GUITabbedPanel.cpp:  mainPanel->setBGColor(bgColor);
GUITabbedPanel.cpp:  return GUIRectangle::loadXMLSettings(element) && lowerPanel->getWidgets().size();
GUITabbedPanel.cpp:  if(lowerPanel->addWidget(panel))
GUITabbedPanel.cpp:    int count = int(lowerPanel->getWidgets().size()) - 1;
GUITabbedPanel.cpp:    tabButton->setBordersColor(tabButtonsBordersColor);
GUITabbedPanel.cpp:    tabButton->setColor(tabButtonsColor);
GUITabbedPanel.cpp:    std::string ls=std::string("  ") + panel->getCallbackString() + "  ";
GUITabbedPanel.cpp:    tabButton->setLabelString(ls);
GUITabbedPanel.cpp:    tabButton->getLabel()->setFontIndex(fontIndex);
GUITabbedPanel.cpp:    tabButton->getLabel()->setScales(fontScales);
GUITabbedPanel.cpp:    tabButton->setMinAlpha((count == 0) ? 0.75f : 0.5f);
GUITabbedPanel.cpp:    tabButton->enableBounce(false);
GUITabbedPanel.cpp:    tabButton->setClipSize(0);
GUITabbedPanel.cpp:    upperPanel->addWidget(tabButton);
GUITabbedPanel.cpp:    panel->setVisible((count == 0));
GUITabbedPanel.cpp:  const Widgets &widgets = lowerPanel->getWidgets();
GUITabbedPanel.cpp:    if(widgets[t]->isVisible())
GUITabbedPanel.cpp:  const Widgets &widgets = lowerPanel->getWidgets();
GUITabbedPanel.cpp:    if(widgets[t]->isVisible())
GUITabbedPanel.cpp:  return -1;
GUITabbedPanel.cpp:  upperPanel->checkKeyboardEvents(extraInfo);
GUITabbedPanel.cpp:  lowerPanel->checkKeyboardEvents(extraInfo);
GUITabbedPanel.cpp:  upperPanel->checkMouseEvents(extraInfo, rBits);
GUITabbedPanel.cpp:  lowerPanel->checkMouseEvents(extraInfo, rBits);
GUITabbedPanel.cpp:  GUIEventListener *eventsListener  = parent->getEventsListener();
GUITabbedPanel.cpp:  int               widgetType      = sourceRectangle->getWidgetType();
GUITabbedPanel.cpp:  if((widgetType == BUTTON) && sourceRectangle->isPressed())
GUITabbedPanel.cpp:    const Widgets &widgets = lowerPanel->getWidgets(),
GUITabbedPanel.cpp:                  &buttons = upperPanel->getWidgets();
GUITabbedPanel.cpp:    int   target = atoi(sourceRectangle->getCallbackString().c_str()),
GUITabbedPanel.cpp:      widgets[t]->setVisible(t == target);
GUITabbedPanel.cpp:      ((GUIAlphaElement*)buttons[t])->setMinAlpha((t == target) ? 1.0f : 0.5f);
GUITabbedPanel.cpp:  const Widgets &widgets = upperPanel->getWidgets();
GUITabbedPanel.cpp:  const Tuple4i &buttonBounds = upperPanel->getWidgets()[0]->getWindowBounds(),
GUITabbedPanel.cpp:                &mainBounds   = mainPanel->getWindowBounds();
GUITabbedPanel.cpp:  const D3DXFROMWINEVECTOR3 &borderClr    = mainPanel->getBordersColor();
GUITabbedPanel.cpp:  mainPanel->render(clockTick);
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->Color3fv(borderClr);
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->Begin(PRIM_LINES);
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->Vertex2i(mainBounds.x, buttonBounds.w);
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->Vertex2i(mainBounds.z, buttonBounds.w);
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->End();
GUITabbedPanel.cpp:  IRenderer::GetRendererInstance()->Color3f(1,1,1);
GUITabbedPanel.cpp:    upperPanel->setParent(mainPanel);
GUITabbedPanel.cpp:    mainPanel->setAnchorPoint(getAnchorPoint());
GUITabbedPanel.cpp:    mainPanel->setPosition(getPosition());
GUITabbedPanel.cpp:    mainPanel->setParent(parent);
GUITabbedPanel.cpp:    mainPanel->forceUpdate(true);
GUITabbedPanel.cpp:    windowBounds = mainPanel->getWindowBounds();
GUITabbedPanel.cpp:    const Widgets & widgets     = lowerPanel->getWidgets();
GUITabbedPanel.cpp:      height = height < widgets[i]->getHeight() ? widgets[i]->getHeight() : height;
GUITabbedPanel.cpp:    lowerPanel->setDimensions(1.0f, height);
GUITabbedPanel.cpp:    upperPanel->setParent(this);
Binääritiedosto GUILabel.o täsmää
Binääritiedosto GUIAlphaElement.o täsmää
GUIPanel.cpp:  currentElement=-1;
GUIPanel.cpp:  if(!element || element->getName() != "Panel")
GUIPanel.cpp:	if(element) LOG_PRINT_NONE("name=%s\n", element->getName().c_str());
GUIPanel.cpp:  if(attr = element->getAttributeByName("description"))
GUIPanel.cpp:    return  loadXMLSettings(attr->getValue());
GUIPanel.cpp:  for(size_t i = 0; i < element->getAttributeCount(); i++)
GUIPanel.cpp:    if(!(attr = element->getAttribute(i)))
GUIPanel.cpp:    const std::string &attrName = attr->getName();
GUIPanel.cpp:      const std::string& type = attr->getValue();
GUIPanel.cpp:  for(size_t i = 0; i < element->getChildrenCount(); i++)
GUIPanel.cpp:    if(!(child = element->getChild(i)))
GUIPanel.cpp:    const std::string &childName = child->getName();
GUIPanel.cpp:      if(!panel->loadXMLSettings(child) || !addWidget(panel))
GUIPanel.cpp:      if(!newCheckBox->loadXMLSettings(child) || !addWidget(newCheckBox))
GUIPanel.cpp:      if(!newTabbedPanel->loadXMLSettings(child) || !addWidget(newTabbedPanel))
GUIPanel.cpp:      if(!newRadioButton->loadXMLSettings(child) || !addWidget(newRadioButton))
GUIPanel.cpp:        if(newRadioButton->isChecked())
GUIPanel.cpp:      if(!newMaterialSurface->loadXMLSettings(child) || !addWidget(newMaterialSurface))
GUIPanel.cpp:      if(!newComboBox->loadXMLSettings(child) || !addWidget(newComboBox))
GUIPanel.cpp:      if(!newTextBox->loadXMLSettings(child) || !addWidget(newTextBox))
GUIPanel.cpp:      if(!newSlider->loadXMLSettings(child) || !addWidget(newSlider))
GUIPanel.cpp:         (!newSeparator->loadXMLSettings(child)))
GUIPanel.cpp:        newSeparator->setParent(this);
GUIPanel.cpp:        newSeparator->setOrientation((layout != YAXIS_LAYOUT && layout != YAXIS_CEN_LAYOUT));
GUIPanel.cpp:      if(!newButton->loadXMLSettings(child) || !addWidget(newButton))
GUIPanel.cpp:      if(!newLabel->loadXMLSettings(child) || !addWidget(newLabel))
GUIPanel.cpp:	elements[t]->setIndex(t);
GUIPanel.cpp:  int element = -1;
GUIPanel.cpp:    if(elements[t]->getCallbackString() == callbackString)
GUIPanel.cpp:    if(elements[t]->getCallbackString() == callbackString)
GUIPanel.cpp:    if(elements[t]->getWidgetType() == PANEL)
GUIPanel.cpp:    if(element = ((GUIPanel*)elements[t])->getWidgetByCallbackString(callbackString))
GUIPanel.cpp:    if(elements[t]->getWidgetType() == TABBED_PANEL)
GUIPanel.cpp:    if(element = ((GUITabbedPanel*)elements[t])->getLowerPanel()->getWidgetByCallbackString(callbackString))
GUIPanel.cpp:      if(elements[t]->isActive())
GUIPanel.cpp:        elements[t]->checkMouseEvents(extraInfo, infoBits);
GUIPanel.cpp:    if(elements[t]->isActive())
GUIPanel.cpp:      elements[t]->checkKeyboardEvents(extraInfo);
GUIPanel.cpp:      if(elements[t]->getWidgetType() != COMBO_BOX)
GUIPanel.cpp:			elements[t]->getCallbackString().c_str());
GUIPanel.cpp:		if(stx_memcmp("Visibility",elements[t]->getCallbackString().c_str(),10)==0)DBG_HALT;
GUIPanel.cpp:		elements[t]->render(tick);
GUIPanel.cpp:        if(!cbPTR->isDeployed())
GUIPanel.cpp:          cbPTR->render(tick);
GUIPanel.cpp:      comboBoxes[t]->render(tick);
GUIPanel.cpp:      if(elements[t]->getWidgetType() != PANEL)
GUIPanel.cpp:        zWidget.setDistance(float(elements[t]->getZCoordinate()));
GUIPanel.cpp:         ((GUIPanel*)elements[t])->collectZWidgets(container);
GUIPanel.cpp:    elements[t]->forceUpdate(update);
GUIPanel.cpp:    elements[t]->forceUpdate(update);
GUIPanel.cpp:    const Tuple4i &childBounds = elements[t]->getWindowBounds();
GUIPanel.cpp:    childrenHeights.push_back(childBounds.w - childBounds.y + interval.y);
GUIPanel.cpp:    childrenWidths.push_back(childBounds.z - childBounds.x);
GUIPanel.cpp:    xOffset = (layout == YAXIS_CEN_LAYOUT) * (panelWidth - childrenWidths[t])/2;
GUIPanel.cpp:    elements[t]->setAnchorPoint(CORNERLU);
GUIPanel.cpp:    elements[t]->setPosition(float(interval.x + xOffset), float(height));
GUIPanel.cpp:    elements[t]->computeWindowBounds();
GUIPanel.cpp:              panelHeight = windowBounds.w - windowBounds.y;
GUIPanel.cpp:    const Tuple4i &childBounds = elements[t]->getWindowBounds();
GUIPanel.cpp:    childrenHeights.push_back(childBounds.w - childBounds.y);
GUIPanel.cpp:    childrenWidths.push_back (childBounds.z - childBounds.x + interval.x);
GUIPanel.cpp:    height       = childBounds.w - childBounds.y;
GUIPanel.cpp:    offset = clampNS(float(panelHeight - childrenHeights[t])/2.0f + interval.y, 0.0f, 1000.0f);
GUIPanel.cpp:    elements[t]->setAnchorPoint(CORNERLU);
GUIPanel.cpp:    elements[t]->setPosition(float(width), offset);
GUIPanel.cpp:    elements[t]->computeWindowBounds();
GUIPanel.cpp:    elements[t]->forceUpdate(update);
GUIPanel.cpp:    const Tuple4i &childBounds = elements[t]->getWindowBounds();
GUIPanel.cpp:    newBounds.x = (childBounds.x - clipSize) < newBounds.x ?
GUIPanel.cpp:                   childBounds.x - clipSize : newBounds.x;
GUIPanel.cpp:    newBounds.y = (childBounds.y - clipSize) < newBounds.y ?
GUIPanel.cpp:                   childBounds.y - clipSize : newBounds.y;
GUIPanel.cpp:    elements[t]->computeWindowBounds();
GUIPanel.cpp:  const Tuple4i&  parentBounds = parent->getWindowBounds();
GUIPanel.cpp:  int             temp         = windowBounds.z - windowBounds.x;
GUIPanel.cpp:  if(parentBounds.z - windowBounds.z < stx_abs(position.x))
GUIPanel.cpp:    windowBounds.x  = windowBounds.z - temp;
GUIPanel.cpp:  if(parentBounds.w - windowBounds.w < stx_abs(position.y))
GUIPanel.cpp:    temp            = windowBounds.w - windowBounds.y;
GUIPanel.cpp:    windowBounds.y  = windowBounds.w - temp;
GUIPanel.cpp:      elements[t]->forceUpdate(true);
GUIPanel.cpp:      elements[t]->computeWindowBounds();
GUIPanel.cpp:      if(elements[t]->getCallbackString() == element->getCallbackString())
GUIPanel.cpp:        return false;//LOG_PRINT_NONE("Panel already has a child with CBS -> ")
GUIPanel.cpp:                       //              + element->getCallbackString());
GUIPanel.cpp:    element->setParent(this);
GUIPanel.cpp:  switch(element->getWidgetType())
GUIPanel.cpp:        if(elements[t]->getWidgetType() == RADIO_BUTTON &&
GUIPanel.cpp:          rButton->setChecked(false);
GUIPanel.cpp:    if(elements[t]->getWidgetType() == type)
GUIPanel.cpp:   if(elements[t]->getWidgetType() == PANEL)
GUIPanel.cpp:     height += ((GUIPanel*)elements[t])->getTreeHeight();
GUIComboBox.cpp:  upperPanel->setLayout(XAXIS_LAYOUT);
GUIComboBox.cpp:  upperPanel->setVisibleBounds(true);
GUIComboBox.cpp:  upperPanel->enableBGColor(true);
GUIComboBox.cpp:  upperPanel->setInterval(6, 3);
GUIComboBox.cpp:  upperPanel->addWidget(currentSelection);
GUIComboBox.cpp:  upperPanel->addWidget(dropMenuButton);
GUIComboBox.cpp:  lowerPanel->setLayout(YAXIS_LAYOUT);
GUIComboBox.cpp:  lowerPanel->setInterval(6, 2);
GUIComboBox.cpp:  lowerPanel->setVisible(false);
GUIComboBox.cpp:  lowerPanel->enableBGColor(true);
GUIComboBox.cpp:  lowerPanel->setVisibleBounds(true);
GUIComboBox.cpp:  lowerPanel->setAnchorPoint(CORNERLU);
GUIComboBox.cpp:  lowerPanel->setClipSize(0);
GUIComboBox.cpp:  selectionIndex            =        -1;
GUIComboBox.cpp:  if(!element || element->getName() != "ComboBox")
GUIComboBox.cpp:  D3DXFROMWINEVECTOR3     bordersColor         = upperPanel->getBordersColor();
GUIComboBox.cpp:  D3DXFROMWINEVECTOR4     bgColor              = upperPanel->getBGColor();
GUIComboBox.cpp:  if(child = element->getChildByName("Button"))
GUIComboBox.cpp:    dropMenuButton->loadXMLClippedRectangleInfo(child);
GUIComboBox.cpp:    dropMenuButton->loadXMLSettings(child);
GUIComboBox.cpp:    dropMenuButton->setCallbackString("cbddb");
GUIComboBox.cpp:    dropMenuButton->setLabelString("");
GUIComboBox.cpp:    dropMenuButton->setActive(true);
GUIComboBox.cpp:    dropMenuButton->setVisible(true);
GUIComboBox.cpp:  if(attr = element->getAttributeByName("lowerPanelColorScale"))
GUIComboBox.cpp:    lowerPanelColorScale = attr->getValuef();
GUIComboBox.cpp:  if(attr = element->getAttributeByName("displayScrollingRectangle"))
GUIComboBox.cpp:    displayScrollingRectangle = (attr->getValue() == "true");
GUIComboBox.cpp:  if(attr = element->getAttributeByName("hScale"))
GUIComboBox.cpp:    fontScales.y = attr->getValuef();
GUIComboBox.cpp:  if(attr = element->getAttributeByName("wScale"))
GUIComboBox.cpp:    fontScales.x = attr->getValuef();
GUIComboBox.cpp:  if(child = element->getChildByName("BordersColor"))
GUIComboBox.cpp:  if(child = element->getChildByName("ScrollingColor"))
GUIComboBox.cpp:  if(child = element->getChildByName("BGColor"))
GUIComboBox.cpp:  for(size_t i = 0; i < element->getChildrenCount(); i++)
GUIComboBox.cpp:    if(!(child = element->getChild(i)))
GUIComboBox.cpp:    const std::string &childName = child->getName();
GUIComboBox.cpp:    if(attr    = child->getAttributeByName("string"))
GUIComboBox.cpp:      addItem(attr->getValue());
GUIComboBox.cpp:      fontIndex =  clampNS(child->getValuei(), 0, 50);
GUIComboBox.cpp:  upperPanel->setBordersColor(bordersColor);
GUIComboBox.cpp:  lowerPanel->setBordersColor(bordersColor);
GUIComboBox.cpp:  upperPanel->setBGColor(bgColor);
GUIComboBox.cpp:  lowerPanel->setBGColor(bgColor.x*lowerPanelColorScale,
GUIComboBox.cpp:  upperPanel->checkMouseEvents(extraInfo, rBits);
GUIComboBox.cpp:  if(lowerPanel->isVisible())
GUIComboBox.cpp:    lowerPanel->checkMouseEvents(extraInfo, rBits);
GUIComboBox.cpp:  if(!currentSelection->isFocused() && !dropMenuButton->isFocused())
GUIComboBox.cpp:    lowerPanel->setVisible(true);
GUIComboBox.cpp: //???   evt->consume();
GUIComboBox.cpp:    lowerPanel->setVisible(false);
GUIComboBox.cpp:  GUIEventListener *eventsListener  = parent->getEventsListener();
GUIComboBox.cpp:  int               widgetType      = sourceRectangle->getWidgetType();
GUIComboBox.cpp:  if(currentSelection->isPressed() || dropMenuButton->isPressed())
GUIComboBox.cpp:  if(widgetType == LABEL && (sourceRectangle->getParent() == lowerPanel))
GUIComboBox.cpp:    if(newSelection->isMouseOver())
GUIComboBox.cpp:      scrollingRectangle = newSelection->getWindowBounds();
GUIComboBox.cpp:    if(newSelection->isClicked() &&
GUIComboBox.cpp:       (newSelection->getLabelString()==currentSelection->getLabelString()))
GUIComboBox.cpp:      currentSelection->setLabelString(newSelection->getLabelString());
GUIComboBox.cpp:      selectionIndex = getItemIndex(newSelection->getLabelString());
GUIComboBox.cpp:		eventsListener->actionPerformed(*guiEvent);
GUIComboBox.cpp:  upperPanel->render(clockTick);
GUIComboBox.cpp:  if(lowerPanel->isVisible())
GUIComboBox.cpp:    lowerPanel->renderClippedBounds();
GUIComboBox.cpp:    lowerPanel->enableBGColor(false);
GUIComboBox.cpp:    lowerPanel->setVisibleBounds(false);
GUIComboBox.cpp:    if(scrollingRectangle.x >= lowerPanel->getWindowBounds().x && displayScrollingRectangle)
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Color4fv(scrollingColor);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Begin(PRIM_TRIANGLE_STRIP);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Vertex2i(scrollingRectangle.x - 2, scrollingRectangle.y);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Vertex2i(scrollingRectangle.x - 2, scrollingRectangle.w);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Vertex2i(scrollingRectangle.z + 1, scrollingRectangle.y);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->Vertex2i(scrollingRectangle.z + 1, scrollingRectangle.w);
GUIComboBox.cpp:      IRenderer::GetRendererInstance()->End();
GUIComboBox.cpp:    lowerPanel->render(clockTick);
GUIComboBox.cpp:    lowerPanel->enableBGColor(true);
GUIComboBox.cpp:    lowerPanel->setVisibleBounds(true);
GUIComboBox.cpp:  const    int    *spaces   = font ? font->getFontObject()->getCharHorizontalGlyphs() : 0;
GUIComboBox.cpp:  LOG_PRINT_NONE("spaces = %x\n", font->getFontObject()->getCharHorizontalGlyphs());
GUIComboBox.cpp:  LOG_PRINT_NONE("spaces = %d\n", *font->getFontObject()->getCharHorizontalGlyphs());
GUIComboBox.cpp:    height   =  float(font->getFontObject()->getHeight());
GUIComboBox.cpp:  currentSelection->setLabelString(items[0]);
GUIComboBox.cpp:  currentSelection->setDimensions(maxWidth*fontScales.x + 2.0f, height*fontScales.y);
GUIComboBox.cpp:  currentSelection->getLabel()->setFontIndex(fontIndex);
GUIComboBox.cpp:  currentSelection->getLabel()->setScales(fontScales);
GUIComboBox.cpp:  dropMenuButton->setDimensions(height*fontScales.y + 4.0f, height*fontScales.y + 4.0f);
GUIComboBox.cpp:    newLabel->getLabel()->setFontIndex(fontIndex);
GUIComboBox.cpp:    newLabel->setDimensions(maxWidth*fontScales.x + 2.0f /*+ height*fontScales.y + 10.0f*/, height*fontScales.y);
GUIComboBox.cpp:    newLabel->getLabel()->setScales(fontScales);
GUIComboBox.cpp:    if(!lowerPanel->addWidget(newLabel))
GUIComboBox.cpp:    upperPanel->setAnchorPoint(getAnchorPoint());
GUIComboBox.cpp:    upperPanel->setPosition(getPosition());
GUIComboBox.cpp:    upperPanel->setParent(parent);
GUIComboBox.cpp:    upperPanel->forceUpdate(true);
GUIComboBox.cpp:    upperPanel->computeWindowBounds();
GUIComboBox.cpp:    upperPanel->forceUpdate(false);
GUIComboBox.cpp:    windowBounds = upperPanel->getWindowBounds();
GUIComboBox.cpp:    lowerPanel->setPosition(0.0f, float(upperPanel->getHeight()));
GUIComboBox.cpp:    lowerPanel->setParent(upperPanel);
GUIComboBox.cpp:    lowerPanel->forceUpdate(true);
GUIComboBox.cpp:    lowerPanel->setParent(this);
GUIComboBox.cpp:    upperPanel->setParent(this);
GUIComboBox.cpp:  return -1;
GUIComboBox.cpp:  if(lowerPanel) return lowerPanel->isVisible();
Event.cpp:  this->operator =(copy);
Event.cpp:int MouseEvent::getScrolling(){ if(STX_Service::GetInputInstance()->OnMouseButtonPress(MBUTTON_WHEELUP))
Event.cpp:				else if(STX_Service::GetInputInstance()->OnMouseButtonPress(MBUTTON_WHEELDOWN))
Event.cpp:int MouseEvent::getButtonID() { if(STX_Service::GetInputInstance()->OnMouseButtonPress(MBUTTON_LEFT))
Event.cpp:				else if(STX_Service::GetInputInstance()->OnMouseButtonPress(MBUTTON_MIDDLE))
Event.cpp:				else if(STX_Service::GetInputInstance()->OnMouseButtonPress(MBUTTON_RIGHT))
Event.cpp:int MouseEvent::getX()        { return STX_Service::GetInputInstance()->GetMouseX();          }
Event.cpp:int MouseEvent::getY()        { return STX_Service::GetInputInstance()->GetMouseY();          }
GUIClippedRectangle.cpp:  if(child = element->getChildByName("Texture"))
GUIClippedRectangle.cpp:  if(child = element->getChildByName("TextureRectangle"))
GUIClippedRectangle.cpp:  if(child = element->getChildByName("BGColor"))
GUIClippedRectangle.cpp:  if(attr = element->getAttributeByName("clipSize"))
GUIClippedRectangle.cpp:    clipSize = attr->getValuei();
GUIClippedRectangle.cpp:  if(child = element->getChildByName("BordersColor"))
GUIClippedRectangle.cpp:  if(attr = element->getAttributeByName("drawBackground"))
GUIClippedRectangle.cpp:    enableBGColor(attr->getValue() == "true");
GUIClippedRectangle.cpp:  if(attr = element->getAttributeByName("drawBounds"))
GUIClippedRectangle.cpp:    setVisibleBounds(attr->getValue() == "true");
GUIClippedRectangle.cpp:	if(0)//texture.getID()!=-1 && drawBackground)
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->InitTex(IRenderer::GetRendererInstance()->GettexShader(), IRenderer::GetRendererInstance()->GettexVF());
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->setShader(IRenderer::GetRendererInstance()->GettexShader());
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->setVertexFormat(IRenderer::GetRendererInstance()->GettexVF());
GUIClippedRectangle.cpp:			PCTvertices[i].vertex.x+=Translation->x;
GUIClippedRectangle.cpp:			PCTvertices[i].vertex.y+=Translation->y;
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->InitPlain(IRenderer::GetRendererInstance()->GetplainShader(), IRenderer::GetRendererInstance()->GetplainVF());
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->setShader(IRenderer::GetRendererInstance()->GetplainShader());
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->setVertexFormat(IRenderer::GetRendererInstance()->GetplainVF());
GUIClippedRectangle.cpp:			PCvertices[i].vertex.x+=Translation->x;
GUIClippedRectangle.cpp:			PCvertices[i].vertex.y+=Translation->y;
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setup2DMode(0, (float) IRenderer::GetRendererInstance()->GetViewportWidth(), 0, (float) IRenderer::GetRendererInstance()->GetViewportHeight());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setShaderConstant4f("scaleBias", IRenderer::GetRendererInstance()->GetscaleBias2D());
GUIClippedRectangle.cpp:    //IRenderer::GetRendererInstance()->VertexPointer(2, /*GL_INT,*/ 0, &vertices[0]);
GUIClippedRectangle.cpp:    if(texture.getID()!=-1 && drawBackground)
GUIClippedRectangle.cpp:      //IRenderer::GetRendererInstance()->TexCoordPointer(2, /*GL_FLOAT,*/ 0, &texCoords[0]) ;
GUIClippedRectangle.cpp:        IRenderer::GetRendererInstance()->InitTex(IRenderer::GetRendererInstance()->GettexShader(),IRenderer::GetRendererInstance()->GettexVF());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setShader(IRenderer::GetRendererInstance()->GettexShader());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setVertexFormat(IRenderer::GetRendererInstance()->GettexVF());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setTexture("Base",texture.getID());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setShaderConstant4f("colorRGBA", D3DXFROMWINEVECTOR4(1.0f,1.0f,1.0f,1.0f));
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setBlendState(IRenderer::GetRendererInstance()->GetblendSrcAlpha());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setDepthState(IRenderer::GetRendererInstance()->GetnoDepthTest());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setup2DMode(0, (float) IRenderer::GetRendererInstance()->GetViewportWidth(), 0, (float) IRenderer::GetRendererInstance()->GetViewportHeight());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setShaderConstant4f("scaleBias", IRenderer::GetRendererInstance()->GetscaleBias2D());
GUIClippedRectangle.cpp:    IRenderer::GetRendererInstance()->setShaderConstant4f("colorRGBA", bgColor);
GUIClippedRectangle.cpp:	//IRenderer::GetRendererInstance()->setBlendState(IRenderer::GetRendererInstance()->GetblendSrcAlpha());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setDepthState(IRenderer::GetRendererInstance()->GetnoDepthTest());
GUIClippedRectangle.cpp:	//IRenderer::GetRendererInstance()->setRasterizerState(IRenderer::GetRendererInstance()->GetcullFront());
GUIClippedRectangle.cpp:		unsigned int ret=IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLE_FAN,
GUIClippedRectangle.cpp:		//IRenderer::GetRendererInstance()->getPrimitiveCountR(PRIM_TRIANGLE_FAN,nvertices),
GUIClippedRectangle.cpp:		nvertices-2,
GUIClippedRectangle.cpp:		unsigned int ret=IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLE_FAN,
GUIClippedRectangle.cpp:		//IRenderer::GetRendererInstance()->getPrimitiveCountR(PRIM_TRIANGLE_FAN,nvertices),
GUIClippedRectangle.cpp:		nvertices-2,
GUIClippedRectangle.cpp:			unsigned int ret=IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLES, nvertices/3, PCTvertices, PCTvertices, sizeof(PCTVertex));
GUIClippedRectangle.cpp:			unsigned int ret=IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLES, nvertices/3, PCvertices, PCvertices, sizeof(PCVertex));
GUIClippedRectangle.cpp:    if(texture!=-1)
GUIClippedRectangle.cpp:    IRenderer::GetRendererInstance()->setShaderConstant4f("colorRGBA", col);
GUIClippedRectangle.cpp:	//IRenderer::GetRendererInstance()->setBlendState(IRenderer::GetRendererInstance()->GetblendSrcAlpha());
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->setDepthState(IRenderer::GetRendererInstance()->GetnoDepthTest());
GUIClippedRectangle.cpp:	//IRenderer::GetRendererInstance()->setRasterizerState(IRenderer::GetRendererInstance()->GetcullFront());
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_LINE_STRIP,
GUIClippedRectangle.cpp:		nvertices-1,
GUIClippedRectangle.cpp:		IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_LINE_STRIP,
GUIClippedRectangle.cpp:		nvertices-1,
GUIClippedRectangle.cpp:  //IRenderer::GetRendererInstance()->Color3f(1,1,1);
GUIClippedRectangle.cpp:  float yTexOffset    = float(clipSize)/(windowBounds.w - windowBounds.y),
GUIClippedRectangle.cpp:        xTexOffset    = float(clipSize)/(windowBounds.z - windowBounds.x);
GUIClippedRectangle.cpp:  xTexOffset *= textureRectangle.z - textureRectangle.x;
GUIClippedRectangle.cpp:  yTexOffset *= textureRectangle.w - textureRectangle.y;
GUIClippedRectangle.cpp:	float v[16] =  {  1.0f,-1.0f, 1.0f, 1.0f,
GUIClippedRectangle.cpp:			 -1.0f,-1.0f, 0.0f, 1.0f,
GUIClippedRectangle.cpp:			 -1.0f, 1.0f, 0.0f, 0.0f };
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLE_STRIP, 2, &v[0], &v[0], 4*sizeof(float));
GUIClippedRectangle.cpp:	float v[16] =  { -1.0f, -1.0f, 0.0f, 1.0f,  
GUIClippedRectangle.cpp:			  1.0f, -1.0f, 1.0f, 1.0f,   
GUIClippedRectangle.cpp:			 -1.0f,  1.0f, 0.0f, 0.0f };
GUIClippedRectangle.cpp:	IRenderer::GetRendererInstance()->DrawPrimitiveUP(PRIM_TRIANGLE_FAN, 2, &v[0], &v[0], 4*sizeof(float));
GUIClippedRectangle.cpp:  vertices[2]=Tuple2i(windowBounds.z - clipSize, windowBounds.w);
GUIClippedRectangle.cpp:  vertices[3]=Tuple2i(windowBounds.z, windowBounds.w - clipSize);
GUIClippedRectangle.cpp:  texCoords[0]=D3DXFROMWINEVECTOR2(textureRectangle.x             , textureRectangle.w - yTexOffset);
GUIClippedRectangle.cpp:  texCoords[2]=D3DXFROMWINEVECTOR2(textureRectangle.z - xTexOffset, textureRectangle.y             );
GUIClippedRectangle.cpp:  texCoords[6]=D3DXFROMWINEVECTOR2(textureRectangle.x             , textureRectangle.w - yTexOffset);
GUIClippedRectangle.cpp:  if(texture.getID()!=-1)
GUIButton.cpp:  if(!element || element->getName() != "Button")
GUIButton.cpp:  if(attr = element->getAttributeByName("bounce"))
GUIButton.cpp:    enableBounce((attr->getValue() == "true"));
GUIButton.cpp:  float   displacement = 2.0f*(STX_Service::GetInputInstance()->IsMouseButtonPressed())*bounce;
GUIButton.cpp:  m_Translation=D3DXFROMWINEVECTOR3(-displacement, -displacement, 0.0f);
GUIButton.cpp:    int width  = windowBounds.z - windowBounds.x,
GUIButton.cpp:        height = windowBounds.w - windowBounds.y;
GUIButton.cpp:        width = (label.getWidth() - width)/2 + clipSize + 2;
GUIButton.cpp:        windowBounds.x -=width;
GUIButton.cpp:        width = (label.getWidth() - width)/2 + clipSize + 2;
GUIButton.cpp:      height = (label.getHeight() - height)/2 + clipSize + 2;
GUIButton.cpp:      windowBounds.y -= height;

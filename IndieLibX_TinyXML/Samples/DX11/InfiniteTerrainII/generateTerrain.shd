struct VsIn
{
	float4 pos: POSITION
};

struct VsOut
{
	float4 pos:   SV_POSITION;
	float2 coord: TEXCOORD0;
};

float2 offset;

VsOut mainVS(VsIn input)
{
	VsOut Out;	
	Out.pos = input.pos;
	Out.coord = 0.24 * (input.pos.xy + offset);
	return Out;
}

Texture2D Noise;
SamplerState g_samLinear
{
    Filter = ANISOTROPIC;
    AddressU = Clamp;
    AddressV = Clamp;
};

float turb(float2 c)
{
	float t = 0.0;
	float k = 1.0;
	for (int i = 0; i < 4; i++)
	{
		float n = Noise.sample(g_samLinear, c).x;
		t += k * n;
		k /= 2.192038172;
		c *= 2.192038172;
	}
	return t;
}

float4 mainPS(VS_Output input) : SV_Target
{
	float t = turb(input.coord);
	return t * t * 0.45;
}


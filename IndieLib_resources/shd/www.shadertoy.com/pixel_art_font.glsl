bool f_b_64bitchar_bitset(vec2 o_point, float n_char){
    //uint: an unsigned 32-bit integer
    //only 32 bit numbers can be stored, thats why we need a modulo here
    uint[] a_n_u32_charparts = uint[256] (2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,2122219134u,32382u,0u,0u,269488144u,4096u,5140u,0u,339612672u,5182u,940865552u,1064016u,1746282758u,24724u,2550400056u,39012u,4112u,0u,67373072u,4104u,538972168u,2064u,947664980u,84u,2081427456u,4112u,0u,528384u,1006632960u,0u,0u,4096u,135274560u,516u,1111630872u,6180u,269490192u,14352u,404767292u,32260u,404767292u,15426u,303306768u,4158u,1077805694u,15426u,1111360060u,15426u,135274622u,516u,1111245372u,15426u,2084717116u,15424u,1048576u,4096u,1048576u,528384u,102260736u,24600u,8257536u,126u,1612187136u,1560u,404759068u,2048u,958544896u,939801129u,1008998424u,16962u,572400158u,7714u,16851484u,7202u,572662302u,7714u,35521086u,15874u,35521086u,514u,956375580u,7202u,1115570754u,16962u,269488252u,31760u,538976312u,7202u,235541026u,8722u,33686018u,32258u,2460665474u,33410u,1380599362u,16994u,1145324600u,14404u,35529246u,514u,1145324600u,4208708u,169746974u,8722u,805848120u,14404u,269488382u,4112u,1111638594u,15426u,608322177u,6180u,2861728386u,33478u,404235330u,16932u,271074434u,4112u,135274622u,32260u,67372060u,7172u,268960770u,16416u,269488156u,7184u,5128u,0u,0u,32256u,0u,0u,4104u,0u,2084584448u,23650u,1111360002u,14918u,70778880u,14340u,1115439168u,23650u,2118269952u,15362u,470292480u,2056u,841744384u,471870498u,605815812u,9252u,269484048u,4112u,270008336u,235933712u,337904644u,13324u,134744072u,6152u,1516634112u,16962u,1282670592u,17476u,1111228416u,15426u,1178206208u,33701442u,1650196480u,1077967938u,1278476288u,1028u,402929664u,7200u,138151936u,6152u,1145307136u,22628u,1111621632u,6180u,2172715008u,26202u,608305152u,26136u,1145176064u,101191720u,272367616u,15368u,202115128u,14344u,269488144u,1052688u,808456220u,7184u,1275068416u,50u,2122219134u,32382u);
    //if(o_point.x > 7. || o_point.y > 7.){return false;}
    vec2 o_point_mod = floor(mod(o_point, 8.));
    o_point_mod.y = 7.-o_point_mod.y;
    float n_y_floor = floor(o_point_mod.y / 4.); // 4 = half height of 8 max height

    float n_pixel_index = (o_point_mod.y * 8.) + o_point_mod.x;
    float n_pixel_index_mod = mod(n_pixel_index, 32.);
    uint b_bitset = 
        a_n_u32_charparts[int((n_char*2.)+(n_y_floor))] & (1u<<uint(n_pixel_index_mod));
    return b_bitset > 0u;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    float A = 65.; 
    float B = 66.;
    //...
    
    fragCoord = floor(fragCoord *0.2);
    
    bool b_64bitchar_bitset = f_b_64bitchar_bitset(fragCoord, 1.);
    float n_x = floor((fragCoord.x / 8.));
    float n_y = floor((fragCoord.y / 8.));

    float n_index_char = (n_y * 8.) + n_x; 
    b_64bitchar_bitset = f_b_64bitchar_bitset(fragCoord, mod((n_index_char+32.),128.));

    if(b_64bitchar_bitset){
        fragColor = vec4(1.);
    }else{
        fragColor = vec4(0.);
    }
}

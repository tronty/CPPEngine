[Vertex shader]
/**

The main purpose of the vertex program is to send the position of the vertex in an interpolator
so that we can compute perlin in the fragment program

 **/

struct a2v 
{
    float4 Position     : POSITION;
    float4 Color0       : COLOR0;
    float  TexCoord0    : TEXCOORD0;
};

// define outputs from vertex shader
struct v2f
{
    float4 HPosition    : POSITION;
    float4 Color0       : COLOR0;
    float  texCoord		: TEXCOORD0;
    float4 Pos			: TEXCOORD1;
};
float4x4 modelViewProj;
float4x4 modelView;
float4x4 NoiseMatrix;
v2f main(a2v IN
         )
{
  v2f OUT;

  float4 Pos = IN.Position;//mul(modelView, IN.Position);
  Pos = mul(NoiseMatrix, Pos);

  OUT.HPosition = mul(modelViewProj, IN.Position);
  OUT.Color0 = IN.Color0;
  OUT.texCoord = IN.TexCoord0;
  OUT.Pos.xyz = Pos.xyz;

  return OUT;
}

[Fragment shader]
/**

Here we get 1 level of perlin noise for each fragment.
perlin table is in a 1D texture

 **/

#define B  32      // table size
#define B2 66      // B*2 + 2
#define BR 0.03125 // 1 / B

struct vert2frag
{
    float4 HPosition    : POSITION;
    float4 Color0       : COLOR0;
    float  texCoord		: TEXCOORD0;
    float4 Pos			: TEXCOORD1;
};

//
//=====> The Perlin 2D version
//
#if 0
float2 s_curve(float2 t)
{
  return t*t*( float2(3.0f, 3.0f) - float2(2.0f, 2.0f)*t);
}
float3 s_curve(float3 t)
{
  return t*t*( float3(3.0f, 3.0f, 3.0f) - float3(2.0f, 2.0f, 2.0f)*t);
}

#define TABLE(a) texRECT(PerlinTexture, float2(a,0))
// 2D version
float noise(float2 v, const uniform samplerRECT PerlinTexture)
{
  v = v + float2(10000.0f, 10000.0f);

  float2 i = frac(v * BR) * B;   // index between 0 and B-1
  float2 f = frac(v);            // fractional position

  // lookup in permutation table
  float2 p;
  p[0] = TABLE(i[0]).w;
  p[1] = TABLE(i[0]+1).w;
  p = p + i[1];

  // compute dot products between gradients and vectors
  float4 r;
  r[0] = dot( TABLE(p[0]   ).xy, f);
  r[1] = dot( TABLE(p[1]   ).xy, f - float2(1.0f, 0.0f) );
  r[2] = dot( TABLE(p[0]+1 ).xy, f - float2(0.0f, 1.0f) );
  r[3] = dot( TABLE(p[1]+1 ).xy, f - float2(1.0f, 1.0f) );

  // interpolate
  f = s_curve(f);
  r = lerp( r.xyyy, r.zwww, f[1] );
  return lerp( r.x, r.y, f[0] );
}


half4 main(
            vert2frag       IN,
sampler1D BaseTexture : TEXUNIT0,
samplerRECT PerlinTexture : TEXUNIT1
            ) : COLOR
{ 
	half4 textureh4;

    float s,a,b;
	s = IN.Pos.w * noise(IN.Pos.xz, PerlinTexture);
	s = clamp(IN.texCoord - (IN.texCoord * (s*0.5+0.5)), 1/256.0, 255.0/256.0);
	s = lerp(s, IN.texCoord, IN.texCoord);
	textureh4 = tex1D(BaseTexture, s);
    return textureh4 * IN.Color0.xxxx;
}
//
//=====> The 3D texture version
//
#else
float	NoiseAmp;
sampler1D BaseTexture;
sampler3D NoiseTexture;
half4 main(
            vert2frag       IN
            ) : COLOR
{ 
	float nscale;
	float4 l = tex3D(NoiseTexture, IN.Pos.xyz);
	nscale = 0.5f;
	float3 scaledpos = IN.Pos.xyz * 2.0;
	l += tex3D(NoiseTexture, scaledpos) * nscale;
	nscale *= 0.5f;
	scaledpos *= 2.0;
	l += tex3D(NoiseTexture, scaledpos) * nscale;
	nscale *= 0.5f;
	scaledpos *= 2.0;
	l += tex3D(NoiseTexture, scaledpos) * nscale;
	//
	// Now fetching the 1D texture
	//
	float s;
	s = l.x; // take an arbitrary component...
	s = clamp(IN.texCoord - (IN.texCoord * (s*0.5+0.5)), 1/256.0, 255.0/256.0);
	s = lerp(s, IN.texCoord, IN.texCoord);

	half4 textureh4;
	textureh4 = tex1D(BaseTexture, s);
    return textureh4 * NoiseAmp;
}
#endif

/*
  Copyright (c) 2021 Tommi Roenty   http://www.tommironty.fi/
  Licensed under The GNU Lesser General Public License, version 2.1:
      http://opensource.org/licenses/LGPL-2.1
*/
struct VsIn2 {
    float2 position	: POSITION;
    float2 uv		: TEXCOORD0;
};
struct VsIn3 {
    float3 position	: POSITION;
    float3 Normal	: NORMAL;
    float3 Binormal	: BINORMAL;
    float3 Tangent	: TANGENT;
    float3 Color	: TEXCOORD0;
    float2 uv		: TEXCOORD1;
};
struct VsOut {
    float4 position	: POSITION;
    float2 uv		: TEXCOORD0;
};

[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;
VsOut main2(VsIn2 In)
{
	VsOut Out=(VsOut)0;
	Out.position = float4(In.position.x, In.position.y, 0.0 , 1.0);
	Out.uv.x = In.uv.x;Out.uv.y = 1.0-In.uv.y;
	return Out;
}
VsOut main3(VsIn3 In)
{
	VsOut Out=(VsOut)0;
	Out.position = mul(worldViewProj, float4(In.position, 1.0));
	Out.uv.x = In.uv.x;Out.uv.y = 1.0-In.uv.y;
	return Out;
}

[Fragment shader]

float2 mouse=float2(1, 1);
float2 resolution=float2(1, 1);
float time=0.0;

// "Seascape" by Alexander Alekseev aka TDM - 2014
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

int NUM_STEPS = 16;
float PI	 	= 3.1415;
float EPSILON	= 0.001;
//float EPSILON_NRM	= 0.;

// sea
int ITER_GEOMETRY = 3;
int ITER_FRAGMENT = 5;
float SEA_HEIGHT = 0.6;
float SEA_CHOPPY = 4.0;
float SEA_SPEED = 0.8;
float SEA_FREQ = 0.16;
float3 SEA_BASE = float3(0.1,0.19,0.22);
float3 SEA_WATER_COLOR = float3(0.8,0.9,0.6);
//float SEA_TIME = 0.8;
float2x2 octave_m = float2x2(1.6,1.2,-1.2,1.6);

// math
float3x3 fromEuler(float3 ang) {
	float2 a1 = float2(sin(ang.x),cos(ang.x));
    float2 a2 = float2(sin(ang.y),cos(ang.y));
    float2 a3 = float2(sin(ang.z),cos(ang.z));
    float3x3 m;
    m[0] = float3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);
	m[1] = float3(-a2.y*a1.x,a1.y*a2.y,a2.x);
	m[2] = float3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);
	return m;
}
float hash( float2 p ) {
	float h = dot(p,float2(127.1,311.7));	
    return frac(sin(h)*43758.5453123);
}
float noise( in float2 p ) {
    float2 i = floor( p );
    float2 f = frac( p );	
	float2 u = f*f*(3.0-2.0*f);
    return -1.0+2.0*lerp( lerp( hash( i + float2(0.0,0.0) ), 
                     hash( i + float2(1.0,0.0) ), u.x),
                lerp( hash( i + float2(0.0,1.0) ), 
                     hash( i + float2(1.0,1.0) ), u.x), u.y);
}

// lighting
float diffuse(float3 n,float3 l,float p) {
    return pow(dot(n,l) * 0.4 + 0.6,p);
}
float specular(float3 n,float3 l,float3 e,float s) {    
    float nrm = (s + 8.0) / (3.1415 * 8.0);
    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;
}

// sky
float3 getSkyColor(float3 e) {
    e.y = max(e.y,0.0);
    float3 ret;
    ret.x = pow(1.0-e.y,2.0);
    ret.y = 1.0-e.y;
    ret.z = 0.6+(1.0-e.y)*0.4;
    return ret;
}

// sea
float sea_octave(float2 uv, float choppy) {
    uv += noise(uv);        
    float2 wv = 1.0-abs(sin(uv));
    float2 swv = abs(cos(uv));    
    wv = lerp(wv,swv,wv);
    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);
}

float map(float3 p, float SEA_TIME) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    float2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_GEOMETRY; i++) {        
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;        
    	uv = mul(octave_m,uv); freq *= 1.9; amp *= 0.22;
        choppy = lerp(choppy,1.0,0.2);
    }
    return p.y - h;
}

float map_detailed(float3 p, float SEA_TIME) {
    float freq = SEA_FREQ;
    float amp = SEA_HEIGHT;
    float choppy = SEA_CHOPPY;
    float2 uv = p.xz; uv.x *= 0.75;
    
    float d, h = 0.0;    
    for(int i = 0; i < ITER_FRAGMENT; i++) {        
    	d = sea_octave((uv+SEA_TIME)*freq,choppy);
    	d += sea_octave((uv-SEA_TIME)*freq,choppy);
        h += d * amp;        
    	uv = mul(octave_m,uv); freq *= 1.9; amp *= 0.22;
        choppy = lerp(choppy,1.0,0.2);
    }
    return p.y - h;
}

float3 getSeaColor(float3 p, float3 n, float3 l, float3 eye, float3 dist) {  
    float fresnel = 1.0 - max(dot(n,-eye),0.0);
    fresnel = pow(fresnel,3.0) * 0.65;
        
    float3 reflected = getSkyColor(reflect(eye,n));    
    float3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; 
    
    float3 color = lerp(refracted,reflected,fresnel);
    
    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);
    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;
    
    float f=specular(n,l,eye,60.0);
    color += float3(f,f,f);
    
    return color;
}

// tracing
float3 getNormal(float3 p, float eps, float SEA_TIME) {
    float3 n;
    n.y = map_detailed(p, SEA_TIME);    
    n.x = map_detailed(float3(p.x+eps,p.y,p.z), SEA_TIME) - n.y;
    n.z = map_detailed(float3(p.x,p.y,p.z+eps), SEA_TIME) - n.y;
    n.y = eps;
    return normalize(n);
}

float heightMapTracing(float3 ori, float3 dir, out float3 p, float SEA_TIME) {  
    float tm = 0.0;
    float tx = 1000.0;    
    float hx = map(ori + dir * tx, SEA_TIME);
    if(hx > 0.0) return tx;   
    float hm = map(ori + dir * tm, SEA_TIME);    
    float tmid = 0.0;
    for(int i = 0; i < NUM_STEPS; i++) {
        tmid = lerp(tm,tx, hm/(hm-hx));                   
        p = ori + dir * tmid;                   
    	float hmid = map(p, SEA_TIME);
		if(hmid < 0.0) {
        	tx = tmid;
            hx = hmid;
        } else {
            tm = tmid;
            hm = hmid;
        }
    }
    return tmid;
}

// main

float4 main(VsOut IN): COLOR 
{
	float4 fragColor;
	float2 fragCoord=IN.uv;
	float EPSILON_NRM = 0.1 / resolution.x;
	float SEA_TIME = time * SEA_SPEED;
	
	float2 uv = fragCoord.xy / resolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= resolution.x / resolution.y;    
    float time = time * 0.3 + mouse.x*0.01;
        
    // ray
    float3 ang = float3(sin(time*3.0)*0.1,sin(time)*0.2+0.3,time);    
    float3 ori = float3(0.0,3.5,time*5.0);
    float3 dir = normalize(float3(uv.xy,-2.0)); dir.z += length(uv) * 0.15;
    dir = mul(fromEuler(ang), normalize(dir));
    
    // tracing
    float3 p;
    heightMapTracing(ori,dir,p, SEA_TIME);
    float3 dist = p - ori;
    float3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM, SEA_TIME);
    float3 light = normalize(float3(0.0,1.0,0.8)); 
             
    // color
    float3 color = lerp(
        getSkyColor(dir),
        getSeaColor(p,n,light,dir,dist),
    	pow(smoothstep(0.0,-0.05,dir.y),0.3));
        
    // post
	fragColor = float4(pow(color,float3(0.75,0.75,0.75)), 1.0);
	return fragColor;
}


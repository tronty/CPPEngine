// http://glslsandbox.com/e#59382.0
// #ifdef GL_ES
// precision mediump float;
// #endif
/*
  Copyright (c) 2019 Tommi Roenty   http://www.tommironty.fi/
  Licensed under The GNU Lesser General Public License, version 2.1:
      http://opensource.org/licenses/LGPL-2.1
*/

struct VsIn {
    float3 position	: POSITION;
    float3 Normal	: NORMAL;
    float3 Binormal	: BINORMAL;
    float3 Tangent	: TANGENT;
    float3 Color	: TEXCOORD0;
    float2 uv		: TEXCOORD1;
};
struct VsOut {
    float4 position	: POSITION;
    float2 uv		: TEXCOORD0;
};

[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;
VsOut main(VsIn In)
{
	VsOut Out=(VsOut)0;
	Out.position = mul(worldViewProj, float4(In.position, 1.0));
	Out.uv = In.uv;
	return Out;
}

[Fragment shader]

float2 mouse=float2(1, 1);
float2 resolution=float2(1, 1);
float time=0.0;
#define PI 3.1416
const float3 SEA = float3(0.0, 0.15, 0.4);
const float3 SAND = float3(0.6, 0.7, 0.55);
const float3 GRASS = float3(0.2, 0.7, 0.3);
const float3 ICE = float3(0.8, 0.9, 0.9);
const float3 NIGHTLIGHTS = float3(0.4, 0.35, 0.2);
//float3 st(float2 uv, float2 sc, float sh, float rim);
//float perlin_(float2 p);
//float2 noise_(float2 n);

float2 noise_(float2 n)
{
	float2 ret;
#if 1
	ret.x=fract(sin(dot(n.xy, float2(12.9898, 78.233)))* 43758.5453)*2.0-1.0;
	ret.y=fract(sin(dot(n.xy, float2(34.9865, 65.946)))* 28618.3756)*2.0-1.0;
	ret=normalize(ret);
#endif
	return ret; 
}
//stolen from http://glsl.heroku.com/e#4698.0
float perlin_(float2 p) {
#if 1
	float2 q=floor(p);
	float2 r=fract(p);
	float s=dot(noise_(q),p-q);
	float t=dot(noise_(float2(q.x+1.0,q.y)),p-float2(q.x+1.0,q.y));
	float u=dot(noise_(float2(q.x,q.y+1.0)),p-float2(q.x,q.y+1.0));
	float v=dot(noise_(float2(q.x+1.0,q.y+1.0)),p-float2(q.x+1.0,q.y+1.0));
	float Sx=3.0*(r.x*r.x)-2.0*(r.x*r.x*r.x);
	float a=s+Sx*(t-s);
	float b=u+Sx*(v-u);
	float Sy=3.0*(r.y*r.y)-2.0*(r.y*r.y*r.y);
	return a+Sy*(b-a);
#else
	return 0;
#endif
}

//@fernozzle (please excuse the fake sphere mapping and sloppy code)
// actually in space MOD! by @fernozzle

float3 st(float2 FragCoord, float2 sc, float sh, float rim)
{
#if 1
	//return float3(mod(sc, float2(0.1))*10., 1.);
	float x = perlin_(sc*1.5)*70. + perlin_(sc*7.)*20. + perlin_(sc*20.)*10. + perlin_(sc*60.)*7.;
	float stdsh =  -sh*0.3+0.5;
	if(x > 30. - abs(sc.y)*20.){
		return ICE * float3(stdsh*1.15 + 0.0, stdsh + 0.1, stdsh + 0.1) + float3(FragCoord.xy / resolution.xy, 1.0)*pow(rim, 10.);
	}else if(x > 3.){
		return GRASS * (x * 0.007 + 0.7) * float3(stdsh*3.0-0.9, stdsh*0.8+0.2, stdsh*0.8+0.2) + (NIGHTLIGHTS*max(0.,sh)*max(0.,perlin_(sc*80.0))*0.9*max(0.,-x*0.3+4.)) + float3(FragCoord.xy / resolution.xy, 1.0)*pow(rim, 10.);
	}else if(x > 1.){
		return SAND * stdsh + float3(FragCoord.xy / resolution.xy, 1.0)*pow(rim, 10.);
	}else{
		return SEA * float3(stdsh, stdsh*2.1-0.2, stdsh*0.8+0.2) + float3(FragCoord.xy / resolution.xy, 1.0)*pow(rim, 5.);
	}
	return float3(0,0,0);
#else
	return float3(0,0,0);
#endif
}

float4 main(VsOut IN) : COLOR0
{
    float4 vertexin=IN.position;
    float2 FragCoord=IN.uv;
    float2 surfacePosition=IN.uv;
#if 1
	float2 p = (-1.0 + 2.0 * ((FragCoord.xy) / resolution.xy));
	p.x *= (resolution.x / resolution.y);
	p = surfacePosition*2.0;
	float dist = dot(p, p);
	const float br = 0.8;
	float2 sunPos = float2(0.65, 0.2);
	float3 c = float3(0.05, 0.1, 0.2)/dist + float3(1.0, 0.8, 0.3)*smoothstep(0.0, 7.0, 1.0/distance(p, sunPos))*2.0;
	if(dist < br*br){
		float2 ssc = p/br;
		float sx = asin(ssc.x);
		float widthFromY = sqrt(1.0 - ssc.y*ssc.y);
		float nsx = sx/widthFromY;
		float2 sc = float2(nsx-time*0.5, p.y/br/widthFromY);
		c = st(FragCoord, sc, -nsx*1.1, dist/(br*br));
	}	
	return float4(c, 1.0);
#else
	return float4(0,0,0,1);
#endif
}


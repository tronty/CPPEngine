/*
  Copyright (c) 2019 Tommi Roenty   http://www.tommironty.fi/
  Licensed under The GNU Lesser General Public License, version 2.1:
      http://opensource.org/licenses/LGPL-2.1
*/


struct VsIn2 {
    float2 position	: POSITION;
    float2 uv		: TEXCOORD0;
};
struct VsIn3 {
    float3 position	: POSITION;
    float3 Normal	: NORMAL;
    float3 Binormal	: BINORMAL;
    float3 Tangent	: TANGENT;
    float3 Color	: TEXCOORD0;
    float2 uv		: TEXCOORD1;
};
struct VsOut {
    float4 position	: POSITION;
    float2 uv		: TEXCOORD0;
};

[Vertex shader]
ROW_MAJOR float4x4 worldViewProj MVPSEMANTIC;
VsOut main2(VsIn2 In)
{
	VsOut Out=(VsOut)0;
	Out.position = float4(In.position.x, In.position.y, 0.0 , 1.0);
	Out.uv.x = In.uv.x;Out.uv.y = 1.0-In.uv.y;
	return Out;
}
VsOut main3(VsIn3 In)
{
	VsOut Out=(VsOut)0;
	Out.position = mul(worldViewProj, float4(In.position, 1.0));
	Out.uv.x = In.uv.x;Out.uv.y = 1.0-In.uv.y;
	return Out;
}

[Fragment shader]
float mod(float x, float y)
{
  return x - y * floor(x / y);
}


float2 mod(float2 x, float2 y)
{
  return x - y * floor(x / y);
}

float3 mod(float3 x, float3 y)
{
  return x - y * floor(x / y);
}
#define int2 float2
sampler2D iChannel0;
float     iTime=0;                        // shader playback time (in seconds)
float2      iResolution=float2(1,1);                  // viewport resolution (in pixels)
float2 iMouse=float2(1,1);
// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// Volumetric clouds. It performs level of detail (LOD) for faster rendering

float noise_( in float3 x )
{
    float3 p = floor(x);
    float3 f = frac(x);
	f = f*f*(3.0-2.0*f);
    
#if 1
	float2 uv = (p.xy+float2(37.0,17.0)*p.z) + f.xy;
    float2 rg = tex2D( iChannel0, (uv+ 0.5)/256.0 ).yx;
#else
    ivec3 q = ivec3(p);
	int2 uv = q.xy + int2(37,17)*q.z;

	float2 rg = lerp( lerp( texelFetch( iChannel0, (uv           )&255, 0 ),
				        texelFetch( iChannel0, (uv+int2(1,0))&255, 0 ), f.x ),
				   lerp( texelFetch( iChannel0, (uv+int2(0,1))&255, 0 ),
				        texelFetch( iChannel0, (uv+int2(1,1))&255, 0 ), f.x ), f.y ).yx;
#endif    
    
	return -1.0+2.0*lerp( rg.x, rg.y, f.z );
}

float map5( in float3 p )
{
	float3 q = p - float3(0.0,0.1,1.0)*iTime;
	float f;
    f  = 0.50000*noise_( q ); q = q*2.02;
    f += 0.25000*noise_( q ); q = q*2.03;
    f += 0.12500*noise_( q ); q = q*2.01;
    f += 0.06250*noise_( q ); q = q*2.02;
    f += 0.03125*noise_( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}

float map4( in float3 p )
{
	float3 q = p - float3(0.0,0.1,1.0)*iTime;
	float f;
    f  = 0.50000*noise_( q ); q = q*2.02;
    f += 0.25000*noise_( q ); q = q*2.03;
    f += 0.12500*noise_( q ); q = q*2.01;
    f += 0.06250*noise_( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}
float map3( in float3 p )
{
	float3 q = p - float3(0.0,0.1,1.0)*iTime;
	float f;
    f  = 0.50000*noise_( q ); q = q*2.02;
    f += 0.25000*noise_( q ); q = q*2.03;
    f += 0.12500*noise_( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}
float map2( in float3 p )
{
	float3 q = p - float3(0.0,0.1,1.0)*iTime;
	float f;
    f  = 0.50000*noise_( q ); q = q*2.02;
    f += 0.25000*noise_( q );;
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}

float3 sundir = normalize( float3(-1.0,0.0,-1.0) );

float4 integrate( in float4 sum, in float dif, in float den, in float3 bgcol, in float t )
{
    // lighting
    float3 lin = float3(0.65,0.7,0.75)*1.4 + float3(1.0, 0.6, 0.3)*dif;        
    float4 col = float4( lerp( float3(1.0,0.95,0.8), float3(0.25,0.3,0.35), den ), den );
    col.xyz *= lin;
    col.xyz = lerp( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );
    // front to back blending    
    col.a *= 0.4;
    col.rgb *= col.a;
    return sum + col*(1.0-sum.a);
}

#define MARCH(STEPS,MAPLOD) for(int i=0; i<STEPS; i++) { float3  pos = ro + t*rd; if( pos.y<-3.0 || pos.y>2.0 || sum.a > 0.99 ) break; float den = MAPLOD( pos ); if( den>0.01 ) { float dif =  clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 ); sum = integrate( sum, dif, den, bgcol, t ); } t += max(0.05,0.02*t); }

float4 raymarch( in float3 ro, in float3 rd, in float3 bgcol, in int2 px )
{
	float4 sum = float4(0, 0, 0, 0);

	float t = 0.0;//0.05*texelFetch( iChannel0, px&255, 0 ).x;

    MARCH(30,map5);
    MARCH(30,map4);
    MARCH(30,map3);
    MARCH(30,map2);

    return clamp( sum, 0.0, 1.0 );
}

float3x3 setCamera( in float3 ro, in float3 ta, float cr )
{
	float3 cw = normalize(ta-ro);
	float3 cp = float3(sin(cr), cos(cr),0.0);
	float3 cu = normalize( cross(cw,cp) );
	float3 cv = normalize( cross(cu,cw) );
    return float3x3( cu, cv, cw );
}

float4 render( in float3 ro, in float3 rd, in int2 px )
{
    // background sky     
	float sun = clamp( dot(sundir,rd), 0.0, 1.0 );
	float3 col = float3(0.6,0.71,0.75) - rd.y*0.2*float3(1.0,0.5,1.0) + 0.15*0.5;
	col += 0.2*float3(1.0,.6,0.1)*pow( sun, 8.0 );

    // clouds    
    float4 res = raymarch( ro, rd, col, px );
    col = col*(1.0-res.w) + res.xyz;
    
    // sun glare    
	col += 0.2*float3(1.0,0.4,0.2)*pow( sun, 3.0 );

    return float4( col, 1.0 );
}



float4 main(VsOut IN): COLOR 
{
	float4 fragColor;
	float2 fragCoord=IN.uv;
    float2 p = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;

    float2 m = iMouse.xy/iResolution.xy;
    
    // camera
    float3 ro = 4.0*normalize(float3(sin(3.0*m.x), 0.4*m.y, cos(3.0*m.x)));
	float3 ta = float3(0.0, -1.0, 0.0);
    float3x3 ca = setCamera( ro, ta, 0.0 );
    // ray
    float3 rd = mul(ca , normalize( float3(p.x, p.y, 1.5)));
    
    fragColor = render( ro, rd, int2(fragCoord.x-0.5, fragCoord.y-0.5) ); // ???
	return fragColor;
}

void mainVR( out float4 fragColor, in float2 fragCoord, in float3 fragRayOri, in float3 fragRayDir )
{
    fragColor = render( fragRayOri, fragRayDir, int2(fragCoord.x-0.5, fragCoord.y-0.5) );
}

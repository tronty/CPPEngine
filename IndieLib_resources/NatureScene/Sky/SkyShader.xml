<Shaders  fragmentProcessor = "PIXEL_SHADER"
          vertexProcessor   = "VERTEX_SHADER"

          linkProcessors    = "true">

  <VERTEX_SHADER>
    <Uniform name = "params" type = "float" size = "4"/>
    <Uniform name = "offset" type = "float" size = "3"/>
    <RawData>
      uniform vec4  params;
      uniform vec3  offset;
      varying float intensitySqrd,
                    intensity;
  
      void main(void)
      {
        
        vec2 newUV  = vec2((gl_Vertex.x - offset.x)/params.x,
                           (gl_Vertex.z - offset.z)/params.z);
      
        gl_TexCoord[0].x  = newUV.x + params.w*0.66;
        gl_TexCoord[0].y  = newUV.y + params.w*0.33;
        gl_TexCoord[0].xy *= 2.0;

        gl_TexCoord[0].z = newUV.x + params.w*1.33;
        gl_TexCoord[0].w = newUV.y + params.w*1.66;
        gl_TexCoord[0].zw *= 3.0;
 
        //Get the vertex height and scale it to 0 - 1 range
        intensity        = gl_Vertex.y/params.y;
        intensity        = exp(clamp(intensity, 0.0, 1.0))/2.8;
        intensitySqrd    = intensity*intensity;
   
        gl_Position      = ftransform();
      }
    </RawData>
  </VERTEX_SHADER>

  <PIXEL_SHADER>
    <Uniform name = "noise"    type =   "int" size = "1" x = "0" />
    <Uniform name = "skyInfo"  type = "float" size = "4" x = "0.33" y = "0.50"
                                                        z = "1.00" w = "0.25"/>
    <RawData>
      uniform sampler2D noise;
      uniform vec4      skyInfo;
      varying float     intensitySqrd,
                        intensity;
    
      void main(void)
      {
        vec4 noise1     = texture2D(noise, gl_TexCoord[0].xy),
             noise2     = texture2D(noise, gl_TexCoord[0].zw);

	vec4 cloudFrag  = (noise1 + noise2) *  intensitySqrd,
	     cloudColor = vec4((1.0 - intensity)*skyInfo.x,
	                       (1.0 - intensity)*skyInfo.y,
	                       intensity*skyInfo.z, 0.0);

	gl_FragColor    = cloudColor * (1.0 - cloudFrag.x) + cloudFrag;

      }
    </RawData>
  </PIXEL_SHADER>
  
</Shaders>

[Vertex shader]
//--------------------------------------------------------------------------------------
// ContentStreaming.fx
// Copyright (c) Microsoft Corporation. All rights reserved.
//--------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
// Input and Output Structures
//-----------------------------------------------------------------------------------------
struct VSBasicIn
{
	vec4 Pos						: POSITION;
	vec3 Norm						: NORMAL;
	vec2 Tex						: TEXCOORD0;
};

struct PSBasicIn
{
	vec4 Pos						: POSITION;
	vec3 Norm						: TEXCOORD0;
	vec2 Tex						: TEXCOORD1;
	vec3 ViewDir					: TEXCOORD2;
};

//-----------------------------------------------------------------------------------------
// Globals
//-----------------------------------------------------------------------------------------
ROW_MAJOR matrix g_mWorldViewProj MVPSEMANTIC;
ROW_MAJOR matrix g_mWorld;
vec3 g_vEyePt;



//-----------------------------------------------------------------------------------------
// VertexShader: VSBasic
//-----------------------------------------------------------------------------------------
PSBasicIn VSBasic(VSBasicIn input)
{
	PSBasicIn output;
	
	output.Pos = mul( g_mWorldViewProj,input.Pos );
	output.Norm = normalize( mul( ((vec3x3)g_mWorld) ,input.Norm) );
	output.Tex = input.Tex;
	output.ViewDir = g_vEyePt - input.Pos.xyz;

	return output;
}

[Fragment shader]
struct PSBasicIn
{
	vec4 Pos						: POSITION;
	vec3 Norm						: TEXCOORD0;
	vec2 Tex						: TEXCOORD1;
	vec3 ViewDir					: TEXCOORD2;
};

vec3 g_vWorldLightDir = vec3(-0.707f, 0.707f, 0.0f);
float  g_fTime;
float  g_fElapsedTime;

//-----------------------------------------------------------------------------------------
// Textures and Samplers
//-----------------------------------------------------------------------------------------
sampler2D DiffuseSampler;
sampler2D NormalSampler;

//-----------------------------------------------------------------------------------------
// PixelShader: PSTerrain
//-----------------------------------------------------------------------------------------
vec4 PSTerrain(PSBasicIn input) : COLOR0
{
	bool usebump=false;
	vec4 diffuse = tex2D( DiffuseSampler, input.Tex );
	vec3 bump = tex2D( NormalSampler, input.Tex ).xzy;
	bump = bump*2 - 1;
	bump.z = -bump.z;
	
	vec3 normal = bump;
	if( !usebump )
		normal = input.Norm;
	float lighting = max( 0.3, saturate( dot( normal, g_vWorldLightDir ) ) );
	
	// Calculate specular power
	vec3 ViewDir = normalize( input.ViewDir );
    vec3 halfAngle = normalize( ViewDir + g_vWorldLightDir );
    vec4 spec = vec4(0,0,0,0);
    if( usebump )
        spec = pow( saturate(dot( halfAngle, normal )), 16 );
    
	gl_FragColor = diffuse * lighting + spec;
}
vec4 PSTerrainBump(PSBasicIn input) : COLOR0
{
	bool usebump=true;
	vec4 diffuse = tex2D( DiffuseSampler, input.Tex );
	vec3 bump = tex2D( NormalSampler, input.Tex ).xzy;
	bump = bump*2 - 1;
	bump.z = -bump.z;
	
	vec3 normal = bump;
	if( !usebump )
		normal = input.Norm;
	float lighting = max( 0.3, saturate( dot( normal, g_vWorldLightDir ) ) );
	
	// Calculate specular power
	vec3 ViewDir = normalize( input.ViewDir );
    vec3 halfAngle = normalize( ViewDir + g_vWorldLightDir );
    vec4 spec = vec4(0,0,0,0);
    if( usebump )
        spec = pow( saturate(dot( halfAngle, normal )), 16 );
    
	gl_FragColor = diffuse * lighting + spec;
}
/*
//-----------------------------------------------------------------------------------------
// Technique: RenderTileDiff
//-----------------------------------------------------------------------------------------
technique RenderTileDiff
{
    pass p0
    {
		VertexShader = compile vs_2_0 VSBasic();
        PixelShader  = compile ps_2_0 PSTerrain(false);   
    }  
}

//-----------------------------------------------------------------------------------------
// Technique: RenderTileBump
//-----------------------------------------------------------------------------------------
technique RenderTileBump
{
    pass p0
    {
		VertexShader = compile vs_2_0 VSBasic();
        PixelShader  = compile ps_2_0 PSTerrain(true);   
    }  
}

//-----------------------------------------------------------------------------------------
// Technique: RenderTileWire
//-----------------------------------------------------------------------------------------
technique RenderTileWire
{
    pass p0
    {
		VertexShader = compile vs_2_0 VSBasic();
        PixelShader  = compile ps_2_0 PSTerrain(false);   
        
        FillMode = WIREFRAME;
    }  
}

*/



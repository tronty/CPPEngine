Aristid Lindenmayer 1925–1989
Przemyslaw Prusinkiewicz
Aristid Lindenmayer


The Algorithmic Beauty
of Plants

With
James S. Hanan
F. David Fracchia
Deborah Fowler
Martin J. M. de Boer
Lynn Mercer

With 150 Illustrations, 48 in Color
This edition of The Alogirthmic Beauty of Plants is the electronic version
of the book that was published by Springer-Verlag, New York, in 1990 and
reprinted in 1996. The electronic version has been produced using the orig-
inal LATEX ﬁles and digital illustrations.




2004
c       Przemyslaw Prusinkiewicz
All rights reserved.




Front cover design: The roses in the foreground (Roses by D. R. Fowler,
J. Hanan and P. Prusinkiewicz [1990]) were modeled using L-systems. Dis-
tributed ray-tracing with one extended light source was used to simulate
depth of ﬁeld. The roses were placed on a background image (photgraphy
by G. Rossbach), which was scanned digitally and post-processed.
Preface

The beauty of plants has attracted the attention of mathematicians for      Mathematics
centuries. Conspicuous geometric features such as the bilateral sym-        and beauty
metry of leaves, the rotational symmetry of ﬂowers, and the helical
arrangements of scales in pine cones have been studied most exten-
sively. This focus is reﬂected in a quotation from Weyl [159, page 3],
“Beauty is bound up with symmetry.”
    This book explores two other factors that organize plant structures
and therefore contribute to their beauty. The ﬁrst is the elegance and
relative simplicity of developmental algorithms, that is, the rules which
describe plant development in time. The second is self-similarity, char-
acterized by Mandelbrot [95, page 34] as follows:
     When each piece of a shape is geometrically similar to the
     whole, both the shape and the cascade that generate it are
     called self-similar.
This corresponds with the biological phenomenon described by Herman,
Lindenmayer and Rozenberg [61]:
     In many growth processes of living organisms, especially of
     plants, regularly repeated appearances of certain multicel-
     lular structures are readily noticeable.... In the case of a
     compound leaf, for instance, some of the lobes (or leaﬂets),
     which are parts of a leaf at an advanced stage, have the
     same shape as the whole leaf has at an earlier stage.
Thus, self-similarity in plants is a result of developmental processes.     Growth and
By emphasizing the relationship between growth and form, this book          form
follows a long tradition in biology. D’Arcy Thompson [143] traces its
origins to the late seventeenth century, and comments:
     Organic form itself is found, mathematically speaking, to be
     a function of time.... We might call the form of an organism
     an event in space-time, and not merely a conﬁguration in
     space.
This concept is echoed by Hallé, Oldeman and Tomlinson [58]:
     The idea of the form implicitly contains also the history of
     such a form.
                 vi                                                                Preface

                     The developmental processes are captured using the formalism of
Modeling of      L-systems. They were introduced in 1968 by Lindenmayer [82] as a
plants           theoretical framework for studying the development of simple multicel-
                 lular organisms, and subsequently applied to investigate higher plants
                 and plant organs. After the incorporation of geometric features, plant
                 models expressed using L-systems became detailed enough to allow the
                 use of computer graphics for realistic visualization of plant structures
                 and developmental processes.
                     The emphasis on graphics has several motivations. A visual compar-
                 ison of models with real structures is an important component of model
                 validation. The display of parameters and processes not observable di-
                 rectly in living organisms may assist in the analysis of their physiology,
                 and thus present a valuable tool for educational purposes. From an
                 aesthetic perspective, plants present a wealth of magniﬁcent objects
                 for image synthesis. The quest for photorealism challenges modeling
                 and rendering algorithms, while a departure from realism may oﬀer a
                 fresh view of known structures.
                     The application of computer graphics to biological structures is only
                 one of many factors that contribute to the interdisciplinary character
                 of this book. For example, the notion of L-systems is a part of formal
                 language theory, rooted in the theory of algorithms. The application of
                 L-systems to plant description has been studied by biologists, and in-
                 volves various methods of general mathematics. Self-similarity relates
                 plant structures to the geometry of fractals. Computer-aided visual-
                 ization of these structures, and the processes that create them, joins
                 science with art.
About the book       The study of an area that combines so many disciplines is very stim-
                 ulating. Some results may be of special interest to students of biology
                 or computer graphics, but a much wider circle of readers, generally in-
                 terested in science, may ﬁnd mathematical plant models inspiring, and
                 the open problems worth further thought. Consequently, all basic con-
                 cepts are presented in a self-contained manner, assuming only general
                 knowledge of mathematics at the junior college level.
                     This book focuses on original research results obtained by the au-
                 thors in the scope of the cooperation between the Theoretical Biology
                 Group, directed by Aristid Lindenmayer at the University of Utrecht,
                 and the Computer Graphics Group, working under the supervision of
                 Przemyslaw Prusinkiewicz at the University of Regina. Technically, the
                 book evolved from the SIGGRAPH ’88 and ’89 course notes Linden-
                 mayer systems, fractals, and plants, published by Springer-Verlag in
                 the series Lecture Notes in Biomathematics [112]. The present volume
                 has been extended with edited versions of recent journal and conference
                 papers (see Sources), as well as previously unpublished results.
                     Aristid Lindenmayer is the author of the notion of L-systems which
                 forms the main thread of the book. He also played an essential role
                 in the reported research by suggesting topics for study, guiding the
                 construction of speciﬁc plant models, monitoring their correctness and
Preface                                                              vii

participating in many discussions of biological and mathematical prob-
lems. Seriously ill, Professor Lindenmayer co-authored and edited sev-
eral chapters, but was not able to participate in the completion of this
work. If any inaccuracies or mistakes remain, he could not prevent
them. Still, in spite of unavoidable shortcomings, we hope that this
book will convey his and our excitement of applying mathematics to
explore the beauty of plants.
viii                                                            Preface

Acknowledgements
While preparing this book, we received extraordinary support and help
from many people, and we are deeply thankful to all of them. First
of all, we would like to thank those who were directly involved in the
underlying research and software development. Craig Kolb wrote the
ray tracer rayshade used to render many of the images included in
the book. Allan Snider developed several software tools, including a
previewer for rayshade, and provided valuable expertise in ray-tracing.
Daryl Hepting developed software for rendering sets deﬁned by iterated
function systems and provided diagrams for Chapter 8. Norma Fuller
modeled several man-made objects incorporated into the images.
    We would like to thank Zdzislaw Pawlak and Grzegorz Rozenberg
who initiated the contact between the Theoretical Biology Group at
the University of Utrecht and the Computer Graphics Group at the
University of Regina. Benoit Mandelbrot and Heinz-Otto Peitgen made
it possible to conduct parts of the reported research at Yale University
and the University of Bremen.
    We are also grateful to all those who shared their knowledge with
us and made suggestions reﬂected in this book. Discussions and corre-
spondence with Jules Bloomenthal, Mark de Does, Pauline Hogeweg,
Jacqueline and Hermann Lück, Gavin Miller, Laurie Reuter, Dietmar
Saupe and Alvy Ray Smith were particularly fruitful.
    Research reported in this book was funded by grants from the Nat-
ural Sciences and Engineering Research Council of Canada, as well as
an equipment donation and a research grant from Apple Computer,
Inc. We are particularly grateful to Mark Cutter for making the sup-
port from Apple possible. The Graphics Laboratory at the University
of Regina also enjoys continued support from the university. The inﬂu-
ence of Lawrence Symes and R. Brien Maguire is deeply appreciated.
In addition, the University of Regina and the University of Utrecht
contributed towards travel expenses.
    We would like to thank Springer-Verlag and in particular, Gerhard
Rossbach and Nina LaVoy from the Springer West Coast Oﬃce, for the
expedient publishing of this book.
    Finally, we would like to thank our families and friends for their
love, support and patience while we worked on this book.


                                Przemyslaw Prusinkiewicz
                                James Hanan
                                F. David Fracchia
                                Deborah R. Fowler
                                Martin J. M. de Boer
                                Lynn Mercer
                                Regina, Canada
                                May 1990
Sources                                                               ix

Sources

In the preparation of this book, edited parts of the following publica-
tions were used:

   • P. Prusinkiewicz and J. Hanan. Lindenmayer systems, fractals,
     and plants, volume 79 of Lecture Notes in Biomathematics.
     Springer-Verlag, Berlin, 1989. [Chapters 1, 3, 5]
   • P. Prusinkiewicz, A. Lindenmayer and J. Hanan. Developmen-
     tal models of herbaceous plants for computer imagery purposes.
     Proceedings of SIGGRAPH ’88 (Atlanta, Georgia, August 1-5,
     1988), in Computer Graphics, 22(4):141–150, 1988. Used with the
     permission of the Association for Computing Machinery. [Chap-
     ters 1, 3, 5]
   • P. Prusinkiewicz and J. Hanan. Visualization of botanical struc-
     tures and processes using parametric L-systems. In D. Thal-
     mann, editor, Scientiﬁc visualization and graphics simulation,
     pages 183–201. J. Wiley & Sons, 1990. [Chapters 1–5]
   • D. Fowler, J. Hanan and P. Prusinkiewicz. Modelling spiral phyl-
     lotaxis. computers & graphics, 13(3):291–296, 1989. [Chapter 4]
   • J. S. Hanan. PLANTWORKS: A software system for realistic
     plant modelling. Master’s thesis, University of Regina, 1988.
     [Chapter 5]
   • F. D. Fracchia, P. Prusinkiewicz and M. J. M. de Boer. Animation
     of the development of multicellular structures. In N. Magnenat-
     Thalmann and D. Thalmann, editors, Computer Animation ’90,
     pages 3–18. Springer-Verlag, Tokyo, 1990. [Chapter 7]
   • F. D. Fracchia, P. Prusinkiewicz, and M. J. M. de Boer. Visualiza-
     tion of the development of multicellular structures. In Proceedings
     of Graphics Interface ’90, pages 267–277, 1990. [Chapter 7]
   • L. Mercer, P. Prusinkiewicz, and J. Hanan. The concept and de-
     sign of a virtual laboratory. In Proceedings of Graphics Interface
     ’90, pages 149–155, 1990. [Appendix 8.2]
Contents

1 Graphical modeling using L-systems                                              1
  1.1 Rewriting systems . . . . . . . . . . . . . . . . .      .   .   .   .   . 1
  1.2 DOL-systems . . . . . . . . . . . . . . . . . . .        .   .   .   .   . 3
  1.3 Turtle interpretation of strings . . . . . . . . . .     .   .   .   .   . 6
  1.4 Synthesis of DOL-systems . . . . . . . . . . . .         .   .   .   .   . 11
       1.4.1 Edge rewriting . . . . . . . . . . . . . .        .   .   .   .   . 11
       1.4.2 Node rewriting . . . . . . . . . . . . . .        .   .   .   .   . 13
       1.4.3 Relationship between edge and
              node rewriting . . . . . . . . . . . . . . .     .   .   .   .   .   18
  1.5 Modeling in three dimensions . . . . . . . . . .         .   .   .   .   .   18
  1.6 Branching structures . . . . . . . . . . . . . . .       .   .   .   .   .   21
       1.6.1 Axial trees . . . . . . . . . . . . . . . . .     .   .   .   .   .   21
       1.6.2 Tree OL-systems . . . . . . . . . . . . .         .   .   .   .   .   23
       1.6.3 Bracketed OL-systems . . . . . . . . . .          .   .   .   .   .   24
  1.7 Stochastic L-systems . . . . . . . . . . . . . . .       .   .   .   .   .   28
  1.8 Context-sensitive L-systems . . . . . . . . . . .        .   .   .   .   .   30
  1.9 Growth functions . . . . . . . . . . . . . . . . .       .   .   .   .   .   36
  1.10 Parametric L-systems . . . . . . . . . . . . . . .      .   .   .   .   .   40
       1.10.1 Parametric OL-systems . . . . . . . . . .        .   .   .   .   .   41
       1.10.2 Parametric 2L-systems . . . . . . . . . .        .   .   .   .   .   43
       1.10.3 Turtle interpretation of parametric words        .   .   .   .   .   46

2 Modeling of trees                                                                51

3 Developmental models of herbaceous plants                                        63
  3.1 Levels of model speciﬁcation . . . . . . . . .   .   .   .   .   .   .   .   64
      3.1.1 Partial L-systems . . . . . . . . . . .    .   .   .   .   .   .   .   64
      3.1.2 Control mechanisms in plants . . . .       .   .   .   .   .   .   .   65
      3.1.3 Complete models . . . . . . . . . . .      .   .   .   .   .   .   .   68
  3.2 Branching patterns . . . . . . . . . . . . . .   .   .   .   .   .   .   .   70
  3.3 Models of inﬂorescences . . . . . . . . . . .    .   .   .   .   .   .   .   71
      3.3.1 Monopodial inﬂorescences . . . . . .       .   .   .   .   .   .   .   71
      3.3.2 Sympodial inﬂorescences . . . . . . .      .   .   .   .   .   .   .   82
      3.3.3 Polypodial inﬂorescences . . . . . . .     .   .   .   .   .   .   .   86
      3.3.4 Modiﬁed racemes . . . . . . . . . . .      .   .   .   .   .   .   .   93
xii                                                                                  Contents

4 Phyllotaxis                                                        99
  4.1 The planar model . . . . . . . . . . . . . . . . . . . . . . 100
  4.2 The cylindrical model . . . . . . . . . . . . . . . . . . . . 109

5 Models of plant organs                                          119
  5.1 Predeﬁned surfaces . . . . . . . . . . . . . . . . . . . . . 119
  5.2 Developmental surface models . . . . . . . . . . . . . . . 120
  5.3 Models of compound leaves . . . . . . . . . . . . . . . . 128

6 Animation of plant development                                                                 133
  6.1 Timed DOL-systems . . . . . . . . . . . . . .                      .   .   .   .   .   .   135
  6.2 Selection of growth functions . . . . . . . . . .                  .   .   .   .   .   .   139
      6.2.1 Development of nonbranching ﬁlaments                         .   .   .   .   .   .   140
      6.2.2 Development of branching structures .                        .   .   .   .   .   .   142

7 Modeling of cellular layers                                                                    145
  7.1 Map L-systems . . . . . . . . . .      .   .   .   .   .   .   .   .   .   .   .   .   .   145
  7.2 Graphical interpretation of maps       .   .   .   .   .   .   .   .   .   .   .   .   .   150
  7.3 Microsorium linguaeforme . . . .       .   .   .   .   .   .   .   .   .   .   .   .   .   153
  7.4 Dryopteris thelypteris . . . . . . .   .   .   .   .   .   .   .   .   .   .   .   .   .   162
  7.5 Modeling spherical cell layers . .     .   .   .   .   .   .   .   .   .   .   .   .   .   166
  7.6 Modeling 3D cellular structures .      .   .   .   .   .   .   .   .   .   .   .   .   .   168

8 Fractal properties of plants                                    175
  8.1 Symmetry and self-similarity . . . . . . . . . . . . . . . . 177
  8.2 Plant models and iterated function systems . . . . . . . . 178

Epilogue                                                                                         191

Appendix A Software environment for plant modeling 193
  A.1 A virtual laboratory in botany . . . . . . . . . . . . . . . 193
  A.2 List of laboratory programs . . . . . . . . . . . . . . . . 198

Appendix B      About the ﬁgures                                                                 201

Appendix C      Turtle interpretation of symbols                                                 209

Bibliography                                                                                     211

Index                                                                                            225
Chapter 1

Graphical modeling using
L-systems

Lindenmayer systems — or L-systems for short — were conceived as
a mathematical theory of plant development [82]. Originally, they did
not include enough detail to allow for comprehensive modeling of higher
plants. The emphasis was on plant topology, that is, the neighborhood
relations between cells or larger plant modules. Their geometric aspects
were beyond the scope of the theory. Subsequently, several geometric
interpretations of L-systems were proposed with a view to turning them
into a versatile tool for plant modeling. Throughout this book, an
interpretation based on turtle geometry is used [109]. Basic notions
related to L-system theory and their turtle interpretation are presented
below.


1.1      Rewriting systems
The central concept of L-systems is that of rewriting. In general, rewrit-
ing is a technique for deﬁning complex objects by successively replacing
parts of a simple initial object using a set of rewriting rules or produc-
tions. The classic example of a graphical object deﬁned in terms of
rewriting rules is the snowﬂake curve (Figure 1.1), proposed in 1905 by      Koch
von Koch [155]. Mandelbrot [95, page 39] restates this construction as       construction
follows:
      One begins with two shapes, an initiator and a generator.
      The latter is an oriented broken line made up of N equal
      sides of length r. Thus each stage of the construction begins
      with a broken line and consists in replacing each straight
      interval with a copy of the generator, reduced and displaced
      so as to have the same end points as those of the interval
      being replaced.
            2                        Chapter 1. Graphical modeling using L-systems




                 initiator




                generator

                         Figure 1.1: Construction of the snowﬂake curve

            While the Koch construction recursively replaces open polygons, rewrit-
            ing systems that operate on other objects have also been investigated.
            For example, Wolfram [160, 161] studied patterns generated by rewrit-
            ing elements of rectangular arrays. A similar array-rewriting mecha-
            nism is the cornerstone of Conway’s popular game of life [49, 50]. An
            important body of research has been devoted to various graph-rewriting
            systems [14, 33, 34].
Grammars        The most extensively studied and the best understood rewriting sys-
            tems operate on character strings. The ﬁrst formal deﬁnition of such a
            system was given at the beginning of this century by Thue [128], but
            a wide interest in string rewriting was spawned in the late 1950s by
            Chomsky’s work on formal grammars [13]. He applied the concept of
            rewriting to describe the syntactic features of natural languages. A
            few years later Backus and Naur introduced a rewriting-based notation
            in order to provide a formal deﬁnition of the programming language
            ALGOL-60 [5, 103]. The equivalence of the Backus-Naur form (BNF)
            and the context-free class of Chomsky grammars was soon recognized
            [52], and a period of fascination with syntax, grammars and their appli-
            cation to computer science began. At the center of attention were sets
            of strings — called formal languages — and the methods for generating,
            recognizing and transforming them.
L-systems       In 1968 a biologist, Aristid Lindenmayer, introduced a new type of
            string-rewriting mechanism, subsequently termed L-systems [82]. The
            essential diﬀerence between Chomsky grammars and L-systems lies in
1.2. DOL-systems                                                        3




Figure 1.2: Relations between Chomsky classes of languages and language
classes generated by L-systems. The symbols OL and IL denote language
classes generated by context-free and context-sensitive L-systems, respec-
tively.

the method of applying productions. In Chomsky grammars produc-
tions are applied sequentially, whereas in L-systems they are applied
in parallel and simultaneously replace all letters in a given word. This
diﬀerence reﬂects the biological motivation of L-systems. Productions
are intended to capture cell divisions in multicellular organisms, where
many divisions may occur at the same time. Parallel production ap-
plication has an essential impact on the formal properties of rewriting
systems. For example, there are languages which can be generated
by context-free L-systems (called OL-systems) but not by context-free
Chomsky grammars [62, 128] (Figure 1.2).


1.2      DOL-systems
This section presents the simplest class of L-systems, those which are
deterministic and context-free, called DOL-systems. The discussion
starts with an example that introduces the main idea in intuitive terms.
    Consider strings (words) built of two letters a and b, which may         Example
occur many times in a string. Each letter is associated with a rewriting
rule. The rule a → ab means that the letter a is to be replaced by
the string ab, and the rule b → a means that the letter b is to be
replaced by a. The rewriting process starts from a distinguished string
called the axiom. Assume that it consists of a single letter b. In the
ﬁrst derivation step (the ﬁrst step of rewriting) the axiom b is replaced
             4                         Chapter 1. Graphical modeling using L-systems




                       Figure 1.3: Example of a derivation in a DOL-system



             by a using production b → a. In the second step a is replaced by ab
             using production a → ab. The word ab consists of two letters, both of
             which are simultaneously replaced in the next derivation step. Thus, a
             is replaced by ab, b is replaced by a, and the string aba results. In a
             similar way, the string aba yields abaab which in turn yields abaababa,
             then abaababaabaab, and so on (Figure 1.3).
                  Formal deﬁnitions describing DOL-systems and their operation are
             given below. For more details see [62, 127].
L-system          Let V denote an alphabet, V ∗ the set of all words over V , and
             V + the set of all nonempty words over V . A string OL-system is an
             ordered triplet G = V, ω, P  where V is the alphabet of the system,
             ω ∈ V + is a nonempty word called the axiom and P ⊂ V × V ∗ is a
             ﬁnite set of productions. A production (a, χ) ∈ P is written as a →
             χ. The letter a and the word χ are called the predecessor and the
             successor of this production, respectively. It is assumed that for any
             letter a ∈ V , there is at least one word χ ∈ V ∗ such that a → χ. If
             no production is explicitly speciﬁed for a given predecessor a ∈ V , the
             identity production a → a is assumed to belong to the set of productions
             P . An OL-system is deterministic (noted DOL-system) if and only if
             for each a ∈ V there is exactly one χ ∈ V ∗ such that a → χ.
Derivation        Let µ = a1 . . . am be an arbitrary word over V . The word ν =
             χ1 . . . χm ∈ V ∗ is directly derived from (or generated by) µ, noted µ ⇒
             ν, if and only if ai → χi for all i = 1, . . . , m. A word ν is generated by
             G in a derivation of length n if there exists a developmental sequence of
             words µ0 , µ1 , . . . , µn such that µ0 = ω, µn = ν and µ0 ⇒ µ1 ⇒ . . . ⇒
             µn .
1.2. DOL-systems                                                         5




Figure 1.4: Development of a ﬁlament (Anabaena catenula) simulated using
a DOL-system

The following example provides another illustration of the operation of       Anabaena
DOL-systems. The formalism is used to simulate the development of a
fragment of a multicellular ﬁlament such as that found in the blue-green
bacteria Anabaena catenula and various algae [25, 84, 99]. The symbols
a and b represent cytological states of the cells (their size and readiness
to divide). The subscripts l and r indicate cell polarity, specifying the
positions in which daughter cells of type a and b will be produced. The
development is described by the following L-system:
                             ω    :   ar
                             p1   :   ar → al b r
                             p2   :   al → b l ar                    (1.1)
                             p3   :   b r → ar
                             p4   :   b l → al
   Starting from a single cell ar (the axiom), the following sequence of
words is generated:

                             ar
                             al b r
                             b l ar ar
                             al al b r al b r
                             b l ar b l ar ar b l ar ar
                             ···
           6                         Chapter 1. Graphical modeling using L-systems

               Under a microscope, the ﬁlaments appear as a sequence of cylin-
           ders of various lengths, with a-type cells longer than b-type cells. The
           corresponding schematic image of ﬁlament development is shown in
           Figure 1.4. Note that due to the discrete nature of L-systems, the con-
           tinuous growth of cells between subdivisions is not captured by this
           model.


           1.3      Turtle interpretation of strings
           The geometric interpretation of strings applied to generate schematic
           images of Anabaena catenula is a very simple one. Letters of the
           L-system alphabet are represented graphically as shorter or longer rect-
           angles with rounded corners. The generated structures are one-dimen-
           sional chains of rectangles, reﬂecting the sequence of symbols in the
           corresponding strings.
Previous       In order to model higher plants, a more sophisticated graphical in-
methods    terpretation of L-systems is needed. The ﬁrst results in this direction
           were published in 1974 by Frijters and Lindenmayer [46], and Hogeweg
           and Hesper [64]. In both cases, L-systems were used primarily to de-
           termine the branching topology of the modeled plants. The geometric
           aspects, such as the lengths of line segments and the angle values, were
           added in a post-processing phase. The results of Hogeweg and Hesper
           were subsequently extended by Smith [136, 137], who demonstrated the
           potential of L-systems for realistic image synthesis.
               Szilard and Quinton [141] proposed a diﬀerent approach to L-system
           interpretation in 1979. They concentrated on image representations
           with rigorously deﬁned geometry, such as chain coding [43], and showed
           that strikingly simple DOL-systems could generate the intriguing, con-
           voluted curves known today as fractals [95]. These results were sub-
           sequently extended in several directions. Siromoney and Subrama-
           nian [135] speciﬁed L-systems which generate classic space-ﬁlling curves.
           Dekking investigated the limit properties of curves generated by L-
           systems [32] and concentrated on the problem of determining the fractal
           (Hausdorﬀ) dimension of the limit set [31]. Prusinkiewicz focused on
           an interpretation based on a LOGO-style turtle [1] and presented more
           examples of fractals and plant-like structures modeled using L-systems
           [109, 111]. Further applications of L-systems with turtle interpretation
           include realistic modeling of herbaceous plants [117], description of ko-
           lam patterns (an art form from Southern India) [112, 115, 133, 134],
           synthesis of musical scores [110] and automatic generation of space-
           ﬁlling curves [116].
Turtle         The basic idea of turtle interpretation is given below. A state of the
           turtle is deﬁned as a triplet (x, y, α), where the Cartesian coordinates
           (x, y) represent the turtle’s position, and the angle α, called the heading,
           is interpreted as the direction in which the turtle is facing. Given
           the step size d and the angle increment δ, the turtle can respond to
1.3. Turtle interpretation of strings                                       7




Figure 1.5: (a) Turtle interpretation of string symbols F , +, −. (b) Inter-
pretation of a string. The angle increment δ is equal to 90◦ . Initially the
turtle faces up.

commands represented by the following symbols (Figure 1.5a):
F      Move forward a step of length d. The state of the turtle
       changes to (x , y  , α), where x = x + d cos α and y  =
       y + d sin α. A line segment between points (x, y) and
       (x , y  ) is drawn.
 f     Move forward a step of length d without drawing a line.
+      Turn left by angle δ. The next state of the turtle is
       (x, y, α +δ). The positive orientation of angles is counter-
       clockwise.
−      Turn right by angle δ. The next state of the turtle is
       (x, y, α − δ).
    Given a string ν, the initial state of the turtle (x0 , y0 , α0 ) and ﬁxed   Interpretation
parameters d and δ, the turtle interpretation of ν is the ﬁgure (set of
lines) drawn by the turtle in response to the string ν (Figure 1.5b).
Speciﬁcally, this method can be applied to interpret strings which are
generated by L-systems. For example, Figure 1.6 presents four approxi-
mations of the quadratic Koch island taken from Mandelbrot’s book [95,
page 51]. These ﬁgures were obtained by interpreting strings generated
by the following L-system:

               ω : F −F −F −F
               p : F → F − F + F + FF − F − F + F

The images correspond to the strings obtained in derivations of length
0 to 3. The angle increment δ is equal to 90◦ . The step length d is
decreased four times between subsequent images, making the distance
8                        Chapter 1. Graphical modeling using L-systems




             Figure 1.6: Generating a quadratic Koch island

between the endpoints of the successor polygon equal to the length of
the predecessor segment.
    The above example reveals a close relationship between Koch con-       Koch
structions and L-systems. The initiator corresponds to the axiom and       constructions
the generator corresponds to the production successor. The predeces-       vs. L-systems
sor F represents a single edge. L-systems speciﬁed in this way can be
perceived as codings for Koch constructions. Figure 1.7 presents further
examples of Koch curves generated using L-systems. A slight compli-
cation occurs if the curve is not connected; a second production (with
the predecessor f ) is then required to keep components the proper dis-
tance from each other (Figure 1.8). The ease of modifying L-systems
makes them suitable for developing new Koch curves. For example, one
can start from a particular L-system and observe the results of insert-
ing, deleting or replacing some symbols. A variety of curves obtained
this way are shown in Figure 1.9.
1.3. Turtle interpretation of strings                                 9




Figure 1.7: Examples of Koch curves generated using L-systems: (a)
Quadratic Koch island [95, page 52], (b) A quadratic modiﬁcation of the
snowﬂake curve [95, page 139]




        Figure 1.8: Combination of islands and lakes [95, page 121]
10                       Chapter 1. Graphical modeling using L-systems




Figure 1.9: A sequence of Koch curves obtained by successive modiﬁcation
of the production successor
1.4. Synthesis of DOL-systems                                          11




 a n=10, δ=90◦                        b n=6, δ=60◦
      Fl                                  Fr
      Fl →Fl +Fr +                        Fl →Fr +Fl +Fr
      Fr →-Fl -Fr                         Fr →Fl -Fr -Fl
Figure 1.10: Examples of curves generated by edge-rewriting L-systems: (a)
the dragon curve [48], (b) the Sierpiński gasket [132]


1.4      Synthesis of DOL-systems
Random modiﬁcation of productions gives little insight into the rela-
tionship between L-systems and the ﬁgures they generate. However,
we often wish to construct an L-system which captures a given struc-
ture or sequence of structures representing a developmental process.
This is called the inference problem in the theory of L-systems. Al-
though some algorithms for solving it were reported in the literature
[79, 88, 89], they are still too limited to be of practical value in the
modeling of higher plants. Consequently, the methods introduced be-
low are more intuitive in nature. They exploit two modes of operation
for L-systems with turtle interpretation, called edge rewriting and node
rewriting using terminology borrowed from graph grammars [56, 57, 87].
In the case of edge rewriting, productions substitute ﬁgures for poly-
gon edges, while in node rewriting, productions operate on polygon
vertices. Both approaches rely on capturing the recursive structure of
ﬁgures and relating it to a tiling of a plane. Although the concepts are
illustrated using abstract curves, they apply to branching structures
found in plants as well.

1.4.1     Edge rewriting
Edge rewriting can be viewed as an extension of Koch constructions.
For example, Figure 1.10a shows the dragon curve [21, 48, 95] and the
L-system that generated it. Both the Fl and Fr symbols represent
edges created by the turtle executing the “move forward” command.
The productions substitute Fl or Fr edges by pairs of lines forming
               12                          Chapter 1. Graphical modeling using L-systems




                                                      b
                                                      n=2, δ=90◦
                a                                     -Fr
                n=4, δ=60◦                            Fl →Fl Fl -Fr -Fr +Fl +Fl -Fr -Fr Fl +
                Fl                                        Fr +Fl Fl Fr -Fl +Fr +Fl Fl +
                Fl →Fl +Fr ++Fr -Fl --Fl Fl -Fr +         Fr -Fl Fr -Fr -Fl +Fl +Fr Fr -
                Fr →-Fl +Fr Fr ++Fr +Fl --Fl -Fr      Fr →+Fl Fl -Fr -Fr +Fl +Fl Fr +Fl -
                                                          Fr Fr -Fl -Fr +Fl Fr Fr -Fl -
                                                          Fr Fl +Fl +Fr -Fr -Fl +Fl +Fr Fr

               Figure 1.11: Examples of FASS curves generated by edge-rewriting L-
               systems: (a) hexagonal Gosper curve [51], (b) quadratic Gosper curve [32]
               or E-curve [96]

               left or right turns. Many interesting curves can be obtained assuming
               two types of edges, “left” and “right.” Figures 1.10b and 1.11 present
               additional examples.
FASS curve         The curves included in Figure 1.11 belong to the class of FASS
construction   curves (an acronym for space-filling, self-avoiding, simple and self-
               similar) [116], which can be thought of as ﬁnite, self-avoiding approxi-
               mations of curves that pass through all points of a square (space-ﬁlling
               curves [106]). McKenna [96] presented an algorithm for constructing
               FASS curves using edge replacement. It exploits the relationship be-
               tween such a curve and a recursive subdivision of a square into tiles.
               For example, Figure 1.12 shows the tiling that corresponds to the E-
               curve of Figure 1.11b. The polygon replacing an edge Fl (Figure 1.12a)
               approximately ﬁlls the square on the left side of Fl (b). Similarly, the
               polygon replacing an edge Fr (c) approximately ﬁlls the square on the
               right side of that edge (d). Consequently, in the next derivation step,
               each of the 25 tiles associated with the curves (b) or (d) will be covered
               by their reduced copies (Figure 1.11b). A recursive application of this
               argument indicates that the whole curve is approximately space-ﬁlling.
               It is also self-avoiding due to the following two properties:
1.4. Synthesis of DOL-systems                                           13




               Fl →Fl Fl +Fr +Fr -Fl -Fl +Fr +Fr Fl -Fr -Fl Fl Fr +
                   Fl -Fr -Fl Fl -Fr +Fl Fr +Fr +Fl -Fl -Fr Fr +
               Fr →-Fl Fl +Fr +Fr -Fl -Fl Fr -Fl +Fr Fr +Fl +Fr -
                   Fl Fr Fr +Fl +Fr Fl -Fl -Fr +Fr +Fl -Fl -Fr Fr

Figure 1.12: Construction of the E-curve on the square grid. Left and right
edges are distinguished by the direction of ticks.

   • the generating polygon is self-avoiding, and
   • no matter what the relative orientation of the polygons lying on
     two adjacent tiles, their union is a self-avoiding curve.
The ﬁrst property is obvious, while the second can be veriﬁed by con-
sidering all possible relative positions of a pair of adjacent tiles.
    Using a computer program to search the space of generating poly-
gons, McKenna found that the E-curve is the simplest FASS curve
obtained by edge replacement in a square grid. Other curves require
generators with more edges (Figure 1.13). The relationship between
edge rewriting and tiling of the plane extends to branching structures,
providing a method for constructing and analyzing L-systems which
operate according to the edge-rewriting paradigm (see Section 1.10.3).


1.4.2     Node rewriting
The idea of node rewriting is to substitute new polygons for nodes of the     Subﬁgures
predecessor curve. In order to make this possible, turtle interpretation
is extended by symbols which represent arbitrary subﬁgures. As shown
in Figure 1.14, each subﬁgure A from a set of subﬁgures A is represented
by:
   • two contact points, called the entry point PA and the exit point
     QA , and
   • two direction vectors, called the entry vector pA and the exit vector
     qA .
During turtle interpretation of a string ν, a symbol A ∈ A incorporates
the corresponding subﬁgure into a picture. To this end, A is translated
14                        Chapter 1. Graphical modeling using L-systems




Figure 1.13: Examples of FASS curves generated on the square grid using
edge replacement: (a) a SquaRecurve (grid size 7 × 7), (b) an E-tour (grid
size 9 × 9). Both curves are from [96].




                Figure 1.14: Description of a subﬁgure A
1.4. Synthesis of DOL-systems                                         15




    Ln                L n+1                  Rn               R n+1




              L n+2                                   R n+2

Figure 1.15: Recursive construction of the Hilbert curve [63] in terms of
node replacement

and rotated in order to align its entry point PA and direction pA with
the current position and orientation of the turtle. Having placed A, the
turtle is assigned the resulting exit position QA and direction qA .
   For example, assuming that the contact points and directions of          Recursive
subﬁgures Ln and Rn are as in Figure 1.15, the ﬁgures Ln+1 and Rn+1         formulas
are captured by the following formulas:

                 Ln+1 = +Rn F − Ln F Ln − F Rn +
                 Rn+1 = −Ln F + Rn F Rn + F Ln −

Suppose that curves L0 and R0 are given. One way of evaluating the
string Ln (or Rn ) for n > 0 is to generate successive strings recur-
sively, in the order of decreasing value of index n. For example, the
computation of L2 would proceed as follows:

 L2 = +R1 F − L1 F L1 − F R1 +
    = +(−L0 F + R0 F R0 + F L0 −)F − (+R0 F − L0 F L0 − F R0 +)
      F (+R0 F − L0 F L0 − F R0 +) − F (−L0 F + R0 F R0 + F L0 −)+
               16                       Chapter 1. Graphical modeling using L-systems

               Thus, the generation of string Ln can be considered as a string-rewriting
               mechanism, where the symbols on the left side of the recursive formulas
               are substituted by corresponding strings on the right side. The substi-
               tution proceeds in a parallel way with F, + and − replacing themselves.
               Since all indices in any given string have the same value, they can be
               dropped, provided that a global count of derivation steps is kept. Con-
               sequently, string Ln can be obtained in a derivation of length n using
               the following L-system:

                                  ω : L
                                  p1 : L → +RF − LF L − F R+
                                  p2 : R → −LF + RF R + F L−

                   In order to complete the curve deﬁnition, it is necessary to specify
Pure curves    the subﬁgures represented by symbols L and R. In the special case of
               pure curves [116], these subﬁgures are reduced to single points. Thus,
               one can assume that symbols L and R are erased (replaced by the empty
               string) at the end of the derivation. Alternatively, they can be left in
               the string and ignored by the turtle during string interpretation. This
               second approach is consistent with previous deﬁnitions of turtle inter-
               pretation [109, 112]. A general discussion of the relationship between
               recurrent formulas and L-systems is presented in [61, 62].
FASS curve         Construction of the L-system generating the Hilbert curve can be
construction   extended to other FASS curves [116]. Consider an array of m×m square
               tiles, each including a smaller square, called a frame. The edges of the
               frame run at some distance from the tile’s edges. Each frame bounds an
               open self-avoiding polygon. The endpoints of this polygon coincide with
               the two contact vertices of the frame. Suppose that a single-stroke line
               running through all tiles can be constructed by connecting the contact
               vertices of neighboring frames using short horizontal or vertical line
               segments. A FASS curve can be constructed by the recursive repetition
               of this connecting pattern. To this end, the array of m × m connected
               tiles is considered a macrotile which contains an open polygon inscribed
               into a macroframe. An array of m × m macrotiles is formed, and the
               polygons inscribed into the macroframes are connected together. This
               construction is carried out recursively, with m × m macrotiles at level
               n yielding one macrotile at level n + 1.
                   Tile arrangements suitable for the generation of FASS curves can
               be found algorithmically, by searching the space of all possible arrange-
               ments on a grid of a given size. Examples of curves synthesized this
               way are given in Figures 1.16 and 1.17.
                   As in the case of edge rewriting, the relationship between node
               rewriting and tilings of the plane extends to branching structures. It
               oﬀers a method for synthesizing L-systems that generate objects with a
               given recursive structure, and links methods for plant generation based
               on L-systems with those using iterated function systems [7] (see Chap-
               ter 8).
1.4. Synthesis of DOL-systems                                               17




                                        b
 a                                      n=2, δ=90◦
            ◦
 n=3,δ=90                               -L
 -L                                     L→LFLF+RFR+FLFL-FRF-LFL-
 L→LF+RFR+FL-F-LFLFL-FRFR+                 FR+F+RF-LFL-FRFRFR+
 R→-LFLF+RFRFR+F+RF-LFL-FR              R→-LFLFLF+RFR+FL-F-LF+RFR+
                                           FLF+RFRF-LFL-FRFR
Figure 1.16: Sample FASS curves constructed using tiles with contact points
positioned along a tile edge: (a) 3 × 3 tiles form a macrotile, (b) 4 × 4 tiles
form a macrotile




 a n=2, δ=90◦
     L
     L→LFRFL-F-RFLFR+F+LFRFL
     R→RFLFR+F+LFRFL-F-RFLFR

 b n=2, δ=45◦
     L
     L→L+F+R-F-L+F+R-F-L-F-R+F+L-F-R-F-L+F+R-F-L-F-R-F-
       L+F+R+F+L+F+R-F-L+F+R+F+L-R-F+F+L+F+R-F-L+F+R-F-L
     R→R-F-L+F+R-F-L+F+R+F+L-F-R+F+L+F+R-F-L+F+R+F+L+F+
       R-F-L-F-R-F-L+F+R-F-L-F-R+F+L-F-R-F-L+F+R-F-L+F+R
Figure 1.17: Sample FASS curves constructed using tiles with contact points
positioned diagonally: (a) 3 × 3 tiles form a macrotile (Peano curve [106]),
(b) 5 × 5 tiles form a macrotile
18                          Chapter 1. Graphical modeling using L-systems

1.4.3     Relationship between edge and
          node rewriting
The classes of curves that can be generated using the edge-rewriting and
node-rewriting techniques are not disjoint. For example, reconsider the
L-system that generates the dragon curve using edge replacement:
                            ω : Fl
                            p1 : Fl → Fl + Fr +
                            p2 : Fr → −Fl − Fr

Assume temporarily that a production predecessor can contain more
than one letter; thus an entire subword can be replaced by the successor
of a single production (a formalization of this concept is termed pseudo-
L-systems [109]). The dragon-generating L-system can be rewritten as:

                           ω : Fl
                           p1 : F l → F l + rF +
                           p2 : rF → −F l − rF

where the symbols l and r are not interpreted by the turtle. Production
p1 replaces the letter l by the string l + rF − while the leading letter F
is left intact. In a similar way, production p2 replaces the letter r by
the string −F l − r and leaves the trailing F intact. Thus, the L-system
can be transformed into node-rewriting form as follows:
                             ω : Fl
                             p1 : l → l + rF +
                             p2 : r → −F l − r

    In practice, the choice between edge rewriting and node rewriting
is often a matter of convenience. Neither approach oﬀers an auto-
matic, general method for constructing L-systems that capture given
structures. However, the distinction between edge and node rewriting
makes it easier to understand the intricacies of L-system operation, and
in this sense assists in the modeling task. Speciﬁcally, the problem of
ﬁlling a region by a self-avoiding curve is biologically relevant, since
some plant structures, such as leaves, may tend to ﬁll a plane without
overlapping [38, 66, 67, 94].


1.5      Modeling in three dimensions
 Turtle interpretation of L-systems can be extended to three dimensions
 following the ideas of Abelson and diSessa [1]. The key concept is to
 represent the current orientation of the turtle in space by three vectors
H ,L, U , indicating the turtle’s heading, the direction to the left, and the
 direction up. These vectors have unit length, are perpendicular to each
1.5. Modeling in three dimensions                                      19




          Figure 1.18: Controlling the turtle in three dimensions

other, and satisfy the equation H × L = U . Rotations of the turtle are
then expressed by the equation
                                                      
                            U 
                        L
                       H                 =        L
                                                 H  U
                                                            R,

where R is a 3 × 3 rotation matrix [40]. Speciﬁcally, rotations by angle
α about vectors U ,L and H are represented by the matrices:
                                                            
                                   cos α sin α 0
                       RU (α) =  − sin α cos α 0 
                                     0      0   1
                                                            
                                  cos α 0 − sin α
                       RL (α) =    0   1    0    
                                  sin α 0 cos α
                                                            
                                  1   0      0
                       RH (α) =  0 cos α − sin α 
                                  0 sin α cos α
The following symbols control turtle orientation in space (Figure 1.18):

+      Turn left by angle δ, using rotation matrix RU (δ).
−      Turn right by angle δ, using rotation matrix RU (−δ).
&      Pitch down by angle δ, using rotation matrix RL (δ).
∧      Pitch up by angle δ, using rotation matrix RL (−δ).
 \     Roll left by angle δ, using rotation matrix RH (δ).
 /     Roll right by angle δ, using rotation matrix RH (−δ).
 |     Turn around, using rotation matrix RU (180◦ ).
20                         Chapter 1. Graphical modeling using L-systems




            n=2,   δ=90◦
            A
            A →    B-F+CFC+F-D&F∧D-F+&&CFC+F+B//
            B →    A&F∧CFB∧F∧D∧∧-F-D∧|F∧B|FC∧F∧A//
            C →    |D∧|F∧B-F+C∧F∧A&&FA&F∧C+F+B∧F∧D//
            D →    |CFB-F+B|FA&F∧A&&FB-F+B|FC//

Figure 1.19: A three-dimensional extension of the Hilbert curve [139]. Col-
ors represent three-dimensional “frames” associated with symbols A (red), B
(blue), C (green) and D (yellow).
1.6. Branching structures                                              21

    As an example of a three-dimensional object created using an L-
system, consider the extension of the Hilbert curve shown in Figure 1.19.
The L-system was constructed with the node-replacement technique
discussed in the previous section, using cubes and “macrocubes” in-
stead of tiles and macrotiles.


1.6      Branching structures
According to the rules presented so far, the turtle interprets a character
string as a sequence of line segments. Depending on the segment lengths
and the angles between them, the resulting line is self-intersecting or
not, can be more or less convoluted, and may have some segments
drawn many times and others made invisible, but it always remains
just a single line. However, the plant kingdom is dominated by branch-
ing structures; thus a mathematical description of tree-like shapes and
methods for generating them are needed for modeling purposes. An
axial tree [89, 117] complements the graph-theoretic notion of a rooted
tree [108] with the botanically motivated notion of branch axis.

1.6.1     Axial trees
A rooted tree has edges that are labeled and directed. The edge se-
quences form paths from a distinguished node, called the root or base,
to the terminal nodes. In the biological context, these edges are re-
ferred to as branch segments. A segment followed by at least one more
segment in some path is called an internode. A terminal segment (with
no succeeding edges) is called an apex.
    An axial tree is a special type of rooted tree (Figure 1.20). At each
of its nodes, at most one outgoing straight segment is distinguished.
All remaining edges are called lateral or side segments. A sequence of
segments is called an axis if:
   • the ﬁrst segment in the sequence originates at the root of the tree
     or as a lateral segment at some node,
   • each subsequent segment is a straight segment, and
   • the last segment is not followed by any straight segment in the
     tree.
Together with all its descendants, an axis constitutes a branch. A
branch is itself an axial (sub)tree.
    Axes and branches are ordered. The axis originating at the root of
the entire plant has order zero. An axis originating as a lateral segment
of an n-order parent axis has order n+1. The order of a branch is equal
to the order of its lowest-order or main axis.
22                     Chapter 1. Graphical modeling using L-systems




                     Figure 1.20: An axial tree




Figure 1.21: Sample tree generated using a method based on Horton–
Strahler analysis of branching patterns
1.6. Branching structures                                                23




Figure 1.22: A tree production p and its application to the edge S in a tree
T1

Axial trees are purely topological objects. The geometric connotation
of such terms as straight segment, lateral segment and axis should be
viewed at this point as an intuitive link between the graph-theoretic
formalism and real plant structures.
    The proposed scheme for ordering branches in axial trees was in-
troduced originally by Gravelius [53]. MacDonald [94, pages 110–121]
surveys this and other methods applicable to biological and geograph-
ical data such as stream networks. Of special interest are methods
proposed by Horton [70, 71] and Strahler, which served as a basis for
synthesizing botanical trees [37, 152] (Figure 1.21).

1.6.2     Tree OL-systems
In order to model development of branching structures, a rewriting
mechanism can be used that operates directly on axial trees. A rewrit-
ing rule, or tree production, replaces a predecessor edge by a successor
axial tree in such a way that the starting node of the predecessor is
identiﬁed with the successor’s base and the ending node is identiﬁed
with the successor’s top (Figure 1.22).
    A tree OL-system G is speciﬁed by three components: a set of edge
labels V , an initial tree ω with labels from V , and a set of tree produc-
tions P . Given the L-system G, an axial tree T2 is directly derived from
a tree T1 , noted T1 ⇒ T2 , if T2 is obtained from T1 by simultaneously
replacing each edge in T1 by its successor according to the production
set P . A tree T is generated by G in a derivation of length n if there
exists a sequence of trees T0 , T1 , . . . , Tn such that T0 = ω, Tn = T and
T0 ⇒ T1 ⇒ . . . ⇒ Tn .
                24                         Chapter 1. Graphical modeling using L-systems




                        Figure 1.23: Bracketed string representation of an axial tree



                1.6.3     Bracketed OL-systems
                The deﬁnition of tree L-systems does not specify the data structure for
                representing axial trees. One possibility is to use a list representation
                with a tree topology. Alternatively, axial trees can be represented using
                strings with brackets [82]. A similar distinction can be observed in Koch
                constructions, which can be implemented either by rewriting edges and
                polygons or their string representations. An extension of turtle in-
                terpretation to strings with brackets and the operation of bracketed
                L-systems [109, 111] are described below.
                    Two new symbols are introduced to delimit a branch. They are
                interpreted by the turtle as follows:

Stack            [      Push the current state of the turtle onto a pushdown
operations              stack. The information saved on the stack contains the
                        turtle’s position and orientation, and possibly other at-
                        tributes such as the color and width of lines being drawn.
                 ]      Pop a state from the stack and make it the current state
                        of the turtle. No line is drawn, although in general the
                        position of the turtle changes.

                    An example of an axial tree and its string representation are shown
                in Figure 1.23.
2D structures       Derivations in bracketed OL-systems proceed as in OL-systems with-
                out brackets. The brackets replace themselves. Examples of two-
                dimensional branching structures generated by bracketed OL-systems
                are shown in Figure 1.24.
Bush-like           Figure 1.25 is an example of a three-dimensional bush-like structure
structure       generated by a bracketed L-system. Production p1 creates three new
                branches from an apex of the old branch. A branch consists of an
                edge F forming the initial internode, a leaf L and an apex A (which
                will subsequently create three new branches). Productions p2 and p3
1.6. Branching structures                                              25




 a                       b                      c
             ◦                     ◦            n=4,δ=22.5◦
 n=5,δ=25.7              n=5,δ=20               F
 F                       F                      F→FF-[-F+F+F]+
 F →F[+F]F[-F]F          F →F[+F]F[-F][F]          [+F-F-F]




 d                       e                      f
 n=7,δ=20◦               n=7,δ=25.7◦            n=5,δ=22.5◦
 X                       X                      X
 X →F[+X]F[-X]+X         X →F[+X][-X]FX         X→F-[[X]+X]+F[+FX]-X
 F →FF                   F →FF                  F→FF
Figure 1.24: Examples of plant-like structures generated by bracketed OL-
systems. L-systems (a), (b) and (c) are edge-rewriting, while (d), (e) and
(f) are node-rewriting.
              26                         Chapter 1. Graphical modeling using L-systems




                     n=7, δ=22.5◦

                     ω    :   A
                     p1   :   A   →   [&FL!A]/////’[&FL!A]///////’[&FL!A]
                     p2   :   F   →   S ///// F
                     p3   :   S   →   F L
                     p4   :   L   →   [’’’∧∧{-f+f+f-|-f+f+f}]


                          Figure 1.25: A three-dimensional bush-like structure

              specify internode growth. In subsequent derivation steps the internode
              gets longer and acquires new leaves. This violates a biological rule
              of subapical growth (discussed in detail in Chapter 3), but produces
              an acceptable visual eﬀect in a still picture. Production p4 speciﬁes
              the leaf as a ﬁlled polygon with six edges. Its boundary is formed
              from the edges f enclosed between the braces { and } (see Chapter 5
              for further discussion). The symbols ! and  are used to decrement
              the diameter of segments and increment the current index to the color
              table, respectively.
Plant             Another example of a three-dimensional plant is shown in Fig-
with ﬂowers   ure 1.26. The L-system can be described and analyzed in a way similar
              to the previous one.
1.6. Branching structures                                         27




 n=5, δ=18◦

 ω :      plant
 p1 :     plant → internode + [ plant + ﬂower] − − //
                        [ − − leaf ] internode [ + + leaf ] −
                        [ plant ﬂower ] + + plant ﬂower
 p2   :   internode → F seg [// & & leaf ] [// ∧ ∧ leaf ] F seg
 p3   :   seg → seg F seg
 p4   :   leaf → [’ { +f−ﬀ−f+ | +f−ﬀ−f } ]
 p5   :   ﬂower → [ & & & pedicel ‘ / wedge //// wedge ////
                        wedge //// wedge //// wedge ]
 p6 :     pedicel → FF
 p7 :     wedge → [‘ ∧ F ] [ { & & & & −f+f | −f+f } ]
               Figure 1.26: A plant generated by an L-system
              28                             Chapter 1. Graphical modeling using L-systems

              1.7      Stochastic L-systems
              All plants generated by the same deterministic L-system are identical.
              An attempt to combine them in the same picture would produce a
              striking, artiﬁcial regularity. In order to prevent this eﬀect, it is nec-
              essary to introduce specimen-to-specimen variations that will preserve
              the general aspects of a plant but will modify its details.
                  Variation can be achieved by randomizing the turtle interpretation,
              the L-system, or both. Randomization of the interpretation alone has
              a limited eﬀect. While the geometric aspects of a plant — such as
              the stem lengths and branching angles — are modiﬁed, the underly-
              ing topology remains unchanged. In contrast, stochastic application
              of productions may aﬀect both the topology and the geometry of the
              plant. The following deﬁnition is similar to that of Yokomori [162] and
              Eichhorst and Savitch [35].
L-system          A stochastic OL-system is an ordered quadruplet Gπ = V, ω, P, π.
              The alphabet V , the axiom ω and the set of productions P are deﬁned
              as in an OL-system (page 4). Function π : P → (0, 1], called the
              probability distribution, maps the set of productions into the set of
              production probabilities. It is assumed that for any letter a ∈ V , the
              sum of probabilities of all productions with the predecessor a is equal
              to 1.
Derivation        We will call the derivation µ ⇒ ν a stochastic derivation in Gπ if for
              each occurrence of the letter a in the word µ the probability of applying
              production p with the predecessor a is equal to π(p). Thus, diﬀerent
              productions with the same predecessor can be applied to various occur-
              rences of the same letter in one derivation step.
Example           A simple example of a stochastic L-system is given below.


                                    ω    :    F
                                                .33
                                    p1   :    F → F [+F ]F [−F ]F
                                                .33
                                    p2   :    F → F [+F ]F
                                                .34
                                    p3   :    F → F [−F ]F


              The production probabilities are listed above the derivation symbol
              →. Each production can be selected with approximately the same
              probability of 1/3. Examples of branching structures generated by this
              L-system with derivations of length 5 are shown in Figure 1.27. Note
              that these structures look like diﬀerent specimens of the same (albeit
              ﬁctitious) plant species.
Flower ﬁeld       A more complex example is shown in Figure 1.28. The ﬁeld consists
              of four rows and four columns of plants. All plants are generated by a
              stochastic modiﬁcation of the L-system used to generate Figure 1.26.
1.7. Stochastic L-systems                                    29




              Figure 1.27: Stochastic branching structures




                        Figure 1.28: Flower ﬁeld
             30                          Chapter 1. Graphical modeling using L-systems

             The essence of this modiﬁcation is to replace the original production
             p3 by the following three productions:

                                   .33
                      p3 :    seg → seg [ // & & leaf ] [// ∧∧ leaf ] F seg
                                   .33
                      p3 :   seg → seg F seg
                                   .34
                      p
                        3 :    seg → seg

             Thus, in any step of the derivation, the stem segment seg may either
             grow and produce new leaves (production p3 ), grow without producing
             new leaves (production p3 ), or not grow at all (production p
                                                                            3 ). All three
             events occur with approximately the same probability. The resulting
             ﬁeld appears to consist of various specimens of the same plant species.
             If the same L-system was used again (with diﬀerent seed values for the
             random number generator), a variation of this image would be obtained.




             1.8      Context-sensitive L-systems
Context in   Productions in OL-systems are context-free; i.e. applicable regardless
string       of the context in which the predecessor appears. However, production
L-systems    application may also depend on the predecessor’s context. This eﬀect is
             useful in simulating interactions between plant parts, due for example to
             the ﬂow of nutrients or hormones. Various context-sensitive extensions
             of L-systems have been proposed and studied thoroughly in the past
             [62, 90, 128]. 2L-systems use productions of the form al < a > ar → χ,
             where the letter a (called the strict predecessor) can produce word χ if
             and only if a is preceded by letter al and followed by ar . Thus, letters
             al and ar form the left and the right context of a in this production.
             Productions in 1L-systems have one-sided context only; consequently,
             they are either of the form al < a → χ or a > ar → χ. OL-systems,
             1L-systems and 2L-systems belong to a wider class of IL-systems, also
             called (k,l)-systems. In a (k,l)-system, the left context is a word of
             length k and the right context is a word of length l.
                 In order to keep speciﬁcations of L-systems short, the usual notion
             of IL-systems has been modiﬁed here by allowing productions with
             diﬀerent context lengths to coexist within a single system. Further-
             more, context-sensitive productions are assumed to have precedence
             over context-free productions with the same strict predecessor. Conse-
             quently, if a context-free and a context-sensitive production both apply
             to a given letter, the context-sensitive one should be selected. If no pro-
             duction applies, this letter is replaced by itself as previously assumed
             for OL-systems.
1.8. Context-sensitive L-systems                                        31




Figure 1.29: The predecessor of a context-sensitive tree production (a)
matches edge S in a tree T (b)

The following sample 1L-system makes use of context to simulate signal        Signal
propagation throughout a string of symbols:                                   propagation
                            ω : baaaaaaaa
                            p1 : b < a → b
                            p2 :     b →a
The ﬁrst few words generated by this L-system are given below:
                               baaaaaaaa
                               abaaaaaaa
                               aabaaaaaa
                               aaabaaaaa
                               aaaabaaaa
                               ···
The letter b moves from the left side to the right side of the string.
    A context-sensitive extension of tree L-systems requires neighbor         Context in tree
edges of the replaced edge to be tested for context matching. A prede-        L-systems
cessor of a context-sensitive production p consists of three components:
a path l forming the left context, an edge S called the strict predecessor,
and an axial tree r constituting the right context (Figure 1.29). The
asymmetry between the left context and the right context reﬂects the
fact that there is only one path from the root of a tree to a given edge,
while there can be many paths from this edge to various terminal nodes.
Production p matches a given occurrence of the edge S in a tree T if l
is a path in T terminating at the starting node of S, and r is a subtree
             32                        Chapter 1. Graphical modeling using L-systems

             of T originating at the ending node of S. The production can then be
             applied by replacing S with the axial tree speciﬁed as the production
             successor.
Context in       The introduction of context to bracketed L-systems is more diﬃcult
bracketed    than in L-systems without brackets, because the bracketed string repre-
L-systems    sentation of axial trees does not preserve segment neighborhood. Conse-
             quently, the context matching procedure may need to skip over symbols
             representing branches or branch portions. For example, Figure 1.29 in-
             dicates that a production with the predecessor BC < S > G[H]M can
             be applied to symbol S in the string

                                ABC[DE][SG[HI[JK]L]M N O],


             which involves skipping over symbols [DE] in the search for left context,
             and I[JK]L in the search for right context.
                Within the formalism of bracketed L-systems, the left context can
             be used to simulate control signals that propagate acropetally, i.e., from
             the root or basal leaves towards the apices of the modeled plant, while
             the right context represents signals that propagate basipetally, i.e., from
             the apices towards the root. For example, the following 1L-system
             simulates propagation of an acropetal signal in a branching structure
             that does not grow:

                                 #ignore : +−

                                 ω : Fb [+Fa ]Fa [−Fa ]Fa [+Fa ]Fa
                                 p1 : Fb < Fa → Fb


             Symbol Fb represents a segment already reached by the signal, while
             Fa represents a segment that has not yet been reached. The #ignore
             statement indicates that the geometric symbols + and − should be
             considered as non-existent while context matching. Images representing
             consecutive stages of signal propagation (corresponding to consecutive
             words generated by the L-system under consideration) are shown in
             Figure 1.30a.
                 The propagation of a basipetal signal can be simulated in a similar
             way (Figure 1.30b):

                                 #ignore : +−

                                 ω : Fa [+Fa ]Fa [−Fa ]Fa [+Fa ]Fb
                                 p1 : Fa > Fb → Fb
1.8. Context-sensitive L-systems                                         33




Figure 1.30: Signal propagation in a branching structure: (a) acropetal, (b)
basipetal

The operation of context-sensitive L-systems is examined further using         L-systems of
examples obtained by Hogeweg and Hesper [64]. In 1974, they pub-               Hogeweg,
lished the results of an exhaustive study of 3,584 patterns generated          Hesper and
by a class of bracketed 2L-systems deﬁned over the alphabet {0,1}.             Smith
Some of these patterns had plant-like shapes. Subsequently, Smith
signiﬁcantly improved the quality of the generated images using state-
of-the-art computer imagery techniques [136, 137]. Sample structures
generated by L-systems similar to those proposed by Hogeweg and Hes-
per are shown in Figure 1.31. The diﬀerences are related to the geo-
metric interpretation of the resulting strings. According to the original
interpretation, consecutive branches are issued alternately to the left
and right, whereas turtle interpretation requires explicit speciﬁcation
of branching angles within the L-system.
34                       Chapter 1. Graphical modeling using L-systems




Figure 1.31: Examples of branching structures generated using L-systems
based on the results of Hogeweg and Hesper [64]
1.8. Context-sensitive L-systems                                                35

 a n=30,δ=22.5◦                           b n=30,δ=22.5◦
     #ignore:       +-F                         #ignore:       +-F
     F1F1F1                                     F1F1F1
     0 < 0 >    0    →    0                     0 < 0 >    0   →     1
     0 < 0 >    1    →    1[+F1F1]              0 < 0 >    1   →     1[-F1F1]
     0 < 1 >    0    →    1                     0 < 1 >    0   →     1
     0 < 1 >    1    →    1                     0 < 1 >    1   →     1
     1 < 0 >    0    →    0                     1 < 0 >    0   →     0
     1 < 0 >    1    →    1F1                   1 < 0 >    1   →     1F1
     1 < 1 >    0    →    0                     1 < 1 >    0   →     1
     1 < 1 >    1    →    0                     1 < 1 >    1   →     0
     * < + >    *    →    -                     * < + >    *   →     -
     * < - >    *    →    +                     * < - >    *   →     +

 c n=26, δ=25.75◦                         d n=24, δ=25.75◦
     #ignore:       +-F                         #ignore:       +-F
     F1F1F1                                     F0F1F1
     0 < 0 >    0   →     0                     0 < 0 >    0   →     1
     0 < 0 >    1   →     1                     0 < 0 >    1   →     0
     0 < 1 >    0   →     0                     0 < 1 >    0   →     0
     0 < 1 >    1   →     1[+F1F1]              0 < 1 >    1   →     1F1
     1 < 0 >    0   →     0                     1 < 0 >    0   →     1
     1 < 0 >    1   →     1F1                   1 < 0 >    1   →     1[+F1F1]
     1 < 1 >    0   →     0                     1 < 1 >    0   →     1
     1 < 1 >    1   →     0                     1 < 1 >    1   →     0
     * < - >    *   →     +                     * < + >    *   →     -
     * < + >    *   →     -                     * < - >    *   →     +


                      e n=26, δ=22.5◦
                           #ignore:       +-F
                           F1F1F1
                           0 < 0 >    0   →     0
                           0 < 0 >    1   →     1[-F1F1]
                           0 < 1 >    0   →     1
                           0 < 1 >    1   →     1
                           1 < 0 >    0   →     0
                           1 < 0 >    1   →     1F1
                           1 < 1 >    0   →     1
                           1 < 1 >    1   →     0
                           * < + >    *   →     -
                           * < - >    *   →     +



     Figure 1.31 (continued): L-systems of Hogeweg and Hesper
              36                                  Chapter 1. Graphical modeling using L-systems

              1.9         Growth functions
Exponential   During the synthesis of a plant model it is often convenient to dis-
growth        tinguish productions that specify the branching pattern from those
              that describe elongation of plant segments. This separation can be
              observed in some of the L-systems considered so far. For example, in
              L-systems (d), (e) and (f) from Figure 1.24 the ﬁrst productions cap-
              ture the branching patterns, while the remaining productions, equal in
              all cases to F → F F , describe elongation of segments represented by
              sequences of symbols F . The number of letters F in a string χn orig-
              inating from a single letter F is doubled in each derivation step, thus
              the elongation is exponential, with length(χn ) = 2n .
Basic              A function that describes the number of symbols in a word in terms
properties    of its derivation length is called a growth function. The theory of L-
              systems contains an extensive body of results on growth functions [62,
              127]. The central observation is that the growth functions of DOL-
              systems are independent of the letter ordering in the productions and
              derived words. Consequently, the relation between the number of letter
              occurrences in a pair of words µ and ν, such that µ ⇒ ν, can be
              conveniently expressed using matrix notation.
                   Let G = V, ω, P  be a DOL-system and assume that letters of
              the alphabet V have been ordered, V = {a1 , a2 , . . . , am }. Construct a
              square matrix Qm×m , where entry qij is equal to the number of occur-
              rences of letter aj in the successor of the production with predecessor
              ai . Let aki denote the number of occurrences of letter ai in the word
              x generated by G in a derivation of length k. The deﬁnition of direct
              derivation in a DOL-system implies that
                                                                     
                                               q11 q12 · · · q1m
                                            q21 q22 · · · q2m                                      
                                                                     
                   ak1 ak2 · · · akm           ..                     = ak+1
                                                                           1          ak+1
                                                                                       2   · · · ak+1       .
                                                .                                               m

                                               qm1 qm2 · · · qmm

              This matrix notation is useful in the analysis of growth functions. For
              example, consider the following L-system:

                                                        ω : a
                                                        p1 : a → ab                                (1.2)
                                                        p2 : b → a

              The relationship between the number of occurrences of letters a and b
              in two consecutively derived words is
                                                      1 1                      
                                           ak b k       1 0   =       ak+1 bk+1
1.9. Growth functions                                                          37

or
                        ak+1 = ak + bk = ak + ak−1
for k = 1, 2, 3, . . . . From the axiom it follows that a0 = 1 and
a1 = b0 = 0. Thus, the number of letters a in the strings gener-
ated by the L-system speciﬁed in equation (1.2) grows according to the
Fibonacci series: 1, 1, 2, 3, 5, 8, . . . . This growth function was imple-
mented by productions p2 and p3 in the L-system generating the bush
in Figure 1.25 (page 26) to describe the elongation of its internodes.
    Polynomial growth functions of arbitrary degree can be obtained                 Polynomial
using L-systems of the following form:                                              growth
                                 ω    :   a0
                                 p1   :    a0   → a0 a1
                                 p2   :    a1   → a1 a2
                                 p3   :    a2   → a2 a3
                                 p4   :    a3   → a3 a4
                                          ..
                                           .
The matrix Q is given below:
                                                                
                                      1   1     0     0    ···
                             
                                     0   1     1     0    ···   
                                                                 
                           Q=
                             
                             
                                      0   0     1     1    ···   
                                                                 
                                                                 
                                     0   0     0     1    ···   
                                                ..
                                                 .

Thus, for any i, k ≥ 1, the number aki of occurrences of symbol ai in
the string generated in a derivation of length k satisﬁes the equality

                                 aki + aki+1 = ak+1
                                                i+1 .

Taking into consideration the axiom, the distribution of letters ai as
a function of the derivation length is captured by the following table
(only non-zero terms are shown):

                 k   ak0   ak1     ak2    ak3        ak4   ak5   ak6     ak7

                 0    1
                 1    1     1
                 2    1     2       1
                 3    1     3       3      1
                 4    1     4       6      4          1
                 5    1     5      10     10          5     1
                 6    1     6      15     20         15     6        1
                 7    1     7      21     35         35    21        7    1
                                           ..
                                            .
                   38                           Chapter 1. Graphical modeling using L-systems

                   This table represents the Pascal triangle, thus for any k ≥ i ≥ 1 its
                   terms satisfy the following equality:

                                               k         k(k − 1) · · · (k − i + 1)
                                      aki =          =
                                               i                1 · 2···i
                   Consequently, the number of occurrences of letter ai as a function of
                   the derivation length k is expressed by a polynomial of degree i. By
                   identifying letter ai with the turtle symbol F , it is possible to model in-
                   ternode elongation expressed by polynomials of arbitrary degree i ≥ 0.
                   This observation was generalized by Szilard [140], who developed an al-
                   gorithm for constructing a DOL-system with growth functions speciﬁed
                   by any positive, nondecreasing polynomials with integer coeﬃcients [62,
                   page 276].
Characterization       The examples of growth functions considered so far include expo-
                   nential and polynomial functions. Rozenberg and Salomaa [127, pages
                   30–38] show that, in general, the growth function fG (n) of any DOL-
                   system G = V, ω, P  is a combination of polynomial and exponential
                   functions:
                                                    s
                                        fG (n) =         Pi (n)ρni for n ≥ n0 ,                  (1.3)
                                                   i=1


                   where Pi (n) denotes a polynomial with integer coeﬃcients, ρi is a non-
                   negative integer, and n0 is the total number of letters in the alphabet
                   V . Unfortunately, many growth processes observed in nature cannot be
                   described by equation (1.3). Two approaches are then possible within
                   the framework of the theory of L-systems.
Sigmoidal              The ﬁrst is to extend the size n0 of the alphabet V , so that the
growth             growth process of interest will be captured by the initial derivation
                   steps, ω = µ0 ⇒ µ1 ⇒ · · · ⇒ µn0 , before equation (1.3) starts to apply.
                   For example, the L-system
                                          ω : a0
                                          pi : ai → ai+1 b0 for i < k                            (1.4)
                                          pk+j : bj → bj+1 F for j < l
                   over the alphabet V = {a0 , a1 , ..., ak } ∪ {b0 , b1 , ..., bl } ∪ {F } can be used
                   to approximate a sigmoidal elongation of a segment represented by a
                   sequence of symbols F (Figure 1.32). The term sigmoidal refers to a
                   function with a plot in the shape of the letter S. Such functions are
                   commonly found in biological processes [143], with the initial part of
                   the curve representing the growth of a young organism, and the latter
                   part corresponding to the organism close to its ﬁnal size.
                       The second approach to the synthesis of growth functions out-
Square-root        side the class captured by equation (1.3) is to use context-sensitive
growth             L-systems. For example, √ the following 2L-system has a growth func-
                   tion given by fG (n) =   n + 4, where x is the ﬂoor function.
1.9. Growth functions                                                 39




Figure 1.32: A sigmoidal growth function implemented using the L-system
in equation (1.4), for k = l = 20


                    ω    :   XFu Fa X
                    p1   :   Fu < Fa > Fa   →   Fu
                    p2   :   Fu < Fa > X    →   Fd Fa
                    p3   :   Fa < Fa > Fd   →   Fd                  (1.5)
                    p4   :   X < Fa > Fd    →   Fu
                    p5   :        Fu        →   Fa
                    p6   :        Fd        →   Fa
    The operation of this L-system is illustrated in Figure 1.33. Produc-
tions p1 and p3 , together with p5 and p6 , propagate symbols Fu and Fd
up and down the string of symbols µ. Productions p2 and p4 change the
propagation direction, after symbol X marking a string end has been
reached by Fu or Fd , respectively. In addition, p2 extends the string
with a symbol Fa . Thus, the number of derivation steps increases by
two between consecutive applications of production p2 . As a result,
string extension occurs at derivation steps n expressed√by the square
of the string length, which yields the growth function      n + 4.
    In practice it is often diﬃcult, if not impossible, to ﬁnd L-systems    Limitations
with the required growth functions. Vitányi [153] illustrates this by
referring to sigmoidal curves:
         If we want to obtain sigmoidal growth curves with the
     original L-systems then not even the introduction of cell
     interaction can help us out. In the ﬁrst place, we end up
     constructing quite unlikely ﬂows of messages through the
     organism, which are more suitable to electronic computers,
     and in fact give the organism universal computing power.
     Secondly, and this is more fundamental, we can not obtain
             40                        Chapter 1. Graphical modeling using L-systems




             Figure 1.33: Square-root growth implemented using the L-system speciﬁed
             in equation (1.5)

                   growth which, always increasing the size of the organism,
                   tends towards stability in the limit. The slowest increasing
                   growth we can obtain by allowing cell interaction is loga-
                   rithmic and thus can not at all account for the asymptotic
                   behavior of sigmoidal growth functions.
             In the next section we present an extension of L-systems that makes
             it possible to avoid this problem by allowing for explicit inclusion of
             growth functions into L-system speciﬁcations.


             1.10       Parametric L-systems
Motivation   Although L-systems with turtle interpretation make it possible to gen-
             erate a variety of interesting objects, from abstract fractals to plant-like
             branching structures, their modeling power is quite limited. A major
             problem can be traced to the reduction of all lines to integer multi-
             ples of the unit segment. As a result, even such a simple ﬁgure as an
  @ √        isosceles right-angled triangle cannot be traced exactly, since the ratio
   @ 2                       √ length to the length of a side is expressed by the irra-
             of its hypotenuse
1   @        tional number 2. Rational approximation of line length provides only
      @
      @      a limited solution, because the unit step must be the smallest common
     1       denominator of all line lengths in the modeled structure. Consequently,
             the representation of a simple plant module, such as an internode, may
             require a large number of symbols. The same argument applies to an-
             gles. Problems become even more pronounced while simulating changes
             to the modeled structure over time, since some growth functions can-
             not be expressed conveniently using L-systems. Generally, it is diﬃcult
1.10. Parametric L-systems                                                  41

to capture continuous phenomena, since the obvious technique of dis-
cretizing continuous values may require a large number of quantization
levels, yielding L-systems with hundreds of symbols and productions.
Consequently, model speciﬁcation becomes diﬃcult, and the mathe-
matical beauty of L-systems is lost.
    In order to solve similar problems, Lindenmayer proposed that nu-
merical parameters be associated with L-system symbols [83]. He illus-
trated this idea by referring to the continuous development of branching
structures and diﬀusion of chemical compounds in a nonbranching ﬁl-
ament of Anabaena catenula. Both problems were revisited in later
papers [25, 77]. A deﬁnition of parametric L-systems was formulated
by Prusinkiewicz and Hanan [113] and is presented below.

1.10.1      Parametric OL-systems
Parametric L-systems operate on parametric words, which are strings               Parametric
of modules consisting of letters with associated parameters. The let-             words
ters belong to an alphabet V , and the parameters belong to the set
of real numbers . A module with letter A ∈ V and parameters
a1 , a2 , ..., an ∈  is denoted by A(a1 , a2 , ..., an ). Every module belongs
to the set M = V × ∗ , where ∗ is the set of all ﬁnite sequences of pa-
rameters. The set of all strings of modules and the set of all nonempty
strings are denoted by M ∗ = (V × ∗ )∗ and M + = (V × ∗ )+ , respec-
tively.
     The real-valued actual parameters appearing in the words corre-              Expressions
spond with formal parameters used in the speciﬁcation of L-system
productions. If Σ is a set of formal parameters, then C(Σ) denotes a
logical expression with parameters from Σ, and E(Σ) is an arithmetic
expression with parameters from the same set. Both types of expres-
sions consist of formal parameters and numeric constants, combined
using the arithmetic operators +, −, ∗, /; the exponentiation operator
∧, the relational operators <, >, =; the logical operators !, &, | (not,
and, or); and parentheses (). Standard rules for constructing syntac-
tically correct expressions and for operator precedence are observed.
Relational and logical expressions evaluate to zero for false and one for
true. A logical statement speciﬁed as the empty string is assumed to
have value one. The sets of all correctly constructed logical and arith-
metic expressions with parameters from Σ are noted C(Σ) and E(Σ).
     A parametric OL-system is deﬁned as an ordered quadruplet G =                Parametric
V, Σ, ω, P , where                                                              OL-system
   • V is the alphabet of the system,
   • Σ is the set of formal parameters,
   • ω ∈ (V × ∗ )+ is a nonempty parametric word called the axiom,
   • P ⊂ (V × Σ∗ ) × C(Σ) × (V × E(Σ))∗ is a ﬁnite set of productions.
             42                           Chapter 1. Graphical modeling using L-systems

             The symbols : and → are used to separate the three components of a
             production: the predecessor, the condition and the successor. For exam-
             ple, a production with predecessor A(t), condition t > 5 and successor
             B(t + 1)CD(t ∧ 0.5, t − 2) is written as
                             A(t) : t > 5 → B(t + 1)CD(t ∧ 0.5, t − 2).           (1.6)
Derivation      A production matches a module in a parametric word if the following
             conditions are met:

                  • the letter in the module and the letter in the production prede-
                    cessor are the same,
                  • the number of actual parameters in the module is equal to the
                    number of formal parameters in the production predecessor, and
                  • the condition evaluates to true if the actual parameter values are
                    substituted for the formal parameters in the production.

             A matching production can be applied to the module, creating a string
             of modules speciﬁed by the production successor. The actual parame-
             ter values are substituted for the formal parameters according to their
             position. For example, production (1.6) above matches a module A(9),
             since the letter A in the module is the same as in the production pre-
             decessor, there is one actual parameter in the module A(9) and one
             formal parameter in the predecessor A(t), and the logical expression
             t > 5 is true for t = 9. The result of the application of this production
             is a parametric word B(10)CD(3, 7).
                  If a module a produces a parametric word χ as the result of a
             production application in an L-system G, we write a →        χ. Given a
             parametric word µ = a1 a2 ...am , we say that the word ν = χ1 χ2 ...χm
             is directly derived from (or generated by) µ and write µ =⇒ ν if and
             only if ai → χi for all i = 1, 2, ..., m. A parametric word ν is generated
             by G in a derivation of length n if there exists a sequence of words
             µ0 , µ1 , ..., µn such that µ0 = ω, µn = ν and µ0 =⇒ µ1 =⇒ ... =⇒ µn .
Example           An example of a parametric L-system is given below.

                            ω    :   B(2)A(4, 4)
                            p1   :   A(x, y) : y <= 3   →   A(x ∗ 2, x + y)
                            p2   :   A(x, y) : y > 3    →   B(x)A(x/y, 0)         (1.7)
                            p3   :   B(x)    :x<1       →   C
                            p4   :   B(x)    : x >= 1   →   B(x − 1)


             As in the case of non-parametric L-systems, it is assumed that a module
             replaces itself if no matching production is found in the set P . The
             words obtained in the ﬁrst few derivation steps are shown in Figure 1.34.
1.10. Parametric L-systems                                            43




Figure 1.34: The initial sequence of strings generated by the parametric
L-system speciﬁed in equation (1.7)

1.10.2     Parametric 2L-systems
Productions in parametric OL-systems are context-free, i.e., applicable
regardless of the context in which the predecessor appears. A context-
sensitive extension is necessary to model information exchange between
neighboring modules. In the parametric case, each component of the
production predecessor (the left context, the strict predecessor and the
right context) is a parametric word with letters from the alphabet V
and formal parameters from the set Σ. Any formal parameters may
appear in the condition and the production successor.
    A sample context-sensitive production is given below:                   Example
 A(x) < B(y) > C(z) : x + y + z > 10 → E((x + y)/2)F ((y + z)/2)
It can be applied to the module B(5) that appears in a parametric word
                         · · · A(4)B(5)C(6) · · ·                   (1.8)
since the sequence of letters A, B, C in the production and in parametric
word (1.8) are the same, the numbers of formal parameters and actual
parameters coincide, and the condition 4 + 5 + 6 > 10 is true. As a
result of the production application, the module B(5) will be replaced
by a pair of modules E(4.5)F (5.5). Naturally, the modules A(4) and
C(6) will be replaced by other productions in the same derivation step.
    Parametric 2L-systems provide a convenient tool for expressing de-      Anabaena with
velopmental models that involve diﬀusion of substances throughout an        heterocysts
organism. A good example is provided by an extended model of the
pattern of cells observed in Anabaena catenula and other blue-green
bacteria [99]. This model was proposed by de Koster and Linden-
mayer [25].
44                             Chapter 1. Graphical modeling using L-systems


 #define CH 900           /*   high concentration */
 #define CT 0.4           /*   concentration threshold */
 #define ST 3.9           /*   segment size threshold */
 #include H               /*   heterocyst shape specification */
 #ignore f ∼ H

 ω :      -(90)F(0,0,CH)F(4,1,CH)F(0,0,CH)
 p1 :     F(s,t,c) : t=1 & s>=6 →
                              F(s/3*2,2,c)f(1)F(s/3,1,c)
 p2 :     F(s,t,c) : t=2 & s>=6 →
                              F(s/3,2,c)f(1)F(s/3*2,1,c)
 p3 :     F(h,i,k) < F(s,t,c) > F(o,p,r) : s>ST|c>CT →
                              F(s+.1,t,c+0.25*(k+r-3*c))
 p4 :     F(h,i,k) < F(s,t,c) > F(o,p,r) : !(s>ST|c>CT) →
                              F(0,0,CH) ∼ H(1)
 p5 :     H(s) : s<3 → H(s*1.1)
                         L-system 1.1: Anabaena catenula

Generally, the bacteria under consideration form a nonbranching ﬁla-
ment consisting of two classes of cells: vegetative cells and heterocysts.
Usually, the vegetative cells divide and produce two daughter vegeta-
tive cells. This mechanism is captured by the L-system speciﬁed in
equation (1.1) and Figure 1.4 (page 5). However, in some cases the
vegetative cells diﬀerentiate into heterocysts. Their distribution forms
a well-deﬁned pattern, characterized by a relatively constant number
of vegetative cells separating consecutive heterocysts. How does the
organism maintain constant spacing of heterocysts while growing? The
model explains this phenomenon using a biologically well-motivated
hypothesis that heterocyst distribution is regulated by nitrogen com-
pounds produced by the heterocysts, transported from cell to cell across
the ﬁlament, and decayed in the vegetative cells. If the compound’s
concentration in a young vegetative cell falls below a speciﬁc level, this
cell diﬀerentiates into a heterocyst (L-system 1.1).
    The #deﬁne statements assign values to numerical constants used
in the L-system. The #include statement speciﬁes the shape of a het-
erocyst (a disk) by referring to a library of predeﬁned shapes (see Sec-
tion 5.1). Cells are represented by modules F (s, t, c), where s stands
for cell length, t is cell type (0 - heterocyst, 1 and 2 - vegetative types1 ),
     1
    The model of Anabaena introduced in Section 1.2 distinguished between four
types of cells: ar , br , al and bl . Cells b do not divide and can be considered as young
forms of the corresponding cells a. Thus, the vegetative type 1 considered here
embraces cells ar and br , while type 2 embraces al and bl . The formal relationship
between the four-cell and two-cell models is further discussed in Chapter 6.
1.10. Parametric L-systems                                            45




Figure 1.35: Development of Anabaena catenula with heterocysts, simulated
using parametric L-system 1.1

and c represents the concentration of nitrogen compounds. Productions
p1 and p2 describe division of the vegetative cells. They each create two
daughter cells of unequal length. The diﬀerence between cells of type
1 and 2 lies in the ordering of the long and short daughter cells. Pro-
duction p3 captures the processes of transportation and decay of the
nitrogen compounds. Their concentration c is related to the concen-
tration in the neighboring cells k and r, and changes in each derivation
step according to the formula
                      c = c + 0.25(k + r − 3 ∗ c).
Production p4 describes diﬀerentiation of a vegetative cell into a hete-
rocyst. The condition speciﬁes that this process occurs when the cell
length does not exceed the threshold value ST = 3.9 (which means
that the cell is young enough), and the concentration of the nitrogen
compounds falls below the threshold value CT = 0.4. Production p5
describes the subsequent growth of the heterocyst.
   Snapshots of the developmental sequence of Anabaena are given
in Figure 1.35. The vegetative cells are shown as rectangles, colored
according to the concentration of the nitrogen compounds (white means
low concentration). The heterocysts are represented as red disks. The
values of parameters CH, CT and ST were selected to provide the
               46                          Chapter 1. Graphical modeling using L-systems

               correct distribution of the heterocysts, and correspond closely to the
               values reported in [25]. The mathematical model made it possible to
               estimate these parameters, although they are not directly observable.

               1.10.3     Turtle interpretation of parametric words
               If one or more parameters are associated with a symbol interpreted by
               the turtle, the value of the ﬁrst parameter controls the turtle’s state.
               If the symbol is not followed by any parameter, default values speciﬁed
               outside the L-system are used as in the non-parametric case. The basic
               set of symbols aﬀected by the introduction of parameters is listed below.

               F (a)    Move forward a step of length a > 0. The position of the
                        turtle changes to (x , y  , z  ), where x = x + aH x , y  = y + aH y
                        and z  = z + aH z . A line segment is drawn between points
                        (x, y, z) and (x , y  , z  ).
               f (a)    Move forward a step of length a without drawing a line.
               +(a)     Rotate around U by an angle of a degrees. If a is positive, the
                        turtle is turned to the left and if a is negative, the turn is to
                        the right.
               &(a)     Rotate around L by an angle of a degrees. If a is positive,
                        the turtle is pitched down and if a is negative, the turtle is
                        pitched up.
               /(a)     Rotate around H by an angle of a degrees. If a is positive, the
                        turtle is rolled to the right and if a is negative, it is rolled to
                        the left.
               It should be noted that symbols +, &, ∧, and / are used both as
               letters of the alphabet V and as operators in logical and arithmetic
               expressions. Their meaning depends on the context.
Row of trees       The following examples illustrate the operation of parametric L-
               systems with turtle interpretation. The ﬁrst L-system is a coding of
               a Koch construction generating a variant of the snowﬂake curve (Fig-
               ure 1.1 on page 2). The initiator (production predecessor) is the hy-
               potenuse AB of a right triangle ABC (Figure 1.36). The ﬁrst and the
               fourth edge of the generator subdivide AB into segments AD and DB,
               while the remaining two edges traverse the altitude CD in opposite di-
               rections. From elementary geometry it follows that the lengths of these
               segments satisfy the equations
                                                              √
                                   q =c−p       and      h = pq.
               The edges of the generator can be associated with four triangles that
               are similar to ABC and tile it without gaps. According to the relation-
               ship between curve construction by edge rewriting and planar tilings
1.10. Parametric L-systems                                             47




Figure 1.36: Construction of the generator for a “row of trees.” The edges
are associated with triangles indicated by ticks.

(Section 1.4.1), the generated curve will approximately ﬁll the triangle
ABC. The corresponding L-system is given below:
      #deﬁne     c   1
      #deﬁne     p   0.3
      #deﬁne     q   c−p
      #deﬁne     h   (p ∗ q) ∧ 0.5

      ω : F (1)
      p1 : F (x) → F (x ∗ p) + F (x ∗ h) − −F (x ∗ h) + F (x ∗ q)

    The resulting curve is shown in Figure 1.37a. In order to better
visualize its structure, the angle increment has been set to 86◦ instead
of 90◦ . The curve ﬁlls diﬀerent areas with unequal density. This results
from the fact that all edges, whether long or short, are replaced by
the generator in every derivation step. A modiﬁed curve that ﬁlls the
underlying triangle in a more uniform way is shown in Figure 1.37b. It
was obtained by delaying the rewriting of shorter segments with respect
to the longer ones, as speciﬁed by the following L-system.
          ω : F (1, 0)
          p1 : F (x, t) : t = 0 → F (x ∗ p, 2) + F (x ∗ h, 1)−
                                  −F (x ∗ h, 1) + F (x ∗ q, 0)
          p2 : F (x, t) : t > 0 → F (x, t − 1)

    The next example makes use of node rewriting (Section 1.4.2). The        Branching
construction recursively subdivides a rectangular tile ABCD into two         structure
tiles, AEF D and BCF E, similar to ABCD (Figure 1.38). The lengths
of the edges form the proportion
                                     a    b
                                       = 1 ,
                                     b   2
                                           a
48                        Chapter 1. Graphical modeling using L-systems




Figure 1.37: Two curves suggesting a “row of trees.” Curve (b) is from [95,
page 57].

                          √
which implies that b = a/ 2. Each tile is associated with a single-point
frame lying in the tile center. The tiles are connected by a branching
line speciﬁed by the following L-system:
                #deﬁne R 1.456
                ω : A(1)                                             (1.9)
                p1 : A(s) → F (s)[+A(s/R)][−A(s/R)]
The
√ ratio of branch sizes R slightly exceeds the theoretical value of
  2. As a result, the branching structure shown in Figure 1.39 is self-
avoiding. The angle increment was set arbitrarily to δ = 85◦ .
    The L-system in equation (1.9) operates by appending segments
of decreasing length to the structures obtained in previous derivation
steps. Once a segment has been incorporated, its length does not
change. A structure with identical proportions can be obtained by
1.10. Parametric L-systems                                                49




   Figure 1.38: Tiling associated with a space-ﬁlling branching pattern




Figure 1.39: A branching pattern generated by the L-system speciﬁed in
equation (1.9)
50                        Chapter 1. Graphical modeling using L-systems




Figure 1.40: Initial sequences of ﬁgures generated by the L-systems speciﬁed
in equations (1.9) and (1.10)

appending segments of constant length and increasing the lengths of
previously created segments by constant R in each derivation step. The
corresponding L-system is given below.
                      ω : A
                      p1 : A     → F (1)[+A][−A]                     (1.10)
                      p2 : F (s) → F (s ∗ R)
    The initial sequence of structures obtained by both L-systems are
compared in Figure 1.40. Sequence (a) emphasizes the fractal character
of the resulting structure. Sequence (b) suggests the growth of a tree.
The next two chapters show that this is not a mere coincidence, and
the L-system speciﬁed in equation (1.10) is a simple, but in principle
correct, developmental model of a sympodial branching pattern found
in many herbaceous plants and trees.
Chapter 2

Modeling of trees

Computer simulation of branching patterns has a relatively long history.    Cellular–space
The ﬁrst model was proposed by Ulam [149], (see also [138, pages 127–       models
131]), and employed the concept of cellular automata that had been
developed earlier by von Neumann and Ulam [156]. The branching
pattern is created iteratively, starting with a single colored cell in a
triangular grid, then coloring cells that touch one and only one vertex
of a cell colored in the previous iteration step.
    This basic idea gave rise to several extensions. Meinhardt [97, Chap-
ter 15] substituted the triangular grid with a square one, and used the
resulting cellular space to examine biological hypotheses related to the
formation of net-like structures. In addition to pure branching patterns,
his models capture the eﬀect of branch reconnection or anastomosis that
may take place between the veins of a leaf. Greene [54] extended cellu-
lar automata to three dimensions, and applied the resulting voxel space
automata to simulate growth processes that react to the environment.
For instance, Figure 2.1 presents the growth of a vine over a house.
Cohen [15] simulated the development of a branching pattern using ex-
pansion rules that operate in a continuous “density ﬁeld” rather than
a discrete cellular or voxel space.
    The common feature of these approaches is the emphasis on inter-
actions between various elements of a growing structure, as well as the
structure and the environment. Although interactions clearly inﬂuence
the development of real plants, they also add to the complexity of the
models. This may explain why simpler models, ignoring even such fun-
damental factors as collisions between branches, have been prevalent to
date. The ﬁrst model in that category was proposed by Honda [65] who        Honda’s model
studied the form of trees using the following assumptions (Figure 2.2).

   • Tree segments are straight and their girth is not considered.
   • A mother segment produces two daughter segments through one
     branching process.
52                                                           Modeling of trees




                  Figure 2.1: Organic architecture by Greene [54]

         • The lengths of the two daughter segments are shortened by con-
           stant ratios, r1 and r2 , with respect to the mother segment.
         • The mother segment and its two daughter segments are contained
           in the same branch plane. The daughter segments form constant
           branching angles, a1 and a2 , with respect to the mother branch.
         • The branch plane is ﬁxed with respect to the direction of gravity
           so as to be closest to a horizontal plane.1 An exception is made
           for branches attached to the main trunk. In this case, a constant
           divergence angle α between consecutively issued lateral segments
           is maintained (cf. Chapter 4).

    By changing numerical parameters, Honda obtained a wide vari-
ety of tree-like shapes. With some improvements [38], his model was
applied to investigate branching patterns of real trees [39, 66, 67, 68].
Subsequently, diﬀerent rules for branching angles were proposed to cap-
ture the structure of trees in which planes of successive bifurcations are
perpendicular to each other [69]. The results of Honda served as a basis
for the tree models proposed by Aono and Kunii [2]. They suggested
     1
    More formally, the line perpendicular to the mother segment and lying in the
branch plane is horizontal.
Modeling of trees                                                       53




    Figure 2.2: Speciﬁcation of tree geometry according to Honda [65]

several extensions to his model, the most important of which was the
biasing of branch positions in a particular direction, applied to produce
the eﬀects of wind, phototropism and gravity. A similar concept was
introduced previously by Cohen [15], while more accurate physically-
based methods for branch bending were developed by de Reﬀye [28]
and Armstrong [4].
    The models of Honda and Aono and Kunii were rendered using               Realism
straight lines of constant or varying width to represent “tree skele-
tons.” A substantial improvement in the realism of synthetic images
was achieved by Bloomenthal [11] and Oppenheimer [105], who intro-
duced curved branches, carefully modeled surfaces around branching
points, and textured bark and leaves (Figure 2.3).
    The approaches stemming from the work of Honda deﬁned branching          Stochastic
structures using deterministic algorithms. In contrast, stochastic mech-     models
anisms are essential to the group of tree models proposed by Reeves and
Blau [119], de Reﬀye et al. [30], and Remphrey, Neal and Steeves [120].
Although these models were described using diﬀerent terminologies,
they share the basic paradigm of specifying tree structures in terms of
probabilities with which branches are formed. The work of Reeves and
Blau aimed at producing tree-like shapes without delving into biological
details of the modeled structures (Figure 2.4). In contrast, de Reﬀye
et al. [29] used a stochastic approach to simulate the development of        Approach of
real plants by modeling the activity of buds at discrete time intervals.     de Reﬀye
Given a clock signal, a bud can either:
   • do nothing,
   • become a ﬂower,
   • become an internode terminated by a new straight apex and one
     or more lateral apices subtended by leaves, or
   • die and disappear.
54                                                 Modeling of trees




         Figure 2.3: Acer graphics by Bloomenthal [11]




     Figure 2.4: A forest scene by Reeves [119] 1984
                                                c     Pixar
Modeling of trees                                                     55




 Figure 2.5: Oil palm tree canopy from CIRAD Modelisation Laboratory

These events occur according to stochastic laws characteristic for each
variety and each species. The geometric parameters, such as the length
and diameter of an internode, as well as branching angles, are also
calculated according to stochastic laws.
    The basic types of developmental rules incorporated into this method
correspond to the 23 diﬀerent types of tree architectures identiﬁed by
Hallé, Oldeman and Tomlinson [58]. Detailed models of selected plant
species were developed and are described in the literature [16, 20, 26,
27, 76]. A sample tree model is shown in Figure 2.5. The approach of
Remphrey [120, 121, 122] is similar to that of de Reﬀye, except that
larger time steps are used (one year in the model of bearberry described
in [120]). Consequently, the stochastic rules must describe the entire
conﬁguration of lateral shoots that can be formed over a one-year pe-
riod.
    The application of L-systems to the generation of botanical trees was   Application of
ﬁrst considered by Aono and Kunii [2]. They referred to the original        L-systems
deﬁnition of L-systems [82] and found them unsuitable to model the
complex branching patterns of higher plants. However, their arguments
do not extend to parametric L-systems with turtle interpretation. For
example, the L-system in Figure 2.6 implements those tree models of
Honda [65] in which one of the branching angles is equal to 0, yielding
a monopodial structure with clearly delineated main and lateral axes
(see Section 3.2 for a formal characterization).
56                                                      Modeling of trees




 n = 10
 #define   r1   0.9     /*   contraction ratio for the trunk */
 #define   r2   0.6     /*   contraction ratio for branches */
 #define   a0   45      /*   branching angle from the trunk */
 #define   a2   45      /*   branching angle for lateral axes */
 #define   d    137.5   /*   divergence angle */
 #define   wr   0.707   /*   width decrease rate */

 ω : A(1,10)
 p1 : A(l,w) : * → !(w)F(l)[&(a0 )B(l*r2 ,w*wr )]/(d)A(l*r1 ,w*wr )
 p2 : B(l,w) : * → !(w)F(l)[-(a2 )$C(l*r2 ,w*wr )]C(l*r1 ,w*wr )
 p3 : C(l,w) : * → !(w)F(l)[+(a2 )$B(l*r2 ,w*wr )]B(l*r1 ,w*wr )

Figure 2.6: Examples of the monopodial tree-like structures of Honda [65],
generated using L-systems
Modeling of trees                                                         57

    According to production p1 , the apex of the main axis A produces          Monopodial
an internode F and a lateral apex B in each derivation step. Con-              branching
stants r1 and r2 specify contraction ratios for the straight and lateral
segments, a0 and a2 are branching angles and d is the divergence angle.
Module !(w) sets the line width to w, thus production p1 decreases             Branch width
the width of the daughter segments with respect to the mother seg-
ment by the factor wr = 0.707. This constant satisﬁes a postulate by
Leonardo da Vinci [95, page 156], according to which “all the branches
of a tree at every stage of its height when put together are equal in
thickness to the trunk below them.” In the case where a mother branch
of diameter w1 gives rise to two daughter branches of equal diameter
                           the equation w12 = 2w22 , which gives a value for
w2 , this postulate yields √
wr equal to w2 /w1 = 1/ 2 ≈ 0.707. A general discussion of the rela-
tionships between the diameters of the mother and daughter branches
is included in the book by Macdonald [94, pages 131–135].
    Productions p2 and p3 describe subsequent development of the lat-
eral branches. In each derivation step, the straight apex (either B or C)
issues a lateral apex of the next order at angle a2 or −a2 with respect
to the mother axis. Two productions are employed to create lateral
apices alternately to the left and right. The symbol $ rolls the turtle        Keeping
around its own axis so that vector L pointing to the left of the turtle       turtle’s
(Section 1.5) is brought to a horizontal position. Consequently, the           orientation
branch plane is “closest to a horizontal plane,” as required by Honda’s
model. From a technical point of view, $ modiﬁes the turtle orientation
in space according to the formulae
                             
                     = V ×H
                    L                    and        × L,
                                                 =H
                                                U      
                              
                        |V × H|

where vectors H , L and U are the heading, left and up vectors associated
with the turtle, V is the direction opposite to gravity, and |A| denotes
the length of vector A. The tree-like structures shown in Figure 2.6
were generated using the values of constants listed in Table 2.1, and
coincide with the structures presented by Honda.


                        Figure      r1     r2   a0 a2
                          a        0.9    0.6   45 45
                          b        0.9    0.9   45 45
                           c       0.9    0.8   45 45
                          d        0.9    0.7   30 -30

  Table 2.1: Constants for the monopodial tree structures in Figure 2.6
            58                                                          Modeling of trees

Sympodial       A slightly diﬀerent L-system, speciﬁed in Figure 2.7, captures sym-
branching   podial structures, where both daughter segments form non-zero angles
            with the mother segment. In this case the activity of the main apex is
            reduced to the formation of the trunk F and a pair of lateral apices B
            (production p1 ). The subsequent branching pattern is captured by pro-
            duction p2 . The sample structures in Figure 2.7 were obtained using the
            constants listed in Table 2.2, and correspond to the models presented
            by Aono and Kunii.
                The L-systems considered so far have been designed in a manner
            that emphasizes their relation to the models described in the litera-
            ture. Speciﬁcally, all segments are assigned their ﬁnal length at the
            time of creation, and no further elongation occurs. As pointed out in
            Section 1.10.3, similar structures can be obtained by creating new seg-
            ments of constant length and increasing the lengths of previously cre-
            ated segments by a constant factor in each derivation step. A sample
            L-system constructed according to this paradigm is given in Figure 2.8.
Ternary         The overall structure of the tree is deﬁned by production p1 . In
branching   each derivation step, apex A produces three new branches terminated
            by their own apices. Parameter w and constant vr relate the width of
            the mother branch w1 to that of the daughter branches w√      2 . According
                                          2       2
            to da Vinci’s postulate w1 = 3w2 , thus vr = w1 /w2 = 3 ≈ 1.732.
            Productions p2 and p3 capture the gradual elongation of branches and
            the increase in their diameter over time.
Tropism         The bending of branches is simulated by slightly rotating the tur-
            tle in the direction of a predeﬁned tropism vector T after drawing each
            segment (Figure 2.9). The orientation adjustment α is calculated us-
            ing the formula α = e |H × T |, where e is a parameter capturing axis
            susceptibility to bending. This heuristic formula has a physical moti-
            vation; if T is interpreted as a force applied to the endpoint of vector H ,
            and H can rotate around its starting point, the torque is equal to H ×T .
            The parameters relevant to the generation of the tree-like structures in
            Figure 2.8 are listed in Table 2.3. A more realistic rendering of the tree
            in Figure 2.8d is presented in Figure 2.10.



                                    Figure     r1    r2 a1 a2
                                      a       0.9   0.7 5 65
                                      b       0.9   0.7 10 60
                                       c      0.9   0.8 20 50
                                      d       0.9   0.8 35 35



                 Table 2.2: Constants for the sympodial tree structures in Figure 2.7
Modeling of trees                                                  59




         n = 10
         #define    r1   0.9     /*   contraction ratio 1 */
         #define    r2   0.7     /*   contraction ratio 2 */
         #define    a1   10      /*   branching angle 1 */
         #define    a2   60      /*   branching angle 2 */
         #define    wr   0.707   /*   width decrease rate */

         ω :    A(1,10)
         p1 :   A(l,w) : * → !(w)F(l)[&(a1 )B(l*r1 ,w*wr )]
                             /(180)[&(a2 )B(l*r2 ,w*wr )]
         p2 :   B(l,w) : * → !(w)F(l)[+(a1 )$B(l*r1 ,w*wr )]
                             [-(a2 )$B(l*r2 ,w*wr )]

Figure 2.7: Examples of the sympodial tree-like structures of Aono and
Kunii [2], generated using L-systems
60                                                        Modeling of trees




       #define   d1 94.74            /*   divergence angle 1 */
       #define   d2 132.63           /*   divergence angle 2 */
       #define   a 18.95             /*   branching angle */
       #define   lr 1.109            /*   elongation rate */
       #define   vr 1.732            /*   width increase rate */

       ω :    !(1)F(200)/(45)A
       p1 :   A : *    → !(vr )F(50)[&(a)F(50)A]/(d1 )
                           [&(a)F(50)A]/(d2 )[&(a)F(50)A]
       p2 :   F(l) : * → F(l*lr )
       p3 :   !(w) : * → !(w*vr )

     Figure 2.8: Examples of tree-like structures with ternary branching
Modeling of trees                                                        61




                                                    due to tropism T
   Figure 2.9: Correction α of segment orientation H


  Figure   d1     d2     a             lr         T          e          n
    a     94.74 132.63 18.95         1.109 0.00,-1.00,0.00 0.22          6
    b    137.50 137.50 18.95         1.109 0.00,-1.00,0.00 0.14          8
     c   112.50 157.50 22.50         1.790 -0.02,-1.00,0.00 0.27         8
    d    180.00 252.00 36.00         1.070 -0.61,0.77,-0.19 0.40         6

        Table 2.3: Constants for the tree structures in Figure 2.8




           Figure 2.10: Medicine Lake by Musgrave et al. [101]
              62                                                        Modeling of trees




                                 Figure 2.11: A surrealistic elevator

Conclusions   The examples given above demonstrate that the tree models of Honda,
              as well as their derivatives studied by Aono and Kunii, can be expressed
              using the formalism of L-systems. In a separate study, Shebell [130] also
              showed that L-systems can be applied to generate the architectural tree
              models of Hallé, Oldeman and Tomlinson [58]. These results indicate
              that L-systems may play an important role as a tool for biologically-
              correct simulation of tree development and synthesis of realistic tree
              images. However, the tree-like shapes created so far are rather generic
              (Figure 2.11), and models of particular tree species, directly based on
              biological data, are yet to be developed. L-systems have found more
              applications in the domain of realistic modeling of herbaceous plants,
              discussed in the next chapter.
Chapter 3

Developmental models of
herbaceous plants

The examples of trees presented in the previous chapter introduce L-
systems as a plant modeling tool. They also illustrate one of the most
striking features of the generative approach to modeling, called data
base ampliﬁcation [136]. This term refers to the generation of complex-
looking objects from very concise descriptions – in our case, L-systems
comprised of small numbers of productions. Yet in spite of the small
size, the speciﬁcation of L-systems is not a trivial task.
    In the case of highly self-similar structures, the synthesis methods
based on edge rewriting and node rewriting are of assistance, as illus-
trated by the examples considered in Section 1.10.3. However, a more
general approach is needed to model the large variety of developmental
patterns and structures found in nature.
    The methodology presented in this chapter is based on the simu-        Developmental
lation of the development of real plants. Thus, a particular form is       models
modeled by capturing the essence of the developmental process that
leads to this form. This approach has two distinctive features.

   • Emphasis on the space-time relation between plant parts.
     In many plants, organs in various stages of development can be
     observed at the same time. For example, some ﬂowers may still
     be in the bud stage, others may be fully developed, and still
     others may have been transformed into fruits. If development
     is simulated down to the level of individual organs, such phase
     eﬀects are reproduced in a natural way.
   • Inherent capability of growth simulation. The mathemati-
     cal model can be used to generate biologically correct images of
     plants at diﬀerent ages and to create sequences of images illus-
     trating plant development in time.
               64                                            Chapter 3. Developmental models

                   The models are constructed under the assumption that organisms
               control the important aspects of their own development. According
               to Apter [3, page 44], this simpliﬁcation must be accepted as a nec-
               essary evil, as long as the scope of the mathematical model is limited
               to an isolated plant. Consequently, this chapter focuses on the mod-
Herbaceous     eling and generation of growth sequences of herbaceous or non-woody
plants         plants, since internal control mechanisms play a predominant role in
               their development. In contrast, the form of woody plants is determined
               to a large extent by the environment, competition among branches and
               trees, and accidents [164].


               3.1       Levels of model speciﬁcation
               L-systems can be constructed with a variety of objectives in mind, rang-
               ing from a general classiﬁcation of branching structures to detailed mod-
               els suitable for image synthesis purposes. Accordingly, the L-systems
               presented in this chapter are speciﬁed at three levels of detail. The most
Partial        abstract level, called partial L-systems, employs the notation of nonde-
L-systems      terministic OL-systems to deﬁne the realm of possibilities within which
               structures of a given type may develop. Partial L-systems capture the
               main traits characterizing structural types, and provide a formal basis
               for their classiﬁcation. Control mechanisms that resolve nondetermin-
L-system       ism are introduced in the next level, termed L-system schemata.1 The
schemata       topology of individual plants and temporal aspects of their develop-
               ment are described at this level. Schemata are of particular interest
               from a biological point of view, as they provide an insight into the
               mechanisms that control plant development in nature. The geomet-
Complete       ric aspects are added in complete L-systems that include information
L-systems      concerning growth rates of internodes, the values of branching angles,
               and the appearance of organs. The diﬀerence between all three levels is
               illustrated using models of a single-ﬂower shoot as a running example.

               3.1.1      Partial L-systems
Single-ﬂower   Consider the development of a shoot which, after a period of vegetative
shoot          growth, produces a single ﬂower. The partial L-system is given below.
                                               ω    :   a
                                               p1   :   a → I[L]a
                                               p2   :   a → I[L]A                              (3.1)
                                               p3   :   A→K
               The lower-case symbol a represents the vegetative apex, while the upper-
               case A is the ﬂowering apex, capable of forming reproductive organs.
                    1
                   In the literature, the term “scheme” is also used to denote the class of L-systems
               with the same alphabet and productions, but with diﬀerent axioms [62, page 54].
3.1. Levels of model speciﬁcation                                   65




                       Figure 3.1: Single-ﬂower shoot

A derivation step corresponds to a plastochron, deﬁned as the time
interval between the production of successive internodes by the apex.
At each step apex a has a choice of forming either leaf L, internode I
and new apex a (production p1 ), or forming the same structures and
transforming itself into a ﬂowering apex A (p2 ), which subsequently
creates ﬂower K (p3 ). Once this transformation or developmental switch
has taken place it cannot be reversed, since there is no rule allowing
the transformation of A to a. Examples of strings generated by the
L-system speciﬁed in equation (3.1) are given below.

               a            a               a
               I[L]A        I[L]a           I[L]a
               I[L]K        I[L]I[L]A       I[L]I[L]a
               I[L]K        I[L]I[L]K       I[L]I[L]I[L]A
                            I[L]I[L]K       I[L]I[L]I[L]K
                                            I[L]I[L]I[L]K

A diagrammatic representation of a single-ﬂower inﬂorescence is shown
in Figure 3.1.

3.1.2     Control mechanisms in plants
A partial L-system does not specify the moments in which develop-         L-system
mental switches occur. The timing of these switches is speciﬁed at the    schemata
level of L-system schemata, which incorporate mechanisms that con-
trol plant development. In biology, these mechanisms are divided into
two classes depending on the way information is transferred between       Lineage vs.
modules. The term lineage (or cellular descent) refers to the transfer    interaction
of information from an ancestor cell or module to its descendants. In
contrast, interaction is the mechanism of information exchange between
neighboring cells (for example, in the form of nutrients or hormones).
Within the formalism of L-systems, lineage mechanisms are represented
            66                                         Chapter 3. Developmental models

            by context-free productions found in OL-systems, while the simulation
            of interaction requires the use of context-sensitive 1L-systems and 2L-
            systems.2 Several speciﬁc mechanisms are listed below. Although they
            are described from the modeling perspective, a relation to physiological
            processes observed in nature can often be found.

            Stochastic mechanism
            The simplest method for implementing a developmental switch is to
            use a stochastic L-system. In this case the vegetative apex a has a
            probability π1 of staying in the vegetative state, and π2 of transforming
            itself into a ﬂowering apex A.
                                          ω    :   a
                                                     π
                                          p1   :   a →1 I[L]a
                                                     π
                                          p2   :   a →2 I[L]A
                                                      1
                                          p3   :   A→K

            The probability distribution (π1 , π2 ) is found experimentally, with π1 +
            π2 = 1.

            The eﬀect of environment
            Many plants change from a vegetative to a ﬂowering state in response
            to environmental factors such as temperature or the number of day-
            light hours. Such eﬀects can be modeled using one set of productions
Table       (called a table) for some number of derivation steps, then replacing it
L-systems   by another set:
                                Table 1                       Table 2
                            ω : a                        p1 : a → I[L]A
                            p1 : a → I[L]a               p2 : A → K

            The concept of table L-systems (TOL-systems) was introduced and
            formalized by Rozenberg [62, 127]. Note that the use of tables provides
            only a partial solution to the problem of specifying the switching time,
            since a control mechanism external to the L-system is needed to select
            the appropriate table.

            Delay mechanism
            The delay mechanism operates under the assumption that the apex
            undergoes a series of state changes that postpone the switch until a
            particular state is reached.
                 2
                The clarity of this dichotomy is somewhat obscured by parametric OL-systems,
            which can simulate the operation of context-sensitive L-systems using an inﬁnite
            set of parameter values.
3.1. Levels of model speciﬁcation                                    67

This is captured by the following L-system in the case of a single-ﬂower
shoot.
                ω    : a0
                pi : ai → I[L]ai+1 0 ≤ i ≤ n − 1
                pn : an → I[L]A
                pn+1 : A → K
According to this model, the apex counts the leaves it produces. While
it may seem strange that a plant would count, it is known that some
plant species produce a ﬁxed number of leaves before they start ﬂow-
ering.

Accumulation of components
A developmental mechanism based on the accumulation of components
is similar to that of delay, but emphasizes the physiological nature of
the counting process. According to this approach, counting is achieved
by a monotonic increase or decrease in the concentration of certain cell
components. This process can be captured by the following parametric
L-system:
                 ω    :   a(0)
                 p1   :   a(c) : c < C → I[L]a(c + ∆c)
                                                                   (3.2)
                 p2   :   a(c) : c ≥ C → I[L]A
                 p3   :   A    : ∗     →K
The parameter c indicates current concentration of the controlling com-
ponents in the apex a. In each derivation step, this concentration is
increased by a constant ∆c. The developmental switch occurs when
the concentration reaches the threshold value C.

Development controlled by a signal
In many plants, the switch from a vegetative to a ﬂowering state is
caused by a ﬂower-inducing signal transported from the basal leaves
towards the apex. The time of signal initiation is determined using
one of the previously described methods, for example by counting. A
sample L-system is given below.

                ω     : D(1)a(1)
                p1    :        a(i) :   i < m → a(i + 1)
                p2    :        a(i) :   i = m → I[L]a(1)
                p3    :        D(i) :   i < d → D(i + 1)
                p4    :        D(i) :   i = d → S(1)
                p5    :        S(i) :   i < u → S(i + 1)
                p6    :        S(i) :   i=u →ε
                p7    : S(i) < I    :   i = u → IS(1)
                p8    : S(i) < a(j) :   ∗     → I[L]A
                p9    :        A :      ∗     →K
         68                                     Chapter 3. Developmental models

         The apex a produces internodes I and leaves L on the main axis (p2 ).
         The time between the production of two consecutive segments, or the
         plastochron of the main axis, is equal to m derivation steps (p1 ). After
         a delay of d steps (p3 ), a signal S is sent from the plant base towards
         the apices (p4 ). This signal is transported along the main axis with
         a delay of u steps per internode I (p5 ,p7 ). Production p6 removes the
         signal from a node after it has been transported along the structure
         (ε stands for the empty string). When the signal reaches the apex, a is
         transformed into ﬂowering state A (p8 ) which yields ﬂower K (p9 ). Note
         that the signal has to propagate faster than one node per plastochron
         (u < m), otherwise it would not be able to catch up with the apex. The
         above processes are illustrated by the following developmental sequence,
         for d = 4, m = 2 and u = 1.

                                  D(1)a(1)
                                  D(2)a(2)
                                  D(3)I[L]a(1)
                                  D(4)I[L]a(2)
                                  S(1)I[L]I[L]a(1)
                                  IS(1)[L]I[L]a(2)
                                  I[L]IS(1)[L]I[L]a(1)
                                  I[L]I[L]IS(1)[L]a(2)
                                  I[L]I[L]I[L]A
                                  I[L]I[L]I[L]K

         Although the above model may appear unnecessarily complicated, sig-
         nals are indispensable in the simulation of complex ﬂowering sequences
         discussed later.

         3.1.3     Complete models
         The L-systems considered so far are not directly suitable for image syn-
         thesis purposes. To this end, they must be completed with geometric
         information. The relation between an L-system scheme and a corre-
         sponding complete L-system is discussed using the model of crocuses
         shown in Figure 3.2 as an example.
Crocus       The development is controlled using a delay expressed as an accu-
         mulation mechanism (equation (3.2)). In contrast to L-system schemes
         in which symbols represent module types, the L-system in Figure 3.2
         is speciﬁed in terms of turtle symbols. Production p1 describes the cre-
         ation of successive internodes F and leaves L by the vegetative apex a.
         The leaves branch from the stem at an angle of 30◦ and spiral around
         the main axis with a divergence angle equal to 137.5◦ (see Chapter 4).
         Productions p2 and p3 describe the developmental switch and the cre-
         ation of ﬂower K taking place respectively in steps Ta and Ta+1 . Pro-
         ductions p4 and p5 capture the development of leaves and ﬂowers until
         they reach their ﬁnal shapes TL and TK steps after creation. For each
3.1. Levels of model speciﬁcation                                  69




  #define Ta 7            /* developmental switch time */
  #define TL 9            /* leaf growth limit */
  #define TK 5            /* flower growth limit */
  #include L(0),L(1),...,L(TL ) /* leaf shapes */
  #include K(0),K(1),...,K(TK ) /* flower shapes */

  ω    :   a(1)
  p1   :   a(t)   :   t<Ta   →    F(1)[&(30)∼L(0)]/(137.5)a(t+1)
  p2   :   a(t)   :   t=Ta   →    F(20)A
  p3   :   A      :   *      →    ∼K(0)
  p4   :   L(t)   :   t<TL   →    L(t+1)
  p5   :   K(t)   :   t<TK   →    K(t+1)
  p6   :   F(l)   :   l<2    →    F(l+0.2)

                             Figure 3.2: Crocuses
             70                                    Chapter 3. Developmental models


                                             branch
                              main apex                  main apex
                              terminates                 continues
                           all        some           all          some
                         lateral     lateral       lateral       lateral
                         apices       apices       apices        apices
                       terminate continue        terminate      continue
                        terminal sympodial monopodial polypodial

                     Table 3.1: Basic growth patterns of branching structures

             value of parameter t, the corresponding organ shapes L(t) and K(t) are
             modeled using bicubic patches incorporated into the plant structure as
             described in Section 5.1. Production p6 speciﬁes the gradual elongation
             of internodes.


             3.2     Branching patterns
Subapical    The partial L-system in equation (3.1) and the related schemata employ
growth       subapical growth mechanisms in which new branches are created exclu-
             sively by apices. All herbaceous plants develop this way. The archi-
             tecture of a branching structure is to a large extent determined by the
             relationships between terminal and continuing apices. While a contin-
             uing apex produces branches again and again, a terminal one either
             gives rise to an appendage such as a ﬂower or dies. The possible com-
             binations are listed in Table 3.1. Of the four terms assigned to these
             possibilities, two are commonly used in biology, namely, sympodial and
             monopodial, while the other two terms are introduced here to denote
             the remaining cases, usually not characterized in the literature.
Expression       The above branching patterns can be represented conveniently using
using        partial bracketed L-systems. Let A, B, C denote continuing apices, X
L-systems    a terminal apex, and I an internode. The terminal and sympodial
             patterns are characterized by rules of the form
                                       A → I[B]n [X]m X,
             with n = 0, m > 0 in the case of terminal patterns and n > 0, m ≥ 0
             in the case of sympodial patterns. The important property is that the
             main apex terminates its development in all these cases.
                 Monopodial and polypodial patterns have rules of the form
                                       A → I[B]n [X]m C,
             with n = 0, m > 0 in the case of monopodial patterns and n > 0,
             m ≥ 0 in the case of polypodial ones. In these cases, it is important
             that the apex remains active.
3.3. Models of inﬂorescences                                           71

   The terms deﬁned here apply to branching structures in general,
whether they only produce vegetative organs (branches and leaves) or
reproductive organs as well. In the latter case, the terminal organs
develop from ﬂower buds to ﬂowers to fruits but do not give rise to
vegetative structures (there are exceptions to this statement but they
can be neglected here).



3.3      Models of inﬂorescences
The following discussion focuses on the modeling of compound ﬂowering
structures or inﬂorescences. In some cases an entire shoot system can
be considered an inﬂorescence, in others only some of the branches
bear ﬂowers and are inﬂorescences. Inﬂorescence architecture is an
elaboration of branching structures in general.
    In the domain of botanical applications of L-systems, the study          Classiﬁcation
of inﬂorescences has played a particularly visible role [44, 45, 46, 47,
77, 86]. Unfortunately, the terms used for the various inﬂorescence
types are not uniform in the literature. Besides a purely morphological
terminology, attempts have been made to construct a “typological”
terminology, expressing the “essential” features of ﬂowering structures
[144, 145, 157, 158]. However, these terms are not generally accepted
[12]. A compromise has been proposed by D. and U. Müller-Doblies
[100], which serves as a basis for the classiﬁcation that guides this
presentation.


3.3.1     Monopodial inﬂorescences
Simple racemes (open)
Racemes are characteristically monopodial inﬂorescences; a shoot has
lateral apices with terminal structures and a main apex that continues
to development. A raceme is open if the main apex does not form a
ﬂower. The partial L-system for this widely occurring type of inﬂores-
cence is:

                          ω    :   a
                          p1   :   a → I[L]a
                          p2   :   a → I[L]A                         (3.3)
                          p3   :   A → I[K]A

   This system diﬀers from that modeling a shoot with a single ﬂower
(equation (3.1)) only in production p3 . Here it is designed to repeatedly
produce lateral ﬂowers (Figure 3.3), while in the previous system A
produces a single ﬂower.
72                                        Chapter 3. Developmental models




     a                             b




         Figure 3.3: Open racemes: (a) elongated form, (b) planar form




                         Figure 3.4: Lily-of-the-valley
3.3. Models of inﬂorescences                                         73

   The ﬂowering sequence in open racemes is always acropetal (from         Acropetal
base to top). This can be observed after substituting production p3 in     sequence
                                                   
the L-system in equation (3.3) with productions p3 and p4 , which use
indexed symbols Ki to denote subsequent stages of ﬂower development.
                     
                   p3 : A → I[IK0 ]A
                   p4 : Ki → Ki+1 ,               i≥0
    The indexed notation Ki → Ki+1 stands for a (potentially inﬁnite)
set of productions K0 → K1 , K1 → K2 , K2 → K3 ,.... The developmen-
tal sequence begins as follows:
                         A
                         I[IK0 ]A
                         I[IK1 ]I[IK0 ]A
                         I[IK2 ]I[IK1 ]I[IK0 ]A
                         I[IK3 ]I[IK2 ]I[IK1 ]I[IK0 ]A
                         ···
    At each developmental stage the inﬂorescence contains a sequence       Lily-of-the-
of ﬂowers of diﬀerent ages. The ﬂowers newly created by the apex are       valley
delayed in their development with respect to the older ones situated at
the stem base. Graphically, this eﬀect is illustrated by the model of
a lily-of-the-valley shown in Figure 3.4. The following quotation from
d’Arcy Thompson [143] applies:
     A ﬂowering spray of lily-of-the-valley exempliﬁes a growth-
     gradient, after a simple fashion of its own. Along the stalk
     the growth-rate falls away; the ﬂorets are of descending age,
     from ﬂower to bud; their graded diﬀerences of age lead to
     an exquisite gradation of size and form; the time-interval
     between one and another, or the “space-time relation” be-
     tween them all, gives a peculiar quality – we may call it
     phase-beauty – to the whole.
     Another example of “phase beauty” can be seen in the shoot of shep-   Capsella
herd’s purse (Capsella bursa-pastoris) shown in Figure 3.5. Productions
p1 , p2 and p3 describe the activities of the apex in the vegetative and
ﬂowering states, in accordance with the L-system in equation (3.3). The
developmental switch is implemented using a delay mechanism. Pro-
ductions p4 and p5 capture the linear elongation of internodes in time,
while p6 and p7 describe the gradual increase of the angle at which
the ﬂower stalks branch from the main stem. Productions p8 , p9 and
p11 specify the shapes of leaves L, ﬂower petals K and fruits X using
developmental surface models discussed in Section 5.2. Production p10
controls the ﬂowering time. Symbol % in the successor of production
p11 simulates the fall of petals by cutting them oﬀ the structure at
the time of fruit formation. The default value of the angle increment
corresponding to the symbol + with no parameter is 18◦ .
74                                      Chapter 3. Developmental models




     ω    :   I(9)a(13)
     p1   :   a(t) : t>0 → [&(70)L]/(137.5)I(10)a(t-1)
     p2   :   a(t) : t=0 → [&(70)L]/(137.5)I(10)A
     p3   :   A    : *   → [&(18)u(4)FFI(10)I(5)X(5)KKKK]
                           /(137.5)I(8)A
     p4   :   I(t) : t>0 → FI(t-1)
     p5   :   I(t) : t=0 → F
     p6   :   u(t) : t>0 → &(9)u(t-1)
     p7   :   u(t) : t=0 → &(9)
     p8   :   L    : *   → [{.-FI(7)+FI(7)+FI(7)}]
                           [{.+FI(7)-FI(7)-FI(7)}]
     p9 :     K    : *   → [&{.+FI(2)--FI(2)}]
                           [&{.-FI(2)++FI(2)}]/(90)
     p10 :    X(t) : t>0 → X(t-1)
     p11 :    X(t) : t=0 → ∧(50)[[-GGGG++[GGG[++G{.].].].
                           ++GGGG.--GGG.--G.}]%

Figure 3.5: Development of Capsella bursa-pastoris. Every fourth derivation
step is shown.
3.3. Models of inﬂorescences                                       75




                         Figure 3.6: Apple twig

Simple raceme (closed)
The inﬂorescence of an apple tree (Figure 3.6) provides an example of
a closed raceme. In this case, the main apex eventually terminates its
development and produces a terminal ﬂower (Figure 3.7). The corre-
sponding partial L-system is given below.

                           ω    :   a
                           p1   :   a → I[L]a
                           p2   :   a → I[L]A
                           p3   :   A → I[K]A
                           p4   :   A→K

Developmental switches are associated with two symbols, a and A.
Thus, in order to obtain an L-system scheme it is necessary to specify
how both of these switches will be controlled.
   The ﬂowering sequence is usually acropetal but could also be basi-
petal, i.e., progressing downward after the formation of the terminal
ﬂower on the main axis. In the latter case a basipetal signal, as dis-
cussed in Section 1.8, can be applied to induce the transformation of
dormant ﬂower buds into ﬂowers.
                76                                         Chapter 3. Developmental models


                        a                       b




                     Figure 3.7: Closed racemes: (a) elongated form, (b) planar form

                Compound raceme (open dibotryoid)
                Racemes can also occur on complex branching structures. The sim-
                plest of these inﬂorescences is one with open racemes on the ﬁrst order
                branches as well as on the main axis (Figure 3.8a). This two-level com-
                pound structure (thus dibotryoid) is described by the following partial
                L-system.
                                           ω    :   a
                                           p1   :   a   → I[L]a
                                           p2   :   a   → I[L]A
                                           p3   :   A   → I[L][b]A
                                           p4   :   A   → I[L][b]B                     (3.4)
                                           p5   :   b   → I[L]b
                                           p6   :   b   → I[L]B
                                           p7   :   B   → I[K]B
                    Three developmental transformations are necessary: the ﬁrst for the
                change from leaf to branch creation along the main axis (production p2 ),
                the second for the switch from branching to lateral ﬂower creation on
                the main axis (p4 ), and the third for the transition from leaf to lateral
                ﬂower formation along the ﬁrst-order branches (p6 ). Each branch is
                subtended by a leaf, which is why productions p3 and p4 specify two
                appendages L and b. Branches with ﬂowers K need not have subtending
                leaves, which is reﬂected in production p7 .
Single-signal       Within each component raceme, the ﬂowering sequence is always
model           acropetal, but the timing of switches has a crucial impact on the over-
                all ﬂowering sequence and appearance of the plant. For example, let us
                assume that the switch from leaf to branch production is controlled by
                a delay, while the remaining two switches are caused by an acropetal
                ﬂower-inducing signal (representing the hormone ﬂorigen). Such a de-
                velopment is captured by L-system 3.1 (see below). Initially, the veg-
3.3. Models of inﬂorescences                                      77


 a                                            b




               Figure 3.8: Dibotryoids: (a) open, (b) closed



 #define   d   13           /*   delay for sending florigen */
 #define   e   3            /*   delay for creating branches */
 #define   m   2            /*   plastochron - main axis */
 #define   n   3            /*   plastochron - lateral axis */
 #define   u   1            /*   signal delay - main axis */
 #define   v   1            /*   signal delay - lateral axis */

 ω : S(0)a(1,0)
 p1 :           a(t,c) : t<m         →        a(t+1,c)
 p2 :           a(t,c) : (t=m)&(c<e) →        I(0,u)[L]a(1,c+1)
 p3 :           a(t,c) : (t=m)&(c=e) →        I(0,u)[L][b(1)]a(1,c)
 p4 :           b(t) : t<n           →        b(t+1)
 p5 :           b(t) : t=n           →        I(0,v)[L]b(1)
 p6 :           S(t) : *             →        S(t+1)
 p7 : S(t) < I(i,j) : t=d            →        I(1,j)
 p8 :           I(i,j) : (0<i)&(i<j) →        I(i+1,j)
 p9 : I(i,j) < I(k,l) : (i=j)&(k=0) →         I(1,l)
 p10 : I(i,j) < a(k,l) : i>0         →        I[L][b(1)]B
 p11 : I(i,j) < b(k) : i>0           →        I[L]B
 p12 :          B      :*            →        I[K]B



                    L-system 3.1: A model of dibotryoids
                 78                                      Chapter 3. Developmental models

                 etative apex a creates internodes I and leaves L with plastochron m
                 (productions p1 and p2 ). After the creation of e leaves a developmen-
                 tal switch occurs, and apex a starts creating branches with the same
                 plastochron (p3 ). The change of state is indicated by the value of the
                 second parameter in the module a(t, c), which is now equal to e. The
                 lateral apices b create internodes and leaves with plastochron n (p4 and
                 p5 ). After a delay of d steps from the beginning of the simulation (p6 ),
                 the ﬂowering signal is introduced to the basal internode (p7 ), as indi-
                 cated by a non-zero value of the ﬁrst parameter in the module I(i, j).
                 The signal is passed along an axis at the rate of j steps per internode
                 (p8 and p9 ), where j = u for the main axis and j = v for the lateral
                 axes. These rates are assigned to internodes by productions p2 , p3 and
                 p5 . When the signal reaches an apex (either a or b), the apex is trans-
                 formed into ﬂowering state B (p10 and p11 ). From then on, new ﬂowers
                 K are produced in each derivation step (p12 ).
Model analysis        In order to analyze the plant structure and ﬂowering sequence re-
                 sulting from the above development, let Tk denote the time at which
                 apex b of the k-th lateral axis is transformed into the ﬂowering state,
                 and lk denote the length of this axis (expressed as the number of in-
                 ternodes) at the transformation time. It is assumed here that the ﬁrst e
                 leaves count as lateral axes, thus k > e. Since it takes km time units to
                 produce k internodes along the main axis and lk n time units to produce
                 lk internodes on the lateral axis, we obtain:
                                               Tk = km + lk n
                 On the other hand, the transformation occurs when the signal reaches
                 the apex. The signal is sent d time units after the development starts.
                 It uses ku time units to travel through k zero-order internodes and lk v
                 time units to travel through lk ﬁrst-order internodes:
                                             Tk = d + ku + lk v
                 Solving the above system of equations for lk and Tk (and ignoring for
                 simplicity some inaccuracy due to the fact that this system does not
                 guarantee integer solutions), we obtain:
                                                  un − vm     n
                                         Tk = k           +d
                                                   n−v       n−v
                                                  m−u           d
                                          lk = −k         +
                                                   n−v       n−v
                  In order to analyze the above solutions, let us ﬁrst notice that the signal
                 transportation delay v must be less than the plastochron of the lateral
                 axes n, otherwise the signal would never reach the lateral apices. Under
                 this assumption, the sign of the expression ∆ = un−vm determines the
                 overall ﬂowering sequence, which is acropetal for ∆ > 0 (Figure 3.9)
                 and basipetal for ∆ < 0 (Figure 3.10). If ∆ = 0, all ﬂowering switches
3.3. Models of inﬂorescences                                         79




Figure 3.9: An acropetal ﬂowering sequence in an open dibotryoid: m = 2,
n = 3, u = v = 1, ∆ = 0.5; derivation lengths: 15−18−21−24−27−30−33

occur simultaneously. The sign of the expression m − u determines
whether the vegetative part of the shoot is more developed at the base
(m − u < 0) or near the top of the structure (m − u > 0). Figure 3.11
shows a model of a member of the mint family that exhibits a basipetal
ﬂowering sequence.

Compound racemes (closed dibotryoids)
This inﬂorescence type diﬀers from the previous one only in that each
branch, including the main axis, bears a terminal ﬂower (Figure 3.8b).
A partial L-system can be obtained from that of equation (3.4) by
adding one more production:

                               p8 : B → K
80                                      Chapter 3. Developmental models




Figure 3.10: A basipetal ﬂowering sequence in an open dibotryoid: m = 2,
n = 5, u = 1, v = 3, ∆ = −0.5; derivation lengths: 16 − 20 − 24 − 28 − 32 −
36 − 40
3.3. Models of inﬂorescences                                              81




                            Figure 3.11: A mint

Compound raceme (closed tribotryoid)
Racemic inﬂorescences can be compounded to a higher number of lev-
els. The following is a partial L-system for a closed tribotryoid inﬂo-
rescence, where closed racemes occur on second-order branches as well
as on the terminal portions of ﬁrst-order branches and of the main axis
(Figure 3.12). The developmental process involves six developmental
transformations.
           ω    :   a
                                                  p7    :   B→ I[L][c]B
           p1   :   a → I[L]a
                                                  p8    :   B→ I[L][c]C
           p2   :   a → I[L]A
                                                  p9    :   c → I[L]c
           p3   :   A→ I[L][b]A
                                                  p10   :   c → I[L]C
           p4   :   A→ I[L][b]B
                                                  p11   :   C→ I[K]C
           p5   :   b → I[L]b
                                                  p12   :   C→ K
           p6   :   b → I[L]B
82                                      Chapter 3. Developmental models




                     Figure 3.12: Closed tribotryoid

3.3.2    Sympodial inﬂorescences
Simple cymes (open)
In racemes, the apex of the main axis produces lateral branches and
continues to grow. In contrast, the apex of the main axis in cymes turns
into a ﬂower shortly after a few lateral branches have been initiated.
Their apices turn into ﬂowers as well, and second-order branches take
over. In time, branches of higher and higher order are produced. Thus,
the basic structure of a cymose inﬂorescence is captured by the partial
L-system:
                           ω    :   a
                           p1   :   a → I[L]a
                           p2   :   a → I[L]A                      (3.5)
                           p3   :   A→ I[A]K
As in the open raceme, there is a single symbol with alternative rules
which specify that the vegetative apex a may change into a ﬂower-
producing apex A. Any one of the previously discussed mechanisms
is available for timing this decision. Figure 3.13a shows an open cyme
with branches curving in a spiral fashion, while Figure 3.13b shows one
    3.3. Models of inﬂorescences                                               83


a                         b                         c




      Figure 3.13: Open cymes: (a) spiral form, (b) zig-zag form, (c) double

    with a zig-zag branching form.

    Double cymes (open)
    Frequently, not one but two lateral apices are produced under each
    terminal apex as in Figure 3.13c. In this case the partial L-system is:
                                 ω    :   a
                                 p1   :   a → I[L]a
                                 p2   :   a → I[L]A                      (3.6)
                                 p3   :   A→ I[A][A]K
        The two continuing lateral apices may develop at approximately
    equal rates (with the same plastochron) or with diﬀerent rates, giving
    rise to asymmetric inﬂorescences. For example, the following L-system
    scheme describes the development of rose campion (Lychnis coronaria)            Lychnis
    as analyzed by Robinson [126]:

                     ω    :   A7
                     p1   :   A7 → I[A0 ][A4 ]IK0
                     p2   :   Ai → Ai+1 ,               0≤i<7
                     p3   :   Ki → Ki+1 ,               i≥0

        Production p1 shows that at their creation time, the lateral apices
    have diﬀerent states A0 and A4 . Consequently, the ﬁrst apex requires
    eight derivation steps to produce a ﬂower and new branches, while the
    second requires only four steps. Each ﬂower undergoes a sequence of
    changes, progressing from the bud stage to an open ﬂower to a fruit.
    This developmental sequence is illustrated in Figure 3.14. According to
    production p1 , the lateral apices branch at an angle of 45◦ and lie in a
    plane perpendicular to that deﬁned by the mother axis and its sibling.
    Production p3 describes the linear elongation of internodes, while p4
84                                     Chapter 3. Developmental models




     #include L(0),L(1),...     /* leaf shapes */
     #include K(0),K(1),...     /* flower shapes */

     ω : A(7)
     p1 : A(t) : t=7 → FI(20)[&(60)∼L(0)]/(90)[&(45)A(0)]/(90)
                       [&(60)∼L(0)]/(90)[&(45)A(4)]FI(10)∼K(0)
     p2 : A(t) : t<7 → A(t+1)
     p3 : I(t) : t>0 → FFI(t-1)
     p4 : L(t) : * → L(t+1)
     p5 : K(t) : * → K(t+1)

              Figure 3.14: Development of Lychnis coronaria
3.3. Models of inﬂorescences                                              85

a                          b                            c




    Figure 3.15: Thyrsus: (a) spiral form, (b) zig-zag form, (c) double


and p5 capture the development of leaves and ﬂowers over time. It is
interesting to note that at diﬀerent developmental stages there are some
open ﬂowers that have a relatively uniform distribution over the entire
plant structure. This is advantageous to the plant since it increases the
time span over which seeds will be produced.


Cymes (closed)
Sympodial inﬂorescences that produce a terminal ﬂower at some point
during their development are called closed cymes. They result from the
addition of production
                             p4 : A → K
to the L-systems speciﬁed in (3.5) and (3.6), which deﬁne open single
and open double cymes.


Thyrsus (closed)
A thyrsus is an inﬂorescence with branches of cymes borne on a monopo-
dially branching axis. Thus, it represents a mixed sympodial and
monopodial organization. Depending on the orientation of the ﬂow-
ers, a distinction between a thyrsus with cymes in a spiral form and in
a zig-zag form can be made (Figure 3.15, a and b). Both of these types
are described by the following partial L-system:
86                                      Chapter 3. Developmental models



                          ω    :   a
                          p1   :   a → I[L]a
                          p2   :   a → I[L]A
                          p3   :   A→ I[L][B]A
                          p4   :   A→ K
                          p5   :   B→ I[B]K
                          p6   :   B→ K

In addition, a thyrsus may have double cymes (Figure 3.15c). In the
closed structure there are three developmental transformations. The
ﬁrst represents the change from vegetative to ﬂowering development on
the main axis (production p2 ). The second is necessary for the closure
of the main axis with a terminal ﬂower (p4 ). Both switches are related
to the monopodial development of the main axis. The third transfor-
mation is responsible for the formation of the ﬂowers that terminate
the development of the sympodial structures (p6 ).

3.3.3     Polypodial inﬂorescences
Panicle
The term polypodial is not used in the botanical literature but is coined
here to draw attention to the type of branching that represents con-
tinuing development of the main axis as well as of the lateral apices
of a branch. The corresponding inﬂorescence type is usually called a
panicle. The presence of two continuing apices at each new node is
expressed by the following production:

                               A → I[L][A]A

Since there can be nodes near the base of the plant that do not bear
branches, the usual initial rules are included to model the transition
from a purely vegetative to a ﬂowering state. The resulting partial
L-system is:

                          ω    :   a
                          p1   :   a → I[L]a
                          p2   :   a → I[L]A
                          p3   :   A→ I[L][A]A
                          p4   :   A→ K

   An example of a paniculate structure is shown in Figure 3.16. Note
the presence of higher order branching and the lack of terminal racemes.
Due to the repetitive application of production p3 at various levels of
branching, the resulting structure is highly self-similar. The model in-
cludes only two types of developmental transformations: the switch
3.3. Models of inﬂorescences                                        87




                  Figure 3.16: Panicle (elongated form)

from purely vegetative growth to the formation of the branching struc-
ture (production p2 ), and the creation of terminal ﬂowers (p4 ). The
timing of the last production determines the ﬂowering sequence of the
plant. Two possible control mechanisms will be examined in detail, us-
ing developmental models of the branching part of wall lettuce (Mycelis
muralis) as examples.
    The development of Mycelis is diﬃcult to model for two reasons.       Mycelis
First, the plant exhibits a basipetal ﬂowering sequence, which means
that ﬂowering starts at the top of the plant and proceeds downwards.
Secondly, at some developmental stages the plant has an acrotonic
structure, where the upper branches are more developed than the lower
ones. Both phenomena are in a sense counter-intuitive, since it would
seem that the older branches situated near the plant base should start
growing and producing ﬂowers before the younger ones at the plant
top. To explain these eﬀects, several models were proposed and for-
mally analyzed by Janssen and Lindenmayer [77]. Their model II is
restated here as parametric L-system 3.2.
    The axiom consists of three components. Modules F and A(0) rep-       Model II
resent the initial segment and the apex of the main axis. Module I(20)
is the source of a signal representing ﬂorigen. In nature, ﬂorigen is
sent towards the apex by leaves located at the plant base, which is not
included in this model.
    The developmental process consists of two phases that take place
along the main axis and are repeated recursively in branches of higher
orders. First, the main axis is formed in a process of subapical growth
88                                        Chapter 3. Developmental models


     #include O                 /* flower shape specification */
     #ignore / + ∼ O

     ω :     I(20)FA(0)
     p1 :       S < A(t)        :* →      T(0)∼O
     p2 :           A(t)        : t>0 →   A(t-1)
     p3 :           A(t)        : t=0 →   [+(30)G]F/(180)A(2)
     p4 :       S < F           :* →      FS
     p5 :           F > T(c)    :* →      T(c+1)FU(c-1)
     p6 :    U(c) < G           :* →      I(c)FA(2)
     p7 :           I(c)        : c>0 →   I(c-1)
     p8 :           I(c)        : c=0 →   S
     p9 :           S           :* →
     p10 :          T(c)        :* →
                  L-system 3.2: Mycelis muralis – Model II

speciﬁed by production p3 . The apex produces consecutive segments
F at the rate of one segment every three derivation steps (the delay is
controlled by production p2 ), and initiates branches G positioned at an
angle of 30◦ with respect to the main axis. The symbol G is interpreted
here in the same way as F . At this stage, the branches do not develop
further, which simulates the eﬀect of apical dominance or the inhibition
of branch development during the active production of new branches
by the apex.
    After a delay of 20 derivation steps, counted using production p7 ,
an acropetal ﬂower-inducing signal S is sent by production p8 . Produc-
tion p4 transports S across the segments at the rate of one internode
per step. Since new internodes are produced by the apex at a three
times slower rate, the signal eventually reaches the apex. At this point,
the second developmental phase begins. Production p1 transforms apex
A(t) into a bud O. Further branch production is stopped and a signal
T (c) is sent towards the base in order to enable the development of
lateral branches. Parameter c is incremented by production p5 each
time signal T (c) traverses an internode. Subsequently, production p6
introduces the value of parameter c into the corresponding branches,
using module U (c) as a carrier. The successor of production p6 has
the same format as the axiom, thus module I(c) determines the delay
between the initiation of branch development and time signal S, sent
to terminate further internode creation. This delay c is smallest for
the top branches and increases towards the plant base. Consequently,
parameter c can be interpreted as the growth potential of the branches,
allowing lower branches to grow longer than the higher ones. On the
other hand, the development of the upper branches starts sooner, thus
in some stages they will be more developed than the lower ones, and
the ﬂowering sequence will progress downwards, corresponding to ob-
3.3. Models of inﬂorescences                                          89


   #include K                  /* flower shape specification */
   #consider M S T V

   ω :     I(20)FA(0)
   p1 :    S < A(t) : *        →   TV K
   p2 :    V < A(t) : *        →   TV K
   p3 :        A(t) : t>0      →   A(t-1)
   p4 :        A(t) : t=0      →   M[+(30)G]F/(180)A(2)
   p5 :    S < M    :*         →   S
   p6 :        S > T:*         →   T
   p7 :    T < G    :*         →   FA(2)
   p8 :    V < M    :*         →   S
   p9 :        T > V:*         →   W
   p10 :       W    :*         →   V
   p11 :       I(t) : t>0      →   I(t-1)
   p12 :       I(t) : t=0      →   S
                L-system 3.3: Mycelis muralis – Model III

servations of the real plant [77].
     A diagrammatic developmental sequence of Mycelis muralis simu-
lated using L-system 3.2 is shown in Figure 3.17. Initially, the segments
are shown as bright green. The passage of ﬂorigen S turns them purple,
and the lifting of apical dominance changes their color to dark green.
Figure 3.18 represents a three-dimensional rendering of the same model.
The three-dimensional structure diﬀers from the two-dimensional di-
agram only in details. The angle value associated with the module
“/” in production p3 has been changed to 137.5◦ , resulting in a spiral
arrangement of lateral branches around the mother axis. The leaves
subtending branches have been included in the model, and ﬂowers have
been assumed to undergo a series of changes from bud to open ﬂower
to fruit.
     Another developmental model of Mycelis, referred to here as model      Model III
III, is given by L-system 3.3. The initial phases of development are the
same as in model II. First, apex A creates the main axis and initiates
lateral branches (productions p3 and p4 ). Symbol M in the successor of
production p4 marks consecutive branching points. After a delay of 20
steps (ω) counted by production p11 , ﬂowering signal S is generated at
the inﬂorescence base (p12 ) and sent up along the main axis (p5 ). Upon
reaching the apex, S induces its transformation into a terminal ﬂower
K, and initiates two basipetal signals T and V (p1 ). The basipetal
signals also can be initiated by production p2 , which is needed for the
proper timing of signals in the topmost lateral branch. Signal T prop-
agates basipetally at the rate of one internode per derivation step (p6 )
and lifts apical dominance, thus allowing the lateral branches to grow
(p7 ). The presence of the second basipetal signal V is the distinctive
90                           Chapter 3. Developmental models




     Figure 3.17: Development of Mycelis muralis
3.3. Models of inﬂorescences                                             91




     Figure 3.18: A three-dimensional rendering of the Mycelis model

feature of model III. Its role is to enable the formation of ﬂowers on
the lateral branches by generating the ﬂowering signal S at their bases
(p8 ). Since signal V propagates down the main axis at the rate of one
internode per two derivation steps (p9 , p10 ), the interval between the
lifting of apical dominance by signal T and induction of ﬂowering signal
S by signal V increases linearly towards the inﬂorescence base. This
allows the lower branches to grow longer than the upper ones, resulting
in a structure that is more developed near the base than near the apex
in later developmental stages.
     This entire control process repeats recursively for each axis: its apex
is transformed into a ﬂower by signal S, the growth of lateral axes is
successively enabled by signal T , and the second basipetal signal V is
sent to induce the ﬂowering signal S in the next-order axes. Conse-
quently, a basipetal ﬂowering sequence is observed along all axes of the
panicle.
     Model II controls the ﬂowering on lateral branches using growth           Biological
potential c accumulated by signal T on its way down, while model               relevance
III employs the time interval between signals T and V for the same
purpose. Since both models produce identical developmental sequences,
it is not possible to decide which one is more faithful to nature without
gathering additional data related to plant physiology. Nevertheless, the
models clearly indicate that the ﬂowering sequence of Mycelis cannot
be explained simply in terms of two commonly recognized mechanisms,
92                                   Chapter 3. Developmental models




     n=10, δ = 60◦

     #include K /* flower shape specification */

     ω    :   A∼K
     p1   :   A    :   *      → [-/∼K][+/∼K]I(0)/(90)A
     p2   :   I(t) :   !(t=2) → FI(t+1)
     p3   :   I(t) :   t=2    → I(t+1)[-FFA][+FFA]

                   Figure 3.19: Lilac inﬂorescences
3.3. Models of inﬂorescences                                           93




Figure 3.20: Geometry of a lilac inﬂorescence: (a) the decussate branching
pattern, (b) the inﬂorescence skeleton without ﬂowers



the ﬂowering signal and the lifting of apical dominance. Another factor,
whether it is an accumulated delay or a third signal, is needed. The
mathematical models bring forward evidence and assist in formulating
plausible hypotheses related to the control mechanisms that may be
employed by nature. The ﬁnal answer will require further study of the
real plant.
    The models of Mycelis employ relatively complicated control pro-         Lilac
cesses to explain the developmental sequence of a plant. On the other
hand, if only a static image of a panicle in a particular developmental
stage is needed, much simpler L-systems can be used. The L-system
that generates the lilac inﬂorescences shown in Figure 3.19 is an ex-
ample. Production p1 describes the subapical development of an axis.
Production p2 models linear elongation of internodes in time and in-
troduces a delay before p3 creates the lateral axes. The rotation of the
apex by 90◦ (p1 ) results in a decussate branching pattern with consec-
utive pairs of (n + 1)-order axes lying in the planes that pass through
the n-order axis and are perpendicular to each other (Figure 3.20). A
scene including lilac inﬂorescences is shown in Figure 3.21.



3.3.4     Modiﬁed racemes
There are four frequently encountered types of inﬂorescences that are
morphological modiﬁcations of racemes. Their mature forms are of a
special kind and need to be speciﬁed separately.
94                   Chapter 3. Developmental models




     Figure 3.21: The garden of L
3.3. Models of inﬂorescences                                           95

        a                                   b




             Figure 3.22: Umbels: (a) simple, (b) compound

Umbel
An umbel is characterized by more than two internodes attached to a
single node, resulting in a typical umbrella-like shape. In a simple um-
bel there are ﬂowers at the ends of the lateral internodes (Figure 3.22a),
while in compound umbels the branching pattern is repeated recursively
a certain number of times (Figure 3.22b). The partial L-system for a
simple umbel is
                            ω : A
                            p1 : A → I[IK]n
and for a compound umbel of recursion depth two is

                          ω    :   A
                          p1   :   A → I[IB]k B
                          p2   :   B → I[IC]l C
                          p3   :   C → I[IK]m

This type of inﬂorescence is commonly found in the family Umbelliferae.
For example, Figure 3.23 presents a model of a wild carrot. Note that        Wild carrot
the size of leaves decreases towards the top of the plant, producing a
phase eﬀect similar to that observed in simple racemes. In contrast, the
most developed inﬂorescence is placed at the top of the plant, indicating
developmental control by a hormone similar to that observed in mints
(Figure 3.11).

Spike
An elongated raceme with closely packed ﬂowers is called a spike. Many
grasses and sedges have this kind of inﬂorescence (Figure 3.24a). See
Figure 4.17 (page 117) for a realistic model.
96                                    Chapter 3. Developmental models




                        Figure 3.23: Wild carrot

Spadix
A ﬂeshy elongated raceme is called a spadix, and is frequently found in
the family Araceae (Figure 3.24b).

Capitulum
A ﬂeshy spherical or disk-shaped raceme is called a capitulum or “head.”
The sunﬂower head is an inﬂorescence of this kind, the oldest ﬂowers be-
ing at the margin and the youngest at the center (Figure 3.24c). Mem-
bers of the family Compositae commonly have this type of structure.
One characteristic feature is the spatial arrangement of components,
such as ﬂowers or seeds, which form early discernible spiral patterns. A
detailed description of these patterns is presented in the next chapter.
3.3. Models of inﬂorescences                                             97



a                        b                         c




    Figure 3.24: Modiﬁed racemes: (a) spike, (b) spadix, (c) capitulum
Chapter 4

Phyllotaxis


The regular arrangement of lateral organs (leaves on a stem, scales on
a cone axis, ﬂorets in a composite ﬂower head) is an important aspect
of plant form, known as phyllotaxis. The extensive literature generated
by biologists’ and mathematicians’ interest in phyllotaxis is reviewed
by Erickson [36] and Jean [78]. The proposed models range widely from
purely geometric descriptions (for example, Coxeter [17]) to complex
physiological hypotheses tested by computer simulations (Hellendoorn
and Lindenmayer [59], Veen and Lindenmayer [151], Young [163]). This
chapter presents two models suitable for the synthesis of realistic images
of ﬂowers and fruits that exhibit spiral phyllotactic patterns.
    Both models relate phyllotaxis to packing problems. The ﬁrst oper-
ates in a plane and was originally proposed by Vogel [154] to describe
the structure of a sunﬂower head. A further detailed analysis was given
by Ridley [124, 125]. The second model reduces phyllotaxis to the
problem of packing circles on the surface of a cylinder. Its analysis was
presented by van Iterson [75] and reviewed extensively by Erickson [36].
    The area of phyllotaxis is dominated by intriguing mathematical
relationships. One of them is the “remarkable fact that the numbers of
spirals which can be traced through a phyllotactic pattern are predom-
inantly integers of the Fibonacci sequence” [36, p. 54]. For example,
Coxeter [17] notes that the pineapple displays eight rows of scales slop-
ing to the left and thirteen rows sloping to the right. Furthermore, it is
known that the ratios of consecutive Fibonacci
                                        √          numbers Fk+1 /Fk con-
verge towards the golden mean τ = ( 5 + 1)/2. The Fibonacci angle
360◦ τ −2 , approximately equal to 137.5◦ , is the key to the ﬁrst model
discussed in this chapter.
                  100                                                Chapter 4. Phyllotaxis



                                   137. 5 °                        n +1




                              n +2
                                                                          137. 5 °



                                        n
                                     r ∼√              n


                           #define a 137.5 /* divergence angle */
                           #include D      /* disk shape specification */

                           ω :    A(0)
                           p1 :   A(n) :      * → +(a)[f(n∧0.5)∼D]A(n+1)

                  Figure 4.1: Pattern of ﬂorets in a sunﬂower head, according to Vogel’s for-
                  mula

                  4.1        The planar model
Vogel’s formula   In order to describe the pattern of ﬂorets (or seeds) in a sunﬂower head,
                  Vogel [154] proposed the formula
                                                                  √
                                        φ = n ∗ 137.5◦ ,    r = c n,                  (4.1)
                  where:
                        • n is the ordering number of a ﬂoret, counting outward from the
                          center. This is the reverse of ﬂoret age in a real plant.
                        • φ is the angle between a reference direction and the position vec-
                          tor of the nth ﬂoret in a polar coordinate system originating at
                          the center of the capitulum. It follows that the divergence an-
                          gle between the position vectors of any two successive ﬂorets is
                          constant, α = 137.5◦ .
                        • r is the distance between the center of the capitulum and the
                          center of the nth ﬂoret, given a constant scaling parameter c.
4.1. The planar model                                                   101



a                         b                          c




Figure 4.2: Generating phyllotactic patterns on a disk. These three patterns
diﬀer only by the value of the divergence angle α, equal to (a) 137.3◦ , (b)
137.5◦ (the correct value), and (c) 137.6◦ .

The distribution of ﬂorets described by formula (4.1) is shown in Fig-
ure 4.1. The square-root relationship between the distance r and the           Model
ﬂoret ordering number n has a simple geometric explanation. Assum-             justiﬁcation
ing that all ﬂorets have the same size and are densely packed, the total
number of ﬂorets that ﬁt inside a disc of radius r is proportional to
the disk area. Thus, the ordering number n of the most outwardly√
positioned ﬂoret in the capitulum is proportional to r2 , or r ∼ n.
    The divergence angle of 137.5◦ is much more diﬃcult to explain.
Vogel [154] derives it using two assumptions.

    • Each new ﬂoret is issued at a ﬁxed angle α with respect to the
      preceding ﬂoret.
    • The position vector of each new ﬂoret ﬁts into the largest existing
      gap between the position vectors of the older ﬂorets.
    Ridley [125] does not object to these basic assumptions, but indi-
cates that they are insuﬃcient to explain the origin of the Fibonacci
angle, and points to several arbitrary steps present in Vogel’s deriva-
tion. He describes the main weakness as follows:

      While it is reasonable to assume that the plant could con-
      tain genetic information determining the divergence angle
      to some extent, it is completely impossible for this alone to
      ﬁx the divergence angle to the incredible accuracy occurring
      in nature, since natural variation in biological phenomena
      is normally rather wide. For example, for the 55- and 89-
      parastichies to be conspicuous, as occurs in most sunﬂower
      heads, d must lie between 2155
                                     and 34
                                         89
                                            , a relative accuracy of
      one part in 1869.

The critical role of the divergence angle α is illustrated in Figure 4.2.
               102                                               Chapter 4. Phyllotaxis




                               Figure 4.3: Close-up of a daisy capitulum

               Although a comprehensive justiﬁcation of Vogel’s formula may require
               further research, the model correctly describes the arrangement of ﬂo-
               rets visible in actual capitula. The most prominent feature is two sets
Parastichies   of spirals or parastichies, one turning clockwise, the other counterclock-
               wise, which are composed of nearest neighboring ﬂorets. The number
               of spirals in each set is always a member of the Fibonacci sequence; 21
               and 34 for a small capitulum, up to 89 and 144 or even 144 and 233 for
               large ones. For example, the capitulum of a daisy (Figure 4.3) exhibits
               34 clockwise spirals and 21 counterclockwise spirals, with directions
               determined by following the spirals outwards from the capitulum cen-
               ter. In the image of a domestic sunﬂower capitulum (Figure 4.4), one
               can discern 34 spirals running clockwise and 55 spirals running counter-
               clockwise. The number of perceived spirals depends on the capitulum
               size expressed in terms of the number of component ﬂorets. If the ﬁeld
               of attention is limited to a circle approximately 2/3 the size of the en-
               tire sunﬂower capitulum in Figure 4.4, the number of discernible spirals
               becomes 34 and 21.


                           Figure 4.4: Domestic sunﬂower head              -
4.1. The planar model                                        103




      #define S               /* seed shape */
      #define R               /* ray floret shape */
      #include M N O P        /* petal shapes */

      ω    :   A(0)
      p1   :   A(n)   :   * → +(137.5)[f(n∧0.5)C(n)]A(n+1)
      p2   :   C(n)   :   n <= 440           → ∼S
      p3   :   C(n)   :   440 < n & n <= 565 → ∼R
      p4   :   C(n)   :   565 < n & n <= 580 → ∼M
      p5   :   C(n)   :   580 < n & n <= 595 → ∼N
      p6   :   C(n)   :   595 < n & n <= 610 → ∼O
      p7   :   C(n)   :   610 < n            → ∼P
                104                                                      Chapter 4. Phyllotaxis

                   The dependence of the number of parastichies on the size of the
                ﬁeld of attention is yet another intriguing aspect of spiral phyllotaxis,
                as pointed out in the following excerpt from a letter by Alan Turing 1
                quoted in [18]:
                       According to the theory I am working on now there is a
                       continuous advance from one pair of parastichy numbers to
                       another, during the growth of a single plant. . . . You will
                       be inclined to ask how one can move continuously from one
                       integer to another. The reason is this — on any specimen
                       there are diﬀerent ways in which the parastichy numbers can
                       be reckoned; some are more natural than others. During the
                       growth of a plant the various parastichy numbers come into
                       prominence at diﬀerent stages. One can also observe the
                       phenomenon in space (instead of in time) on a sunﬂower.
                       It is natural to count the outermost ﬂorets as say 21 + 34,
                       but the inner ones might be counted as 8 + 13. . . . I don’t
                       know any really satisfactory account, though I hope to get
                       one myself in about a year’s time.
                    A complete model of a ﬂower head, suitable for realistic image syn-
                thesis, should contain several organs of various shapes. This is easily
                achieved by associating diﬀerent surfaces with speciﬁc ranges of the in-
                dex n. For example, consider the L-system that generates the sunﬂower
Sunﬂower head   head (Figure 4.4). The layout of components is speciﬁed by produc-
                tion p1 , similar to that of the L-system in Figure 4.1. Productions p2
                to p7 determine colors and shapes of components as a function of the
                derivation step number. The entire structure shown in Figure 4.4 was
                generated in 630 steps. Alternatively, random selection of similar sur-
                faces could have been employed to prevent the excessive regularity of
                the resulting image.
                    Other extensions to the basic model consist of varying organ orien-
                tation in space and changing their altitude from the plane of the head
                as a function of n. For example, the sunﬂower plants included in Fig-
                ure 4.5 have ﬂowers in four developmental stages: buds, young ﬂowers
                starting to open, open ﬂowers and older ﬂowers where the petals begin
                to droop. All ﬂowers are generated using approximately the same num-
                ber of ﬂorets. The central ﬂorets are represented by the same surface at
                each stage. The shape and orientation of surfaces representing petals
                vary from one stage to another. The plants have been modeled as di-
                botryoids, with a single signal inducing a basipetal ﬂowering sequence,
                as described in the previous chapter.
                   1
                     To computer scientists, Alan Turing is best known as the inventor of the Turing
                machine [146], which plays an essential role in deﬁning the notion of an algorithm.
                However, biologists associate Turing’s name primarily with his 1952 paper, “The
                chemical basis of morphogenesis” [147], which pioneered the use of mathematical
                models in the study of pattern formation and advocated the application of comput-
                ers to simulate biological phenomena.
4.1. The planar model                               105




                        Figure 4.5: Sunﬂower ﬁeld
                 106                                               Chapter 4. Phyllotaxis




                                            Figure 4.6: Zinnias

Other examples   The zinnias (Figures 4.6 and 4.7) illustrate the eﬀect of changing a
                 petal’s altitude, size and orientation as a function of n. The height at
                 which a petal is placed decreases by a small amount as n increases. The
                 size of each successive petal is incremented linearly. The orientation is
                 also adjusted linearly by a small angle increment. Thus, petals with
                 small values of index n are placed more vertically, while petals with
                 larger indices n are more horizontal. Although the family Compositae
                 oﬀers the most examples of phyllotactic patterns, the same model can
                 be applied to synthesize images of other ﬂowers, such as water-lilies
                 (Figures 4.8 and 4.9) and roses (Figure 4.10).


                                Figure 4.7: Close-up of zinnias         -
4.1. The planar model   107
108                            Chapter 4. Phyllotaxis




      Figure 4.8: Water-lily




      Figure 4.9: Lily pond
4.2. The cylindrical model                                            109




                             Figure 4.10: Roses

4.2      The cylindrical model
The spiral patterns evident in elongated organs such as pine cones,          Basic model
ﬁr cones and pineapples, can be described by models that position
components, in this case scales, on the surface of a cylinder. Van Iterson
[75] divides phyllotactic patterns on cylinders into simple and conjugate
ones. In the case of a simple arrangement, all components lie on a single
generative helix. In contrast, conjugate patterns consist of two or more
interleaved helices. This paper discusses simple phyllotactic patterns
only. They are generally characterized by the formula

                φ = n ∗ α,      r = const,        H = h ∗ n,         (4.2)
where:
   • n is the ordering number of a scale, counting from the bottom of
     the cylinder;
   • φ, r and H are the cylindrical coordinates of the nth scale;
   • α is the divergence angle between two consecutive scales (as in
     the planar case, it is assumed to be constant); and
   • h is the vertical distance between two consecutive scales (mea-
     sured along the main axis of the cylinder).
                 110                                               Chapter 4. Phyllotaxis

Implementation       A parametric L-system that generates the pattern described by for-
using            mula (4.2) is given in Figure 4.11. The operation of this L-system
L-systems        simulates the natural process of subapical development characterized
                 by sequential production of consecutive modules by the top part of the
                 growing plant or organ. The apex A produces internodes f (h) along
                 the main axis of the modeled structure. Associated with each intern-
                 ode is a disk ∼D placed at a distance r from the axis. This oﬀset is
                 achieved by moving the disk away from the axis using the module f (r),
                 positioned at a right angle with respect to the axis by &(90). The spi-
                 ral disk distribution is due to the module /(a), which rotates the apex
                 around its own axis by the divergence angle in each derivation step.
Analysis of          In the planar model, the constant divergence angle α = 137.5◦ is
model geometry   found across a large variety of ﬂower heads. The number of perceived
                 parastichies is determined by the capitulum size, and it changes as the
                 distance from the capitulum center increases. In contrast, a phyllotactic
                 pattern on the surface of a cylinder is uniform along the entire cylinder
                 length. The number of evident parastichies depends on the values of
                 parameters α and h. The key problem, both from the viewpoint of
                 understanding the geometry of the pattern and applying it to generate
                 synthetic images, is to express the divergence angle α and the vertical
                 displacement h as a function of the numbers of evident parastichies en-
                 circling the cylinder in the clockwise and counterclockwise directions. A
                 solution to this problem was proposed by van Iterson [75] and reviewed
                 by Erickson [36]. Our presentation closely follows that of Erickson.
                     The phyllotactic pattern can be explained in terms of circles packed
                 on the surface of the cylinder. An evident parastichy consists of a
                 sequence of tangent circles, the ordering numbers of which form an
                 arithmetic sequence with diﬀerence m. The number m is referred to as
                 the parastichy order. Thus, the circles on the cylinder surface may be
                 arranged in two congruent 2-parastichies, ﬁve congruent 5-parastichies,
                 and so on. The angular displacement between two consecutive circles
                 in an m-parastichy is denoted by δm . By deﬁnition, δm belongs to the
                 range (−π, π] radians. The relation between the angular displacement
                 δm and the divergence angle α is expressed by the equation

                                           δm = mα − ∆m 2π,                          (4.3)
                 where ∆m is an integer called the encyclic number. It is the number
                 of turns around the cylinder, rounded to the nearest integer, which
                 the generative helix describes between two consecutive points of the
                 m-parastichy.
                     Usually, one can perceive two series of parastichies running in oppo-
                 site directions (Figure 4.11). The second parastichy satisﬁes an equa-
                 tion analogous to (4.3):

                                            δn = nα − ∆n 2π                          (4.4)
                 Consider the m- and n-parastichies starting at circle 0. In their paths
                 across the cylinder, they will intersect again at circle mn. Assume
4.2. The cylindrical model                                            111




 #define a 137.5281       /*   divergence angle */
 #define h 35.3           /*   vertical displacement */
 #define r 500            /*   component offset from main axis */
 #include D               /*   disk shape specification */

 ω :    A
 p1 :   A : * → [&(90)f(r)∼D]f(h)/(a)A

Figure 4.11: Parastichies on the surface of a cylinder and on the unrolled
cylinder. The L-system generates the cylindrical pattern.

that m and n are relatively prime; otherwise the phyllotactic pattern
would have to contain several circles lying at the same height H and,
contrary to the initial assumption, would not be simple. The circle
mn is the ﬁrst point of intersection between the m-parastichy and the
n-parastichy above circle 0. Consequently, the path from circle 0 to mn
along the m-parastichy, and back to 0 along the n-parastichy, encircles
the cylinder exactly once. The section of m-parastichy between circles 0
and mn consists of n+1 circles (including the endpoints), so the angular
distance between the circles 0 and mn is equal to nδm . Similarly, the
distance between circles 0 and mn, measured along the n-parastichy,
can be expressed as mδn . As a result,

                             nδm − mδn = ±2π.                        (4.5)
112                                                       Chapter 4. Phyllotaxis




                        mn

                       γ β

                          mnh



        0                                                              0
                mδn                          nδm
Figure 4.12: An opposite parastichy triangle (as in Erickson [36, Fig. 3.8]).
The base is formed by the circumference of the cylinder. The sides are
formed by the parastichies.

The signs in equation (4.5) correspond to the assumption that the spi-
rals encircle the cylinder in opposite directions; thus one of the values
δ is positive and the other one is negative. Substituting the right sides
of equations (4.3) and (4.4) for δm and δn yields

                           n∆m − m∆n = ±1.                          (4.6)
    To further analyze the pertinent geometric relationships, the cylin-
der is cut along the vertical line passing through the center of circle 0
and “unrolled” (Figure 4.11). The two parastichies and the circumfer-
ence of the cylinder passing through point 0 form a triangle as shown
in Figure 4.12. The perpendicular to the base from point mn divides
this triangle into two right triangles. If d denotes the diameter of the
circles, then
                         (nδm )2 + (mnh)2 = (nd)2
and
                    (mδn )2 + (mnh)2 = (md)2 .
The above system of equations can be solved with respect to h and d:
                             
                   h =             2 − δ 2 )/(n2 − m2 )
                                 (δm                                       (4.7)
                                        n
                             
                   d =                2 − m2 δ 2 )/(n2 − m2 )
                                 (n2 δm                                    (4.8)
                                              n

or, taking into consideration equation (4.5),
                         
                    d=       2π(nδm + mδn )/(n2 − m2 ).                    (4.9)
4.2. The cylindrical model                                                                                                  113




 a                                               15
                                                              b
                              14
         13
                                           12
                     11
                                                     10                                                      15
                                  9                                                    14                                  13
          8                                                                                         12
                                            7                                 11                                  10
                      6                                                                     9
                                                      5               8                                  7
                                  4                                                6
             3                                                                                  4                      5
                                            2                             3                                   2
                       1                                                                1
     0                                                0           0                                                         0


 c               14                   15         13
                                                              d
         11                   12
                          9                 10                                         14                    15            13
     8                                7                   8                   11                    12            10
                 6                               5                    8                     9            7
         3                    4                                                    6            4                      5
                      1                    2                              3             1                     2
     0                                                0           0                                                         0


Figure 4.13: Patterns of tangent circles drawn on the surface of a cylinder
as a function of circle diameter

    The problem is to determine values of δm and δn . They are not
simply functions of parameters m and n. Figure 4.13 shows that, for a
given m and n, the values of δm and δn can be chosen from a certain
range, yielding parastichies of diﬀerent steepness. In order to determine
this range, observe that at its limits the phyllotactic pattern changes;
one previously evident parastichy disappears and another is formed.
Thus, at the range limit, three evident parastichies coexist. It follows
from Figure 4.13 that at one end of the range the third parastichy has
order |m−n|, and at the other end it has order (m+n). Three coexisting
parastichies imply that each circle is tangent to six other circles. In
other words, all circles lie in the vertices of a regular hexagonal grid,
as seen in Figure 4.13a and c. Consequently, the angle β + γ at vertex
mn (Figure 4.12) is equal to 2π/3. Expressing the base of the triangle
in terms of its two sides and their included angle results in

                     (2π)2 = (nd)2 + (md)2 − 2(nd)(md) cos(2π/3)

or, after simpliﬁcation,
                                                 √
                                          d = 2π/ m2 + mn + n2 .                                                       (4.10)

Equations (4.9) and (4.10) yield

                     nδm + mδn = 2π(n2 − m2 )/(m2 + mn + n2 ).                                                         (4.11)
                 114                                               Chapter 4. Phyllotaxis

                    Solving the system of equations (4.5) and (4.11) with respect to δm
                 and δn produces

                                    δm = π(m + 2n)/(m2 + mn + n2 )                  (4.12)
                 and
                                    δn = π(2m + n)/(m2 + mn + n2 ).                 (4.13)


                     Given the values of δm and δn , the divergence angle α can be found
                 from either equation (4.3) or (4.4), assuming that the encyclic numbers
                 ∆m or ∆n are known. It follows from the deﬁnition that these numbers
                 are the smallest positive integers satisfying equation (4.6). A system-
                 atic method for solving this equation, based on the theory of continuous
                 fractions, is presented by van Iterson [75]. Erickson [36] points out that
                 in practice the solution can often be found by guessing. Another pos-
                 sibility is to look for the smallest pair of numbers (∆m , ∆n ) satisfying
                 (4.6) using a simple computer program.
Pattern              In conclusion, a phyllotactic pattern characterized by a pair of num-
construction     bers (m, n) can be constructed as follows:

                   1. Find ∆m and ∆n from equation (4.6).
                   2. Find the range of admissible values of the angular displacements
                      δm and δn . The limits can be obtained from equations (4.12) and
                      (4.13) using the values of m and n for one limit, and the pair
                      (min{m, n}, |m − n|) for the other.
                   3. For a chosen pair of admissible displacement values δm and δn ,
                      calculate the divergence angle α from equation (4.3) or (4.4) and
                      the vertical displacement h from equation (4.8).
                   4. Find the diameter d of the circles from equation (4.8).

                     The diameter d does not enter directly in any formula used for
                 image synthesis, but serves as an estimate of the size of surfaces to
                 be incorporated in the model. This algorithm was applied to produce
Triple-contact   Table 4.1 showing parameter values for which three parastichies coexist.
patterns         Given a pattern with two parastichies, this table provides the limits of
                 the divergence angle α. For example, a (5,8) pattern can be formed for
                 values of α ranging from 135.918365◦ to 138.139542◦ , which correspond
                 to the patterns (3,5,8) and (5,8,13), respectively.
                     Further information relating the divergence angle α to the verti-
                 cal displacement h for various phyllotactic patterns is shown in Fig-
                 ure 4.14. The arcs represent parameters of patterns with two paras-
                 tichies (m, n). The branching points represent parameters of patterns
                 with three parastichies (m, n, m + n).
4.2. The cylindrical model                                                                                                                                                                                                     115




                     m,n,m+n α (degrees)                                                                                              h                                            d

                     (1,            1,     2)                      180.000000                                        1.81380                                          -
                     (1,            2,     3)                      128.571426                                        0.777343                                     2.374821
                     (1,            3,     4)                       96.923073                                        0.418569                                     1.742642
                     (2,            3,     5)                      142.105270                                        0.286389                                     1.441462
                     (1,            4,     5)                       77.142860                                        0.259114                                     1.371104
                     (3,            4,     7)                      102.162163                                        0.147065                                     1.032949
                     (3,            5,     8)                      135.918365                                        0.111049                                     0.897598
                     (2,            5,     7)                      152.307693                                        0.139523                                     1.006115
                     (1,            5,     6)                       63.870968                                        0.175529                                     1.128493
                     (4,            5,     9)                       79.672134                                        0.089203                                     0.804479
                     (4,            7,     11)                      98.709671                                        0.058510                                     0.651536
                     (3,            7,     10)                     107.088600                                        0.068878                                     0.706914
                     (3,            8,     11)                     131.752579                                        0.056097                                     0.637961
                     (5,            8,     13)                     138.139542                                        0.042181                                     0.553204
                     (5,            7,     12)                     150.275223                                        0.049921                                     0.601820
                     (2,            7,     9)                      158.507462                                        0.081215                                     0.767613

      Table 4.1: Cylinder formula values for triple-contact patterns

                     h
       1.80

       1.70

       1.60

       1.50

       1.40
                                                                                                                                                          (1,2)
       1.30

       1.20

       1.10

       1.00

       0.90

       0.80
                                                                                                                                      (1,2,3)
       0.70
                                                                                    (1,3)
       0.60
                                                                                                                                                  (2,3)
       0.50

       0.40                                        (1,4)                    (1,3,4)

       0.30                                                                        (3,4)                                                                   (2,3,5)
                     (1,5)                   (1,4,5)
       0.20                                                                                                                            (3,5)                          (2,5)
                                    (4,5)                                            (3,4,7)                                                                                 (2,5,7)
       0.10                                                        (4,7)                                                     (3,8)                (3,5,8)
                                                                                             (3,7)                                                                                     (2,7)
                                                                                                                                                   (5,8)
                                                                                                                                                                          (5,7)                                            α
       0.00
                                                                           100.0

                                                                                     105.0

                                                                                             110.0

                                                                                                     115.0

                                                                                                             120.0

                                                                                                                     125.0

                                                                                                                              130.0

                                                                                                                                          135.0

                                                                                                                                                  140.0

                                                                                                                                                          145.0

                                                                                                                                                                  150.0

                                                                                                                                                                           155.0

                                                                                                                                                                                   160.0

                                                                                                                                                                                           165.0

                                                                                                                                                                                                   170.0

                                                                                                                                                                                                           175.0

                                                                                                                                                                                                                   180.0
              60.0

                     65.0

                             70.0

                                    75.0

                                            80.0

                                                     85.0

                                                            90.0

                                                                   95.0




Figure 4.14: The vertical displacement h as a function of the divergence
angle α for various phyllotactic patterns
               116                                               Chapter 4. Phyllotaxis




                                       Figure 4.15: Pineapples

               Models of fruits synthesized using the cylindrical model are shown in
Pineapple      Figures 4.15 and 4.16.      The pineapple (Figure 4.15) is an example
               of a pattern where a given scale has six neighbors, which belong to
               5-, 8- and 13-parastichies. The corresponding divergence angle α is
Spruce cones   equal to 138.139542◦ . The spruce cones (Figure 4.16) were generated
               using the values m = 5, n = 8 and α = 137.5◦ (the divergence angle
               α for a (5, 8)-parastichy pattern belongs to the interval 135.918365◦ to
               138.139542◦ ). From these values, h and d were calculated as a function
               of the radius of the cylinder. The eﬀect of closing the bottom and
               top of the pineapple and spruce cones was achieved by decreasing the
               diameter of the cylinder and the size of the scales.
                   A variant of the model of phyllotaxis on a cylinder can be used to
               model organs that are conical rather than cylindrical in shape. For
Sedge          example, Figure 4.17 shows a model of the sedge Carex laevigata. L-
               system 4.1 generates the male spike. Production p1 speciﬁes the basic
4.2. The cylindrical model                                            117




                        Figure 4.16: Spruce cones




Figure 4.17: Carex laevigata: the male spike, the entire shoot, the female
spike
118                                               Chapter 4. Phyllotaxis


  #define IRATE 1.025 /* internode growth rate */
  #define SRATE 1.02 /* spikelet growth rate */
  #include M          /* spikelet shape specification */

  ω    :   A
  p1   :   A    :   *    →   [&(5)f(1)∼M(1)]F(0.2)/(137.5)A
  p2   :   M(s) :   s<3 →    M(s*SRATE)
  p3   :   f(s) :   s<3 →    f(s*SRATE)
  p4   :   &(s) :   s<15 →   &(s*SRATE)
  p5   :   F(i) :   i<1 →    F(i*IRATE)
             L-system 4.1: The male spike of Carex laevigata

layout of the spikelets, similar to that given by the L-system in Fig-
ure 4.11. The top portion of the spike has a conical shape due to the
growth of spikelets for some time after their creation by the apex. Ac-
cording to production p2 , a spikelet grows by factor SRAT E in each
derivation step, until it reaches the threshold size of 3. In an analogous
way, productions p3 , p4 and p5 capture the distance increase between
spikelets and the spike axis, the increase of the branching angle, and
the elongation of internodes.
    The models of phyllotaxis deal with the arrangement of organs in
space. For the purpose of mathematical analysis their shape is reduced
to a simple geometric ﬁgure, usually a circle. However, in realistic
images the exact shape of the organs must be captured as well. Several
techniques suitable for this purpose are outlined in the next chapter.
Chapter 5

Models of plant organs


Many concepts presented in the previous chapters were illustrated using
realistic images, but the modeling techniques for leaves and petals have
not been described yet. Three approaches are discussed below.


5.1     Predeﬁned surfaces
The standard computer graphics method for deﬁning arbitrary surfaces        Bicubic patches
makes use of bicubic patches [9, 10, 40]. A patch is deﬁned by three
polynomials of third degree with respect to parameters s and t. The
following equation deﬁnes the x coordinate of a point on the patch:

            x(s, t) = a11 s3 t3 + a12 s3 t2 + a13 s3 t + a14 s3
                      + a21 s2 t3 + a22 s2 t2 + a23 s2 t + a24 s2
                      + a31 st3 + a32 st2 + a33 st + a34 s
                      + a41 t3 + a42 t2 + a43 t + a44

Analogous equations deﬁne y(s, t) and z(s, t). All coeﬃcients are de-
termined by interactively designing the desired shape on the screen
of a graphics workstation. Complex surfaces are composed of several
patches.
    The surfaces are incorporated into a plant model in a manner sim-       Turtle
ilar to subﬁgures (Section 1.4.2). The L-system alphabet is extended        interpretation
to include symbols representing diﬀerent surfaces. When the turtle
encounters such a symbol preceded by a tilde (∼), the corresponding
surface is drawn.
    The exact position and orientation of surface S representing an ap-
pendage is determined using a contact point PS , the heading vector H S
and the up vector V S as a reference (Figure 5.1). The surface is trans-
lated in such a way that its contact point matches the current position
           120                                    Chapter 5. Models of plant organs




                           Figure 5.1: Speciﬁcation of an appendage

           of the turtle, and is rotated to align its heading and up vectors with the
           corresponding vectors of the turtle. If a surface represents an internal
           part of the structure such as an internode, a distinction between the
           entry and exit contact points is made.
Examples       The majority of organs presented in this book have been modeled
           this way. The petals of sunﬂowers, zinnias, water-lilies and roses shown
           in Chapter 4 provide good examples. Figure 5.2 illustrates an additional
           improvement in the appearance of organs, made possible by the appli-
           cation of textures to the surfaces of leaves, ﬂowers and vine branches.



           5.2      Developmental surface models
           Predeﬁned surfaces do not “grow.” String symbols can be applied to
           control such features as the overall color and size of a surface, but
           the underlying shape remains the same. In order to simulate plant
           development fully, it is necessary to provide a mechanism for changing
           the shape as well as the size of surfaces in time. One approach is to
Contour    trace surface boundaries using the turtle and ﬁll the resulting polygons.
tracing    A sample L-system is given below:

                    ω : L
                    p1 : L → {−F X + X − F X − | − F X + X + F X}
                    p2 : X → F X

           Production p1 deﬁnes leaf L as a closed planar polygon. The braces
           { and } indicate that this polygon should be ﬁlled. Production p2
Fern       increases the lengths of its edges linearly. The model of a fern shown
           in Figure 5.3 incorporates leaves generated using this method, with
           the angle increment equal to 20◦ . Note the phase eﬀect due to the
           “growth” of polygons in time. A similar approach was taken to generate
           the leaves, ﬂowers and fruits of Capsella bursa-pastoris (Figure 3.5 on
           page 74).
5.2. Developmental surface models                           121




                Figure 5.2: Maraldi figure by Greene [54]




                          Figure 5.3: The fern
               122                                    Chapter 5. Models of plant organs




                 Figure 5.4: Surface speciﬁcation using a tree structure as a framework

Framework      In practice, the tracing of polygon boundaries produces acceptable ef-
approach       fects only in the case of small, ﬂat surfaces. In other cases it is more
               convenient to use a tree structure as a framework. Polygon vertices are
               speciﬁed by a sequence of turtle positions marked by the dot symbol
               (.). An example is given in Figure 5.4a. The letter G has been used
               instead of F to indicate that the segments enclosed between the braces
               should not be interpreted as the edges of the constructed polygon. The
               numbers correspond to the order of vertex speciﬁcation by the turtle.
Cordate leaf       Figure 5.5 shows the development of a cordate leaf modeled using
               this approach. The axiom contains symbols A and B, which initiate the
               left-hand and right-hand sides of the blade. Each of the productions p1
               and p2 creates a sequence of axes starting at the leaf base and gradually
               diverging from the midrib. Production p3 increases the lengths of the
               axes. The axes close to the midrib are the longest since they were
               created ﬁrst. Thus, the shape of this leaf is yet another manifestation
               of the phase eﬀect. The leaf blade is deﬁned as a union of triangles
               rather than a single polygon. Such triangulation is advantageous if
               the blade bends, for example due to tropism (Chapter 2). Figure 5.4b
               provides an additional illustration of the model by magnifying the left
               side of the leaf after four derivation steps.
5.2. Developmental surface models                                    123




                       ω    :   [A][B]
                       p1   :   A → [+A{.].C.}
                       p2   :   B → [-B{.].C.}
                       p3   :   C → GC

Figure 5.5: Developmental sequence of a cordate leaf generated using an
L-system

The described method makes it possible to deﬁne a variety of leaves.        Simple leaves
Their shapes depend strongly on the growth rates of segments. For
example, a family of simple leaves and the corresponding parametric
L-system are shown in Figure 5.6.
    According to production p1 , in each derivation step apex A(t) ex-
tends the main leaf axis by segment G(LA, RA) and creates a pair of
lateral apices B(t). New lateral segments are added by production p2 .
Parameter t, assigned to apices B by production p1 , plays the role of
“growth potential” of the branches. It is decremented in each derivation
step by a constant P D, and stops production of new lateral segments
upon reaching 0. Segment elongation is captured by production p3 .
    For the purpose of analysis, it is convenient to divide a leaf blade
into two areas. In the basal area, the number of lateral segments is
determined by the initial value of growth potential t and constant P D.
Since the initial value of t assigned to apices B increases towards the
leaf apex, the consecutive branches contain more and more segments.
On the other hand, branches in the apical area exist for too short a
time to reach their limit length. Thus, while traversing the leaf from
the base towards the apex, the actual number of segments in a branch
ﬁrst increases, then decreases. As a result of these opposite tendencies,
the leaf reaches its maximum width near the central part of the blade.
124                                    Chapter 5. Models of plant organs




 n=20, δ=60◦

 #define   LA   5       /*   initial length - main segment */
 #define   RA   1       /*   growth rate - main segment */
 #define   LB   1       /*   initial length - lateral segment */
 #define   RB   1       /*   growth rate - lateral segment */
 #define   PD   1       /*   growth potential decrement */

 ω    : {.A(0)}
 p1   : A(t)    :       *   → G(LA,RA)[-B(t).][A(t+1)][+B(t).]
 p2   : B(t)    :       t>0 → G(LB,RB)B(t-PD)
 p3   : G(s,r) :        *   → G(s*r,r)

Figure 5.6: A family of simple leaves generated using a parametric L-system




                    Figure   LA RA LB          RB     PD
                      a       5 1.0 1.0       1.00   0.00
                      b       5 1.0 1.0       1.00   1.00
                       c      5 1.0 0.6       1.06   0.25
                      d       5 1.2 10.0      1.00   0.50
                       e      5 1.2 4.0       1.10   0.25
                       f      5 1.1 1.0       1.20   1.00


       Table 5.1: Values of constants used to generate simple leaves
5.2. Developmental surface models                                      125




                       Figure 5.7: A rose in a vase

Table 5.1 lists the values of constants corresponding to particular shapes.   Shape control
For a given derivation length, the exact position of the branch with the
largest number of segments is determined by P D. If P D is equal to 0,
all lateral branches have an unlimited growth potential, and the basal
part of the leaf does not exist (Figure 5.6a). If P D equals 1, the basal
and apical parts contain equal numbers of lateral branches (Figures 5.6
b and f). Finer details of the leaf shape are determined by the growth
rates. If the main axis segments and the lateral segments have the same
growth rates (RA = RB), the edges of the apical part of the leaf are
straight (Figures 5.6 a and b). If RA is less than RB, the segments
along the main axis elongate at a slower rate than the lateral segments,
resulting in a concave shape of the apical part (Figures 5.6 c and f). In
the opposite case, with RA greater than RB, the apical part is convex
(Figures 5.6 d and e). The curvature of the basal edges can be analyzed
in a similar way.
            126                                   Chapter 5. Models of plant organs




             n=25, δ=60◦

             #define   LA   5      /*   initial length - main segment */
             #define   RA   1.15   /*   growth rate - main segment */
             #define   LB   1.3    /*   initial length - lateral segment */
             #define   RB   1.25   /*   growth rate - lateral segment */
             #define   LC   3      /*   initial length - marginal notch */
             #define   RC   1.19   /*   growth rate - marginal notch */

             ω :    [{A(0,0).}][{A(0,1).}]
             p1 :   A(t,d)   : d=0 → .G(LA,RA).[+B(t)G(LC,RC,t).}]
                                             [+B(t){.]A(t+1,d)
             p2 :   A(t,d)   : d=1 → .G(LA,RA).[-B(t)G(LC,RC,t).}]
                                             [-B(t){.]A(t+1,d)
             p3 :   B(t)     : t>0 → G(LB,RB)B(t-1)
             p4 :   G(s,r)   : *     → G(s*r,r)
             p5 :   G(s,r,t) : t>1 → G(s*r,r,t-1)

                                     Figure 5.8: A rose leaf

Rose leaf   Figure 5.7 shows a long-stemmed rose with the leaves modeled accord-
            ing to Figure 5.8. The L-system combines the concepts explored in
            Figures 5.5 and 5.6. The axiom contains modules A(0, 0) and A(0, 1),
            which initiate the left-hand and right-hand side of the leaf. The de-
            velopment of the left side will be examined in detail. According to
            production p1 , in each derivation step apex A(t, 0) extends the midrib
            by internodes G(LA, RA) and creates two colinear apices B(t) pointing
            to the left. Further extension of the lateral axes is speciﬁed by produc-
            tion p3 . The leaf blade is constructed as a sequence of trapezoids, with
            two vertices lying on the midrib and the other two vertices placed at
            the endpoints of a pair of lateral axes formed in consecutive derivation
            steps. The module G(LC, RC, t) introduces an oﬀset responsible for
            the formation of notches at the leaf margin. Production p4 describes
            the elongation of internodes responsible for overall leaf shape, while
            production p5 controls the size of the notches. The development of the
            right side of the blade proceeds in a similar manner, with production p2
5.2. Developmental surface models                                    127




         Figure 5.9: Surface speciﬁcation using stacked polygons

recreating the midrib and creating lateral apices pointing to the right.
The bending of the midrib to the right is a result of tropism.
    In the examples discussed so far, the turtle speciﬁes the vertices of   Nested
one polygon, then moves on to the next. Further ﬂexibility in surface       polygons
deﬁnition can be achieved by interleaving vertex speciﬁcations for dif-
ferent polygons. The turtle interpretation of the braces is redeﬁned in
the following way. A string containing nested braces is evaluated us-
ing two data structures, an array of vertices representing the current
polygon and a polygon stack. At the beginning of string interpretation,
both structures are empty. The symbols {, } and . are then interpreted
as follows:

 {     Start a new polygon by pushing the current polygon on
       the polygon stack and creating an empty current polygon.
 .     Append the new vertex to the current polygon.
 }     Draw the current polygon using the speciﬁed vertices,
       then pop a polygon from the stack and make it the current
       polygon.

An example of string interpretation involving nested braces is given in
Figure 5.9.
    The above technique was applied to construct the ﬂowers of the          Lily-of-the-
lily-of-the-valley shown in Figure 3.4 (page 72), and magniﬁed in Fig-      valley
ure 5.10. A ﬂower is represented by a polygon mesh consisting of ﬁve
sequences of trapezoids spread between pairs of curved lines that em-
anate radially from the ﬂower base. A single sequence is generated by
the following L-system:

                   ω    :   [X(36)A]/(72)[X(36)B]
                   p1   :   A    : ∗ → [&GA{.].
                   p2   :   B    : ∗ → B&.G.}
                   p3   :   X(a) : ∗ → X(a + 4.5)
            128                                      Chapter 5. Models of plant organs




                         Figure 5.10: Structure of a lily-of-the-valley ﬂower

            Productions p1 and p2 create two adjacent framework lines and mark
            polygon vertices consistently with Figure 5.9. Production p3 controls
            the angle at which the framework lines leave the stalk at the ﬂower
            base.


            5.3      Models of compound leaves
            So far, the discussion of organ models has focused on the deﬁnition
            of surfaces. However, in the case of highly self-similar structures, the
            individual surfaces become inconspicuous, and the expression of the
            geometric relationships between younger and older parts of the struc-
Symmetric   ture becomes the key issue. For example, Figure 5.11 shows compound
branching   leaves often found in the family Umbelliferae. According to produc-
            tion p2 , the apex A(0) creates two segments F (1) and a pair of lateral
            apices A(D) in each derivation step. Production p1 delays the develop-
            ment of the daughter branches by D steps with respect to the mother
            branch. This pattern is repeated recursively in branches of higher or-
            der. Production p3 gradually elongates the internodes, and in this way
            establishes proportions between parts of a leaf. The values of the con-


                              Figure    D     R   Derivation length
                                a       0    2.00        10
                                b       1    1.50        16
                                 c      2    1.36        21
                                d       4    1.23        30
                                 e      7    1.17        45

                  Table 5.2: Values of constants used to generate compound leaves
5.3. Models of compound leaves                                 129




    #define D 1              /* apical delay */
    #define R 1.5            /* internode elongation rate */

    ω    :   A(0)
    p1   :   A(d) :   d > 0 → A(d-1)
    p2   :   A(d) :   d = 0 → F(1)[+A(D)][-A(D)]F(1)A(0)
    p3   :   F(a) :   *     → F(a*R)

                      Figure 5.11: Compound leaves
130                                        Chapter 5. Models of plant organs




      #define D 1                  /* apical delay */
      #define R 1.36               /* internode elongation rate */

      ω    :   A(0)
      p1   :   A(d)     :   d>0    →   A(d-1)
      p2   :   A(d)     :   d=0    →   F(1)[+A(D)]F(1)B(0)
      p3   :   B(d)     :   d>0    →   B(d-1)
      p4   :   B(d)     :   d=0    →   F(1)[-B(D)]F(1)A(0)
      p5   :   F(a)     :   *      →   F(a*R)

      Figure 5.12: Compound leaves with alternating branching patterns




                      Figure      D  R   Derivation length
                        a         1 1.36        20
                        b         4 1.18        34
                         c        7 1.13        46


Table 5.3: Values of the constants used to generate compound leaves with
alternating branches
5.3. Models of compound leaves                                     131

stants used to generate the structures shown in Figure 5.11 are listed
in Table 5.2. The model is sensitive to growth rate values — a change
of 0.01 visibly alters proportions. Leaves of the wild carrot, shown in
Figure 3.23 (page 96), correspond closely to case Figure 5.11b.
    Another type of compound leaf, with alternating branches, is ex-      Alternating
amined in Figure 5.12. The values of the constants used in the L-         branching
system are speciﬁed in Table 5.3. Further examples can be found in
the next chapter, devoted to the animation of developmental processes,
and Chapter 8, which ties developmental models with fractals.
Chapter 6

Animation of plant
development

The sequences of images used in Chapters 3 and 5 to illustrate the de-    Motivation
velopment of inﬂorescences and compound leaves suggest the possibil-
ity of using computer animation to visualize plant development. From
a practical perspective, computer animation oﬀers several advantages
over traditional time-lapse photography.
   • Photography is sensitive to imperfections in the underlying ex-
     periment. A disease or even a temporary wilting of a plant may
     spoil months of ﬁlming.
   • In nature, developmental processes are often masked by other
     phenomena. For example, the growth of leaves can be diﬃcult
     to capture because of large changes in leaf positions during the
     day. Similarly, positions of tree branches may be aﬀected by
     wind. Computer animation makes it possible to abstract from
     these distracting eﬀects.
   • Animation can be used when time-lapse photography is imprac-
     tical because of the long development time of plants (e.g. years
     in the case of trees).
   • In time-lapse photography, the initial position of the camera and
     the light conditions must be established a priori, without know-
     ing the ﬁnal shape of the plant. In computer animation all de-
     velopmental stages of the modeled plant are known in advance,
     allowing for optimal selection of the model view.
   • Animation can be applied to visualize developmental mechanisms
     that cannot be observed directly in real plants, such as the prop-
     agation of hormones and nutrients.
               134                            Chapter 6. Animation of plant development

                     • Animation oﬀers an unprecedented means for visualizing the de-
                       velopment of extinct plants on the basis of paleobotanical data.
Discrete           The original formalism of L-systems provides a model of develop-
character of   ment that is discrete both in time and space. Discretization in time
L-systems      implies that the model states are known only at speciﬁc time inter-
               vals. Discretization in space means that the range of model states is
               limited to a ﬁnite number. Parametric L-systems remove the latter ef-
               fect by assigning continuous attributes to model components. However,
               the model states are still known only in discrete time intervals. This
               presents a problem in animation, where a smooth progression of the
               developing forms is desirable.
                   This last statement requires further clariﬁcation. The very nature
               of animation is to produce the impression of continuous motion by dis-
               playing a sequence of still frames, captured at ﬁxed time intervals. Why
               is a continuous model of plant development needed if it will be used to
               generate a ﬁxed sequence of images in the ﬁnal account? Wouldn’t it
               be enough to retain the standard deﬁnition of L-systems and assume
               time slices ﬁne enough to produce the desired progression of forms?
               This approach, while feasible and useful, has three major drawbacks.
                     • A model can be constructed assuming longer or shorter time in-
                       tervals, but once the choice has been made, the time step is a part
                       of the model and cannot be changed easily. From the viewpoint
                       of computer animation it is preferable to control the time step by
                       a single parameter, decoupled from the underlying L-system.
                     • The continuity criteria responsible for the smooth progression of
                       shapes during animation can be speciﬁed more easily in the con-
                       tinuous time domain.
                     • It would be conceptually elegant to separate model development,
                       deﬁned in continuous time, from model observation, taking place
                       in discrete intervals.
                   A developmental process is viewed as consisting of periods of contin-
               uous module expansion delimited by instantaneous module divisions.
               Special conditions are imposed to preserve the shape and growth rates
               of the organism during these qualitative changes. An analogy can be
               drawn to the theory of morphogenesis advanced by Thom [142], who
               viewed shape formation as a piecewise continuous process with singu-
               larities called catastrophes.
                   Formally, development taking place in continuous time is captured
               using the formalism of timed DOL-systems. The key diﬀerence between
               these L-systems and the types of L-systems considered so far lies in
               the deﬁnition of the derivation function. In “ordinary” L-systems, the
               derivation length is expressed as the number of derivation steps. In
               timed DOL-systems, the derivation length is associated with the total
               elapsed time since the beginning of the observation.
6.1. Timed DOL-systems                                                              135

6.1        Timed DOL-systems
Let V be an alphabet and R the set of positive real numbers (including
0). The pair (a, τ ) ∈ V × R is referred to as the timed letter a, and
the number τ is called the age of a. A sequence of timed letters, x =
(a1 , τ1 ) . . . (an , τn ) ∈ (V × R)∗ , is called a timed word over alphabet V .
     A timed DOL-system (tDOL-system) is a triplet G = V, ω, P ,                        Deﬁnition
where
    • V is the alphabet of the L-system,
    • ω ∈ (V × R)+ is a nonempty timed word over V , called the initial
      word, and
    • P ⊂ (V × R) × (V × R)∗ is a ﬁnite set of productions.

    Instead of writing ((a, β), (b1 , α1 ) . . . (bn , αn )) ∈ P , the notation
(a, β) → (b1 , α1 ) . . . (bn , αn ) is used. The parameter β is referred to
as the terminal age of the letter a, and each parameter αi is the initial
age assigned to the letter bi by production P . The following assump-
tions are made:

 C1. For each letter a ∈ V there exists exactly one value β ∈ R such
     that (a, β) is the predecessor of a production in P .
 C2. If (a, β) is a production predecessor and (a, α) is a timed let-
     ter that occurs in the successor of some production in P , then
     β > α.

   According to these conditions, each letter has a uniquely deﬁned
terminal age. Furthermore, an initial age assigned to a letter by a
production must be smaller than its terminal age, i.e., its lifetime (β −
α) must be positive.
   Let (a, β) → (b1 , α1 ) . . . (bn , αn ) be a production in P . A function             Derivation
D : ((V × R)+ × R) → (V × R)∗ is called a derivation function if it has
the following properties:

A1. D(((a1 , τ1 ) . . . (an , τn )), t) = D((a1 , τ1 ), t) . . . D((an , τn ), t)
A2. D((a, τ ), t) = (a, τ + t), if τ + t ≤ β
A3. D((a, τ ), t) = D((b1 , α1 ) . . . (bn , αn ), t − (β − τ )), if τ + t > β

A derivation in a timed DOL-system is deﬁned in terms of two types
of time variables. Global time t is common to the entire word under
consideration, while local age values τi are speciﬁc to each letter ai .
              136                            Chapter 6. Animation of plant development

              Axiom A1 identiﬁes t as the variable that synchronizes the entire de-
              velopment, and speciﬁes that the lineages of all letters can be considered
              independently from each other (thus, no interaction between letters is
              assumed). With the progress of time t, each letter “grows older” until
              its terminal age is reached (axiom A2). At this moment subdivision
              occurs and new letters are produced with initial age values speciﬁed by
              the corresponding production (axiom A3). Condition C1 guarantees
              that the subdivision time is deﬁned unambiguously, hence the devel-
              opment proceeds in a deterministic fashion. Condition C2 guarantees
              that, for any value of time t, the recursive references speciﬁed by axiom
              A3 will eventually end.
Anabaena          The above concepts are examined by formulating a timed DOL-
              system that simulates the development of a vegetative part of the An-
              abaena catenula ﬁlament. Given the discrete model expressed by equa-
              tion (1.1) on page 5, the corresponding tDOL-system is as follows:
                                   ω:     (ar , 0)
                                   p1 :   (ar , 1)   →   (al , 0)(br , 0)
                                   p2 :   (al , 1)   →   (bl , 0)(ar , 0)          (6.1)
                                   p3 :   (br , 1)   →   (ar , 0)
                                   p4 :   (bl , 1)   →   (al , 0)
              In accordance with the discrete model, it is assumed that all cells have
              the same lifetime, equal to one time unit. The derivation tree is shown
              in Figure 6.1. The nodes of the tree indicate production applications
              speciﬁed by axiom A3, and the triangular “arcs” represent the continu-
              ous aging processes described by axiom A2. The vertical scale indicates
              global time. For example, at time t = 2.75 the ﬁlament consists of three
              cells, bl , ar and ar , whose current age is equal to 0.75.
                   According to the deﬁnition of time intervals corresponding to axioms
              A2 and A3, a production is applied after the age τ + t exceeds the
              terminal age. Consequently, at division time the “old” cells still exist.
              For example, at time t = 2.0 the ﬁlament consists of two cells, al and
              br , both of age τ = 1.
                   The above L-system can be simpliﬁed by considering cells of type b
              as young forms of the cells of type a. This is suggested by Figure 6.1
              where cells b simply precede cells a in time. The simpliﬁed L-system
              has two productions:
                                   p1 : (ar , 2) → (al , 1)(ar , 0)
                                                                                   (6.2)
                                   p2 : (al , 2) → (al , 0)(ar , 1)
              The corresponding derivation tree starting from cell (ar , 1) is shown in
              Figure 6.2. Note the similarity to the tree from the previous example.
Model             Whether a natural developmental process or its mathematical model
observation   is considered, the choice of observation times and the act of observation
              should not aﬀect the process itself. In other terms, each derived word
              should depend only on the total elapsed time t, and not on the partition
6.1. Timed DOL-systems                                                  137




Figure 6.1: Derivation tree representing the continuous development of An-
abaena catenula described by the L-system is equation (6.1). Sections of the
triangles represent cell ages.




Figure 6.2: Derivation tree representing the continuous development of An-
abaena catenula corresponding to the rules speciﬁed in equation (6.2)
138                               Chapter 6. Animation of plant development

of t into intervals. The following theorem shows that timed DOL-
systems satisfy this postulate.
Theorem. Let G = V, ω, P  be a tDOL-system, and x ∈ (V × R)+ be
a timed word over V . For any values of ta , tb ≥ 0, the following holds:
                        D(D(x, ta ), tb ) = D(x, ta + tb )
Proof. Let us ﬁrst consider the special case where the word x consists
of a single timed letter, (a0 , τ0 ), and all productions in the set P take
single letters into single letters. According to condition C1, there exists
a unique sequence of productions from P such that:
                    (ai , βi ) → (ai+1 , αi+1 ), i = 0, 1, 2, . . .
Let (ak , τk ) be the result of the derivation of duration ta that starts
from (a0 , τ0 ). According to axioms A2 and A3, and assuming that
ta > β0 − τ0 , this derivation can be represented in the form
      D   ((a0 , τ0 ), ta )
      =   D((a1 , α1 ), ta − (β0 − τ0 ))
      =   D((a2 , α2 ), ta − (β0 − τ0 ) − (β1 − α1 ))
      =   ···
      =   D((ak , αk ), ta − (β0 − τ0 ) − (β1 − α1 ) − . . . − (βk−1 − αk−1 ))
      =   (ak , τk ),
where
                                                    k−1
                  τk = αk + [ta − (β0 − τ0 ) −             (βi − αi )].
                                                     i=1
Since the sequence of recursive calls can be terminated only by an ap-
plication of axiom A2, the index k and the age τk satisfy the inequality
                                  αk < τk ≤ βk .
Due to condition C2, such an index k always exists and is unique.
    Let us now consider a derivation of duration tb > βk − τk that
starts from (ak , τk ). Following the same reasoning, the result can be
represented as (am , τm ), where
                                                     m−1
                τm = αm + [tb − (βk − τk ) −                 (βi − αi )]
                                                    i=k+1

and
                            αm < τm ≤ βm .
By substituting the value of τk into the formula for τm , we obtain after
simple transformations
                                                           m−1
             τm = αm + [(ta + tb ) − (β0 − τ0 ) −                (βi − αi )].
                                                           i=1
6.2. Selection of growth functions                                             139

Thus, the timed letter (am , τm ) also results from the derivation of du-
ration ta + tb starting with (a0 , τ0 ):
         (am , τm ) = D(D((a0 , τ0 ), ta ), tb ) = D((a0 , τ0 )x, ta + tb ).
   So far, we have considered only the case
                        ta > β0 − τ0 ,       tb > βk − τk .
Two other cases, namely,
                     0 ≤ ta ≤ β0 − τ0 ,         tb > βk − τk
and
                  ta > β0 − τ0 ,    0 ≤ tb ≤ βk − τk
can be considered in a similar way. The remaining case,
                  0 ≤ ta ≤ β0 − τ0 ,         0 ≤ tb ≤ βk − τk ,
is a straightforward consequence of condition C2. This completes the
proof of the special case. In general, a derivation that starts from a
word (a1 , τ1 ) . . . (an , τn ) can be considered as n separate derivations,
each starting from a single letter. This observation applies not only to
the initial word speciﬁed at time t = 0, but also to any intermediate
word generated during the derivation. Consequently, any path in the
derivation tree can be considered as a sequence of mappings that takes
single letters into single letters. Application of the previous reasoning
separately to every path concludes the proof. 2


6.2      Selection of growth functions
Timed L-systems capture qualitative changes in model topology corre-
sponding to cell (or, in general, module) divisions, and return the age
of each module as a function of the global time t. In order to complete
model deﬁnition, it is also necessary to specify the shape of each module
as a function of its age. Potentially, such growth functions can be es-
timated experimentally by observing real organisms [72, 73]. However,
if detailed data is not available, growth functions can be selected from
an appropriate class by choosing parameters so that the animation is
smooth. This approach can be viewed as more than an ad hoc tech-
nique for constructing acceptable animated sequences. In fact, Thom
presents it as a general methodology for studying morphogenesis [142,
page 4]:
      The essence of the method to be described here consists
      in supposing a priori the existence of a diﬀerential model
      underlying the process to be studied and, without knowing
      explicitly what the model is, deducing from the single as-
      sumption of its existence conclusions relating to the nature
      of the singularities of the process.
                140                            Chapter 6. Animation of plant development

                   A technique for computing parameters of growth functions in the
                case of nonbranching ﬁlaments and simple branching structures is given
                below.

                6.2.1       Development of nonbranching ﬁlaments
                In a simple case of geometric interpretation of timed L-systems, symbols
                represent cells that elongate during their lifetime and divide upon reach-
                ing terminal age. Model geometry does not change suddenly, which
                means that
                      • the length of each cell is a continuous function of time, and
                      • the length of a cell before subdivision is equal to the sum of the
                        lengths of the daughter cells.
Continuity      The above continuity requirements are formalized in the context of a
requirements    tDOL-system G = V, ω, P  as follows:
                 R1. Let [αmin , β] describe the life span of a timed letter a ∈ V . The
                     age αmin is the minimum of the initial age values assigned to a
                     by the axiom ω or by some production in P . The terminal age
                     β is determined by the predecessor of the production acting on
                     symbol a. The growth function g(a, τ ), which speciﬁes the length
                     of cell a as a function of age τ , must be a continuous function of
                     parameter τ in the domain [αmin , β].
                 R2. For each production (a, β) → (b1 , α1 ) . . . (bn , αn ) in P the follow-
                     ing equality holds:
                                                          n
                                              g(a, β) =         g(bi , αi )             (6.3)
                                                          i=1


                In practice, requirement R1 is used to select the class of growth func-
                tions under consideration, and the equations resulting from requirement
                R2 are used to determine the parameters in function deﬁnitions.
Linear growth       For example, in the case of the timed L-system speciﬁed in equa-
                tion (6.2), requirement R2 takes the form

                                      g(ar , 2) = g(al , 1) + g(ar , 0)
                                      g(al , 2) = g(al , 0) + g(ar , 1).                (6.4)

                Let us assume that the growth functions are linear functions of time:

                                           g(al , τ ) = Al τ + Bl
                                           g(ar , τ ) = Ar τ + Br                       (6.5)
6.2. Selection of growth functions                                                   141




Figure 6.3: Diagrammatic representation of the development of Anabaena
catenula, with (a) linear and (b) exponential growth of cells

By substituting equations (6.5) into (6.4), we obtain
   2Ar + Br = (1Al + Bl ) + (0Ar + Br )                        or    2Ar = Al + Bl
   2Al + Bl = (0Al + Bl ) + (1Ar + Br )                        or    2Al = Ar + Br .
The desired continuity of development is provided by all solutions of
this system. They can be expressed in terms of coeﬃcient c, which
relates the growth rate of cells al to that of cells ar :
                                   Al = cAr
                                   Bl = Ar (2 − c)
                                   Br = Ar (2c − 1)
Figure 6.3a illustrates the developmental process considered for c =
1. The diagram is obtained by plotting the cells in the ﬁlament as
horizontal line segments on the screen. Colors indicate cell type and
age. The observation time t ranges from 1 (at the top) to 7 (at the
bottom), with increment ∆t = 0.009.
    The slopes of the side edges of the diagram represent growth rates
of the entire structure. Notice that they remain constant in the peri-
ods between cell divisions, then change. This eﬀect is disconcerting in
animation, since the rate of organism growth suddenly increases with
each cell division. In order to prevent this, it is necessary to extend re-
quirements R1 and R2 to a higher order of continuity N . Speciﬁcally,
equation (6.3) takes the form
                                  n
                 (k)
             g         (a, β) =         g (k) (bi , αi ) for k = 0, 1, . . . , N,   (6.6)
                                  i=1
              142                             Chapter 6. Animation of plant development

              where g (k) (a, τ ) is the k th derivative of the growth function g(a, τ ) with
              respect to age τ .
                  In the case of Anabaena, an attempt to achieve ﬁrst-order continu-
              ity assuming linear growth functions yields an uninteresting solution,
Exponential   g(al , τ ) = g(ar , τ ) ≡ 0. Thus, more complex growth functions must be
growth        considered, such as an exponential function that can be used to approx-
              imate the initial phase of sigmoidal growth. Assume that the growth
              function has the form
                                      g(al , τ ) = g(ar , τ ) = AeBτ .                 (6.7)
              The objective is to ﬁnd values of parameters A and B that satisfy
              equation (6.6) for k = 0, 1. By substituting equation (6.7) into (6.6),
              we obtain
                                    AB k e2B = AB k eB + AB k ,                 (6.8)
              which implies that zero-order continuity yields continuity of inﬁnite
              order in this case. Solution of equation (6.8) for any value of k yields
                                                 √
                                              1+ 5
                                      B = ln         ≈ 0.4812.                    (6.9)
                                                2
              Parameter A is a scaling factor and can be chosen arbitrarily. The
              corresponding diagrammatic representation of development is shown in
              Figure 6.3b. The side edges of the diagram, representing the growth
              rates of the whole structure, are smooth exponential curves.

              6.2.2     Development of branching structures
              The notions of tDOL-system and growth function extend in a straight-
              forward way to L-systems with brackets. For example, the following
              tDOL-system describes the recursive structure of the compound leaves
              analyzed in Section 5.3.
                               ω : (a, 0)
                               p1 : (a, 1) → (s, 0)[(b, 0)][(b, 0)](a, 0)
                               p2 : (b, β) → (a, 0)
              According to production p1 , apex a produces an internode s, two lateral
              apices b and a younger apex a. Production p2 transforms the lateral
              apices b into a after a delay β. The daughter branches recursively repeat
              the development of the mother branch.
                  Let us assume that the leaf development is ﬁrst-order continuous,
              yielding the following equations for k = 0, 1:

                                  g (k) (a, 1) = g (k) (s, 0) + g (k) (a, 0)          (6.10)
                                  g (k) (b, 0) = 0                                    (6.11)
                                  g (k) (b, β) = g (k) (a, 0)                         (6.12)
6.2. Selection of growth functions                                    143

Equation (6.10) provides continuity along an existing axis upon the
formation of a new internode s. Equation (6.11) speciﬁes that a newly
formed lateral apex b has zero length and zero growth rate. Equa-
tion (6.12) guarantees smooth transformation of apices b into apices a.
    Let us further assume that apices a and internodes s expand expo-
nentially,
                           g(a, τ ) = Aa eBa τ                      (6.13)
                           g(s, τ ) = As eBs τ ,                    (6.14)
for τ ∈ [0, 1]. The expansion of the lateral apices cannot be described
by an exponential function, since it would not satisfy equations (6.11).
Consequently, a polynomial growth function g(b, τ ) is chosen. Equa-
tions (6.11) and (6.12) ﬁx the function’s endpoints and the tangents at
the endpoints. Thus, in general, g(b, τ ) must be a polynomial of degree
three or more, such as
                   g(b, τ ) = Ab τ 3 + Bb τ 2 + Cb τ + Db .         (6.15)
The system of equations (6.10) through (6.12) is solved using the initial
size Aa and the growth rate coeﬃcient Ba as independent variables.
By substituting (6.13) and (6.14) into equations (6.10) for k = 0, 1, we
obtain
                           As = Aa (eBa − 1)
                           Bs = Ba .
Equations (6.11) and (6.15) yield
                               Cb = Db = 0.
Finally, substitution of (6.13) and (6.15) into (6.12) results in
                                 Aa
                          Ab =      (βBa − 2)
                                 β3
                                 Aa
                          Bb   =    (3 − βBa ).
                                 β2
Figure 6.4 shows a sequence of images produced by this model using
values β = Aa = 1 and Ba = 0.48. The branching angles are equal to
45◦ . The observation time t ranges from 6.9 to 7.7, with an increment
of 0.2. Note the gradual formation of lateral segments.
    In the examples considered above, modules are represented as
straight lines, with growth functions controlling line lengths. Other
parameters, such as the branching angle, the diameter of segments and
the size of predeﬁned surfaces, can be controlled in an analogous way.
Generally, any developmental model captured by an OL-system with
turtle interpretation can be converted into a tDOL-system and ani-
mated.
144                          Chapter 6. Animation of plant development




Figure 6.4: Developmental sequence of a branching structure modeled using
a tDOL-system
Chapter 7

Modeling of cellular layers

String L-systems, the ﬁrst formalism considered in this book, are suit-
able for the modeling of nonbranching ﬁlaments such as Anabaena
catenula. The introduction of brackets extends the class of modeled
structures to axial trees. However, many structures found in botany
have a more complex topology, which can only be described by graphs
with cycles. The developmental surface models presented in Section 5.2
make it possible to specify a limited class of these graphs. This chapter
describes a more general approach and applies it to simulate the devel-
opment of single-layered cellular structures such as those found in fern
gametophytes, animal embryos and plant epidermis. All structures con-
sidered are of microscopic dimensions and relatively undiﬀerentiated,
yet the presented methods may bring us closer to the modeling of more
complex patterns, such as the venation of leaves.
    The modeling method consists of two stages. First, the topology
of the cell division patterns are expressed using the formalism of map
L-systems, which allows for the formation of cycles in a structure. At
this stage the neighborhood relations between cells are established, but
the cell shapes remain unspeciﬁed. Next, cell geometry is modeled
using a dynamic method that takes into account the osmotic pressure
inside the cells and the tension of cell walls. The development can be
animated by considering periods of continuous cell expansion, delimited
by instantaneous cell divisions.


7.1     Map L-systems
From a mathematical perspective, cellular layers can be represented         Maps as
using a class of planar graphs with cycles, called maps [148]. Nakamura     models of cell
et al. [102] characterize them as follows:                                  layers

   • A map is a ﬁnite set of regions. Each region is surrounded by
     a boundary consisting of a ﬁnite, circular sequence of edges that
     meet at vertices.
                146                                 Chapter 7. Modeling of cellular layers

                      • Each edge has one or two vertices associated with it. The one-
                        vertex case occurs when an edge forms a loop. The edges cannot
                        cross without forming a vertex and there are no vertices without
                        an associated edge.
                      • Every edge is a part of the boundary of a region.
                      • The set of edges is connected. Speciﬁcally, there are no islands
                        within regions.

                    A map corresponds to a microscopic view of a cellular layer. Regions
                represent cells, and edges represent cell walls perpendicular to the plane
                of view. The internal components of a cell are not considered.
Map rewriting       The process of cell division can be described by map rewriting. This
                notion is an extension of string rewriting as discussed in Section 1.2.
                In general, map-rewriting systems are categorized as sequential or par-
                allel, and can be region-controlled or edge-controlled [87]. Since several
                cells may divide concurrently, a parallel rewriting system is needed.
                The second categorization has to do with the form of rewriting rules,
                which may express cell subdivisions in terms of region labels or edge
                labels. Both approaches are suitable for biological modeling purposes
                [22]. This chapter focuses on the edge-controlled formalism of Binary
mBPMOL-         Propagating Map OL-system with markers, or mBPMOL-systems. It
systems         was proposed by Nakamura, Lindenmayer and Aizawa [102] as a reﬁne-
                ment of the basic concept of map L-systems introduced by Lindenmayer
                and Rozenberg [91]. The name is derived as follows. A map OL-system
                is a parallel rewriting system that operates on maps and does not al-
                low for interaction between regions. In other words, regions are modi-
                ﬁed irrespective of what happens to neighboring regions (a context-free
                mechanism). The system is binary because a region can split into at
                most two daughter regions. It is propagating in the sense that the edges
                cannot be erased, thus regions (cells) cannot fuse or die. The markers
                specify the positions of inserted edges that split the regions.
                    The choice of mBPMOL-systems as a modeling tool has two jus-
                tiﬁcations. First, they are more powerful than other interactionless
                map-rewriting systems described in the literature [19, 22, 23]. In addi-
                tion, markers have a biological counterpart in preprophase bands of mi-
                crotubules, which coincide with the attachment sites for division walls
                formed during mitosis [55]. It should be noted, however, that double
                wall systems, introduced by J. and H. B. Lück [93], may be relatively
                easier to specify [23].
Deﬁnition           An mBPMOL-system G consists of a ﬁnite alphabet of edge labels
                Σ, a starting map ω with labels from Σ, and a ﬁnite set of edge pro-
                ductions P . In general, the edges are directed, which is indicated by a
                left or right arrow placed above the edge symbol. In some cases, the
                edge direction has no eﬀect on the system operation. Such an edge
                is called neutral and no arrow is placed above the symbol denoting it.
                Each production is of the form A → α, where the directed or neutral
7.1. Map L-systems                                                    147




                Figure 7.1: Examples of edge productions

edge A ∈ Σ is called the predecessor, and the string α, composed of
symbols from Σ and special symbols [, ], +, and −, is called the succes-
sor. The symbols outside square brackets specify the edge subdivision
pattern. Arrows can be placed above edge symbols to indicate whether
the successor edges have directions consistent with, or opposite to, the
predecessor edge. Pairs of matching brackets [ and ] delimit markers,
which specify possible attachment sites for region-dividing walls. The
markers are viewed as short branches that can be connected to form a
complete wall. The strings inside brackets consist of two symbols. The
ﬁrst symbol is either + or −, indicating whether the marker is placed
to the left or to the right of the predecessor edge. The second symbol
is the marker label, with or without an arrow. The left arrow indicates
that the marker is directed towards the predecessor edge, and the right
arrow indicates that the marker is directed away from that edge. If no
arrow is present, the marker is neutral.
                                      →     →← ← →
    For example, in the production A → D C [−E ]BF , the directed prede-     Production
cessor A splits into four edges D, C, B and F , and produces a marker E      syntax
(Figure 7.1a). Successor edges D and B have the same direction as A,
edge C has the opposite direction, and F is neutral. Marker E is placed
to the right of A and is directed
                             ←
                                   towards
                                   ←  ← →←
                                              A. Note that this same pro-
duction could be written as A → F B [+E ]C D (Figure 7.1b). As an example
                                                            → ←    ←←
of a production with a neutral predecessor, consider A→B [−B ]x[+B ]B . In
this case the result of production application does not depend on the
assumed direction of the predecessor edge (Figure 7.1c).
   A derivation step in an mBPMOL-system consists of two phases.             Derivation
   • Each edge in the map is replaced by successor edges and markers
     using the corresponding edge production in P .
   • Each region is scanned for matching markers.
           148                                  Chapter 7. Modeling of cellular layers




                                   ω :    ABAB
                                   p1 :   A →      B[-A][+A]B
                                   p2 :   B →      A


           Figure 7.2: Example of a map L-system. In the ﬁrst step, a distinction
           is made between the edge-rewriting phase and the connection of matching
           markers.


           Two markers are considered matching if:
                 • they appear in the same region,
                 • they have the same label, and
                 • one marker is directed away from its incident edge while the other
                   is directed towards the edge, or both markers are neutral.
           If a match is found, the markers are joined to create a new edge that
           will split the region. The search for matching markers ends with the
           ﬁrst match found, even though other markers entering the same region
           may also form a match. From the user’s perspective, the system be-
           haves nondeterministically since it chooses the pair of markers to be
           connected. The unused markers are discarded.
Examples       The operation of mBPMOL-systems is illustrated in the following
           examples. The L-system shown in Figure 7.2 has two productions.
           Production p1 creates markers responsible for region division, while
           production p2 introduces a delay needed to subdivide the regions alter-
           nately by horizontal and vertical edges.
               The L-system shown in Figure 7.3 is a modiﬁed version of the pre-
           vious one. The only diﬀerence is the addition of an edge x, which
           separates the markers in the successor of production p1 . This edge
           creates a Z-shaped oﬀset between the inserted edges A. Z-oﬀsets and
           symmetric S-oﬀsets (Figure 7.4) can be observed in many biological
           structures [22, 92].
               Figure 7.5 illustrates the operation of an mBPMOL-system with
           directed edges. Productions p1 and p3 create markers. Production p4
7.1. Map L-systems                                                      149




                      ω :        ABAB
                      p1 :       A →    B[-A]x[+A]B
                      p2 :       B →    A

                 Figure 7.3: Example of a map L-system




Figure 7.4: Oﬀsets between four regions that result from the division of two
regions sharing a common edge: (a) Z-oﬀset, (b) S-oﬀset




                                  →→→→
                        ω    :    ABCD
                                  →       →   → →
                        p1   :    A →     D [- A ] B
                                  →       →
                        p2   :    B →     B
                                  →       →   ← →
                        p3   :    C →     B [- A ] B
                                  →       →
                        p4   :    D →     C

       Figure 7.5: Example of a map L-system with directed edges
                 150                                      Chapter 7. Modeling of cellular layers

                 transforms edge D into C, so that in each derivation step there is a pair
                 of edges A and C to which productions p1 and p3 apply. Production p2
                 indicates that edges B do not undergo further changes.1 The resulting
                 structure is that of a clockwise spiral.


                 7.2        Graphical interpretation of maps
                 Maps are topological objects without inherent geometric properties. In
                 order to visualize them, some method for assigning geometric interpre-
                 tation must be applied. In its description, the biologically-motivated
                 terms cell and wall will be used instead of their mathematical counter-
                 parts, region and edge.
Wall                 Siero, Rozenberg and Lindenmayer [131] proposed a method that,
subdivision      in the simplest case, is expressed by the following rules:

                       • walls are represented by straight lines,
                       • the starting map is represented by a regular polygon, bounded by
                         the walls speciﬁed in the axiom,
                       • when a production subdivides a wall, all successor walls are of
                         equal length, and
                       • the position of a wall resulting from the union of two matching
                         markers is based on the position of these markers.

                     This wall subdivision method was used to draw Figures 7.2, 7.3 and
                 7.5. However, in a biological context it creates cells with shapes that
                 are seldom observed in nature.
Center of            De Does and Lindenmayer [24] proposed a center of gravity method
gravity method   that produces more realistic shapes. According to this method each
                 interior vertex of the map is placed at the center of gravity of its neigh-
                 bors. Such positioning of vertices has a sound biological justiﬁcation;
                 it minimizes hypothetical forces acting along cell walls, thus bringing
                 the entire structure to a state of minimum energy. However, if all ver-
                 tices were positioned this way, the entire structure would collapse. To
                 counteract this eﬀect, the vertices on the map perimeter are displaced
                 outward a ﬁxed distance. Unfortunately, this lacks biological justiﬁ-
                 cation and introduces sudden shape changes after cell divisions have
                 occurred, making it unsuitable for animation purposes.
Dynamic              Assuming a dynamic point of view, the shape of cells and thus the
method           shape of the entire organism results from the action of forces. The
                 unbalanced forces due to cell divisions cause the gradual modiﬁcation
                 of cell shapes until an equilibrium is reached. At this point, new cell
                 divisions occur, and the search for an equilibrium resumes.
                   1
                       In further L-systems such identity productions are omitted.
7.2. Graphical interpretation of maps                                     151

   The dynamic method is based on the following assumptions:
   • the modeled organism forms a single cell layer,
   • the layer is represented as a two-dimensional network of masses
     corresponding to cell vertices, connected by springs that corre-
     spond to cell walls,
   • the springs are always straight and obey Hooke’s law,
   • each cell exerts pressure on its bounding walls directly propor-
     tional to the wall length and inversely proportional to the cell
     area,
   • the pressure on a wall is divided evenly between the wall vertices,
   • the motion of masses is damped, and
   • no other forces (for example, due to friction or gravity) are con-
     sidered.
    The position of each vertex, and thus the shape of the layer, is com-
puted as follows. As long as an equilibrium is not reached, unbalanced
forces put masses in motion. The total force F T acting on a vertex X
is given by the formula

                            FT =         Fw + Fd ,
                                    w∈W

where F w are forces contributed by the set W of walls w incident to
X, and F d = −bv is a damping force, expressed as the product of a
damping factor b and vertex velocity v .
   A wall w ∈ W contributes three forces acting on X (Figure 7.6).
The tension F s acts along the wall, and its magnitude is determined by
Hooke’s law,
                             Fs = −k(l − l0 ),
where k is the spring constant, l is the current spring length, and l0 is
its rest length. The remaining forces, P L and P R , are due to the pressure
exerted by the cells on the left and right sides of the wall. Each force
acts in a direction perpendicular to the wall and is distributed equally
between the incident vertices. The magnitude of these forces equals
p · l, where p is the internal cell pressure and l is the wall length.
The pressure is assumed to be inversely proportional to the cell area:
p ∼ A−1 . This assumption is derived from the equation describing
osmotic pressure, p = SRT , as a function of the concentration of the
solute S (n moles per volume V ), the ideal gas constant R, and the
absolute temperature T [129]. Assuming that the cell volume V is
152                                          Chapter 7. Modeling of cellular layers




                   Figure 7.6: Forces acting on a cell vertex X

proportional to the area A captured by the two-dimensional model
under consideration (V = Ah), pressure can be expressed as
                                   nRT
                                       .p=
                                    Ah
Thus p ∼ A−1 , provided that the term nRT /h is constant. A convenient
formula for calculating the area A is
                                M
                       A=|           (xi − xi+1 )(yi + yi+1 )/2|,
                               i=1

where (xi , yi ) are coordinates of the M vertices of the cell, xM +1 = x1 ,
and yM +1 = y1 .
   The force F T acts on a mass placed at a map vertex. Newton’s
second law of motion applies,
                                 d2x
                                      = FT ,
                                      m
                                 dt2
where x is the vertex position. If the entire structure has N vertices, a
system of 2N diﬀerential equations is obtained,
                              dvi
                         mi        = FTi (x1 , · · · , xN , vi )
                               dt
                              dxi
                                   = vi ,
                              dt
 where i = 1, 2, . . . , N . The task is to ﬁnd the sequence of positions
x1 , . . . , xN at given time intervals, assuming that the functions F Ti and
 the initial values of all variables x10 , . . . , xN0 and v10 , . . . , vN0 are known.
 These initial values are determined as follows.
7.3. Microsorium linguaeforme                                          153

   • Coordinates of the vertices of the starting map are included in
     the input data for the simulation.
   • Positions of existing vertices are preserved through a derivation
     step. New vertices partition the divided walls into segments of
     equal length. The initial velocities of all vertices are set to zero.
    The system of diﬀerential equations with the initial values given
above represents an initial value problem. It can be solved numerically
using the forward (explicit) Euler method [41]. To this end, the dif-
ferential equations are rewritten using ﬁnite increments ∆vi , ∆xi and
∆t,
                             1   k                         
                  ∆vik =       FTi x1 , · · · , xNk , vik ∆t
                            mi
                 ∆xik   = vik ∆t,

where the superscripts k = 0, 1, 2, . . . indicate the progress of time,
t = k∆t. The position and velocity of a point i after time increment
∆t are expressed as follows:

                            vik+1 = vik + ∆vik
                           xik+1 = xik + ∆vxk

The iterative computation of the velocities vik and positions xik is car-
ried out for consecutive values of index k until all increments ∆vi and
∆xi fall below a threshold value. This indicates that the equilibrium
state has been approximated to the desired accuracy. The next deriva-
tion step is then performed. A system of equations corresponding to
the resulting map is created, and the search for an equilibrium state
resumes. In this way, the developmental process is simulated as periods
of continuous cell expansion, delimited by instantaneous cell divisions.
Continuity of cell shapes during divisions is preserved by the rule that
sets the initial positions of vertices.
    For example, Figure 7.7 illustrates the expansion of a structure gen-
erated by the L-system speciﬁed in Figure 7.3 in a derivation of length
4. Figure 7.7a shows the structure immediately after the insertion of
division walls, Figures 7.7b and c present intermediate wall positions,
and Figure 7.7d describes the ﬁnal structure at equilibrium.


7.3      Microsorium linguaeforme
In this section, the described simulation method is applied to visualize
the development of the fern gametophyte Microsorium linguaeforme.
The biological data is based on observations conducted by de Boer [22].
Fern gametophytes represent the sexually reproducing life stage of fern
                  154                                  Chapter 7. Modeling of cellular layers



                         a                                b




                         c                                d




                  Figure 7.7: Expansion of a cellular structure: (a) after division, (b) and (c)
                  intermediate positions, (d) equilibrium

                  plants. They show no diﬀerentiation into stem, leaf and root, forming
                  a plant body called a thallus. The development of a thallus can be
                  described conveniently in terms of the activity of the apical cell giving
                  rise to segments, and the development of these segments. The modeling
                  process captures repetitive patterns of cell divisions, so that large cel-
                  lular structures can be described using a small number of productions.
Apical activity       The apical cell is the originator of the gametophyte structure. It
                  divides repetitively, giving rise each time to a new apical cell and a
                  primary (initial) segment cell. The segment cells subsequently develop
                  into multicellular segments. The division wall of an apical cell is at-
                  tached to the thallus border on one side and to a previously created
                  division wall on the other side. Thus, the division walls are oriented al-
                  ternately to the left and to the right, yielding two columns of segments
                  separated by a zig-zag dividing line (Figure 7.8). The recursive nature
                  of the apical activity can be expressed by the following formula (called
                  a cell division system [22]):

                                   AL → SL | AR               AR → AL | SR
                  This notation means that the cell on the left side of the arrow produces
                  two daughter cells separated by a wall.
7.3. Microsorium linguaeforme                                           155




Figure 7.8: Apical production of segments. The labels AR and AL denote
apical cells producing right segment SR and left segment SL , respectively.
Dashed lines indicate the newly created division wall. The superscripts rep-
resent segment age. The internal structure of segments is not shown.




      Figure 7.9: Developmental sequence of a Microsorium segment



In describing the structure of a segment, we distinguish between pericli-      Division
nal and anticlinal walls. Intuitively, periclinal walls are approximately      pattern of
parallel to the apical front of the thallus, and anticlinal walls are per-     segments
pendicular to this front. A more formal deﬁnition follows.

   • In a primary segment, the apical front wall and one or more walls
     opposing it are periclinal walls. The remaining walls are anticlinal
     walls.
   • A division wall attached to two periclinal walls is an anticlinal
     wall, and vice-versa.

In Microsorium, a wall is never attached to a periclinal wall on one
side and an anticlinal wall on the other side, so the above deﬁnition
comprises all possible cases.
    Microscopic observations of growing Microsorium gametophytes re-
veal that most segments follow the same developmental sequence, shown
diagrammatically in Figure 7.9. The primary segment cell Q1 is ﬁrst
divided by a periclinal wall into two cells, Q2 and Q3 . Subsequently, the
156                              Chapter 7. Modeling of cellular layers




                                      C




                                             C

                                                  C

                                                      C




  Figure 7.10: Developmental sequence of a Microsorium gametophyte
7.3. Microsorium linguaeforme                                              157




          →← →
 ω    :   A Dxb                                  →            ← →
          →       ←    ← →                               ←
 l1   :   a →     A [+ b ] i            r1   :   A   →   a [− B ] I
          →       →    →        → →              →       →    →        → →
 l2   :   b →     e [− B ] x [+ h ] d   r2   :   B   →   E [+ b ] x [− H ] D
          →       →                              →       →
 l3   :   d →     f                     r3   :   D   →   F
          →       →    ←        → →              →       →    ←        → →
 l4   :   f →     g [− h ] x [+ h ] d   r4   :   F   →   G [+ H ] x [− H ] D
          →            →                         →            →
 l5   :   h →     x [− f ] x            r5   :   H   →   x [+ F ] x
          →       →                              →       →
 l6   :   i →     c                     r6   :   I   →   C
          →       →    ← →                       →       →    ← →
 l7   :   c →     i [+ f ] i            r7   :   C   →   I [− F ] I
          →                                      →
 l8   :   e →     x [+ x] x             r8   :   E   →   x [− x] x
          →                                      →
 l9   :   g →     x [− x] x [+ x] x     r9   :   G   →   x [+ x] x [− x] x



  Figure 7.10 (continued): Developmental sequence of Microsorium
                 158                                     Chapter 7. Modeling of cellular layers

                 basal cell Q3 is divided by another periclinal wall into two “terminal”
                 cells T that do not undergo further divisions. At the same time, the cell
                 Q2 lying on the thallus border is divided by an anticlinal wall into two
                 cells of type Q1 . Each of these cells divides in the same way as the pri-
                 mary cell. Consequently, the recursive nature of segment development
                 can be captured by the following cell division system:

                                    Q2                                                 T
                            Q1 →                   Q2 → Q1 | Q1                Q3 →
                                    Q3                                                 T


                 In the above rules, a horizontal bar denotes a periclinal wall between
                 cells, and a vertical bar denotes an anticlinal wall.
Development of        The development of the Microsorium thallus is a result of concur-
the thallus      rent divisions of the apical and segment cells. A single division of the
                 apical cell corresponds to a single step in segment development. A de-
                 velopmental sequence that combines the activity of the apex and the
                 segments is shown in Figure 7.10. This ﬁgure also reveals oﬀsets be-
                 tween neighboring walls. It can be assumed that periclinal division
                 walls form S-oﬀsets in the segments on the right side of the apex and
                 Z-oﬀsets in the segments on the left side.
Map L-system          In order to capture the development of Microsorium using the for-
                 malism of map L-systems, it is necessary to identify all combinations
                 of cells that may lie on both sides of a wall. Careful examination
                 of these combinations yields the wall labeling scheme shown in Fig-
                 ure 7.10. Two walls have the same label if and only if they divide in
                 the same way.2 The uppercase letters apply to right segment walls, and
                 the corresponding lowercase letters denote symmetric walls in the left
                 segments. A comparison of pairs of subsequent structures yields the
                 L-system in the ﬁgure.
                      Apical cell division results from the application of productions r1
                 and l2 (creation of a right segment) or l1 and r2 (creation of a left
                 segment). Subsequent cell divisions in right and left segments proceed
                 symmetrically. The development of a right segment is examined in
                 detail.
                      The insertion of wall segment B creates the ﬁrst cell Q1 of segment
                     (1)
                 SR (cf. Figure 7.8). Concurrently, wall D on the opposite side of the
                 segment is transformed into F (step 1). This transformation introduces
                 a one-step delay before the application of production r4 which, together
                 with r2 , splits cell Q1 into Q2 and Q3 by the ﬁrst periclinal wall H (step
                 2). As the derivation progresses, production r4 inserts subsequent per-
                 iclinal walls H between pairs of anticlinal walls F (step 4). Production
                    2
                     It is conceivable to formulate an algorithm that would assign labels consistent
                 with the above rule automatically. However, the labeling scheme given in Figure 7.10
                 was obtained “by hand.”
7.3. Microsorium linguaeforme                                        159




  Figure 7.11: Developmental sequence of a basal Microsorium segment


r3 introduces a delay needed to create walls F , which are inserted be-
tween periclinal walls H and apical walls I using productions r5 and r7 .
Production r6 plays a role analogous to r3 — it introduces a one-step
delay into the cycle which creates markers F at the apical front of the
segment. Thus, periclinal walls H and anticlinal walls F are produced
alternately, in subsequent derivation steps. The last two productions,
r8 and r9 , create terminal walls x that do not undergo further changes.
The ﬁrst such wall is inserted between walls labeled G and E during
derivation step 3. The subsequent walls x are inserted every second
step between pairs of walls G; only production r9 is applied in these
cases.
    The L-system in Figure 7.10 was formulated under the assumption         Basal segments
that all segments develop in the same way. However, in a real organism
the two oldest segments, situated at the thallus base, form a modiﬁed
pattern with less extensive cell divisions. The developmental sequence
of a right basal segment is shown in Figure 7.11. The corresponding
cell division system is given below.

                 Q2                                         T
          Q1 →                  Q2 → Q1 | T          Q3 →
                 Q3                                         T

    The development of a Microsorium gametophyte including basal
segments is captured by Figure 7.12. Only productions describing the
development of the right side of the thallus are given. Their prede-
cessors are denoted by uppercase letters. The corresponding lowercase
productions, which complete the L-system deﬁnition, can be obtained
by switching the “case” of letters and the orientation of markers. Wall
directions remain unchanged. For example, the right-side production

                                →     ←   →
                          rx : P → A[− b ]C
             160                                     Chapter 7. Modeling of cellular layers




                       →       ←    ← →                           →
              r1   :   A   →   a [− B ] I               r9    :   G   →   x [+ x] x [− x] x
                       →       →     →       → →                  →       →
              r2   :   B   →   E [+ b ] x [− H ] D      r10   :   J   →   L
                       →          → →                             →       →
              r3   :   D   →   [− M ] F                 r11   :   K   →   N
                       →       →     ←       → →                  →            ←
              r4   :   F   →   G [+ H ] x [− H ] D      r12   :   L   →   x [+ M ] x
                       →            →                             →            →
              r5   :   H   →   x [+ F ] x               r13   :   M   →   x [+ L ] x
                       →       →                                  →       →
              r6   :   I   →   C                        r14   :   N   →   O
                       →       →     ← →                          →            ← →
              r7   :   C   →   I [− F ] I               r15   :   O   →   x [+ L ] N
                       →
              r8   :   E   →   x [− x] x
             Figure 7.12: The initial map and productions for the right side of a Microso-
             rium linguaeforme with basal segments

             corresponds to the left-side production
                                               →       ←      →
                                          lx : p → a[+B ]c.

             Additional examples can be found by comparing the left and right
             columns of the L-system in Figure 7.10.
                 Assuming the starting map speciﬁed by Figure 7.12, a simulated
             developmental sequence interpreted using the dynamic method to de-
             termine cell shape is given in Figure 7.13. Diﬀerent colors are used
             to indicate the apical cell, the alternating “regular” segments, and the
Model        basal segments. A comparison of the last developmental stage with a
validation   photograph of a real gametophyte (Figure 7.14) shows good correspon-
             dence between the model and reality with respect to structure topology,
             the relative sizes and shapes of cells, and the overall shape of the thal-
             lus. This result is particularly interesting from a biological perspective,
             since it indicates that genetically controlled cell division patterns play
             an important role in determining the shape of a structure.
7.3. Microsorium linguaeforme                                        161




    Figure 7.13: Simulated development of Microsorium linguaeforme




Figure 7.14: Microphotograph of Microsorium linguaeforme at magniﬁcation
70x
               162                                Chapter 7. Modeling of cellular layers




                      Figure 7.15: Developmental sequence of a Dryopteris segment


               7.4      Dryopteris thelypteris
               Gametophytes of other fern species follow a similar developmental pat-
               tern, with the apex producing segments alternately to the left and
               right. However, the cell division patterns within segments vary between
               species yielding diﬀerent thalli shapes. For example, Figure 7.15 shows
               segment development in Dryopteris thelypteris. The corresponding cell
               division system is given below.
                            Q2             Q4               T
                     Q1 →           Q2 →             Q3 →            Q4 → Q1 | Q1
                            Q3             Q3               T
                   A developmental cycle of length 3, starting at cell Q1 , produces
               two new cells Q1 separated by an anticlinal wall and a sequence of
               four terminal cells T separated by periclinal walls. A developmental
               sequence that combines the activity of the apex and the segments is
               shown in Figure 7.17. As in the case of the map L-system in Figure 7.12,
               only productions for the right side of the thallus are shown.
Map L-system       Apical cell division results from the application of productions r1
               and l2 (creation of a right segment) or l1 and r2 (creation of a left
               segment). The subsequent cell divisions proceed in a symmetric way
               in right and left segments. The development of a right segment is
               described below.
                   The insertion of wall segment B creates the ﬁrst cell Q1 of segment
                  (1)
               SR (cf. Figure 7.8). Concurrently, wall D on the opposite side of
               the segment is transformed by production r6 into F G (step 1). This
               transformation introduces a one-step delay before the application of
               production r7 which, together with r2 , splits cell Q1 into Q2 and Q3 by
               the ﬁrst periclinal wall x (step 2). Meanwhile, production r3 replaces
               wall C by wall J (step 1), after which r4 replaces J by E (step 2). This
               introduces a two-step delay before cell Q3 is subdivided periclinally into
               two cells T by production r5 (step 3). In the same step, productions r6
               and r9 subdivide cell Q2 into cells Q3 and Q4 , separated by periclinal
               wall H. Wall O from step 1 is transformed into wall R by productions
7.4. Dryopteris thelypteris                                             163




       Figure 7.16: Simulated development of Dryopteris thelypteris


r15 (step 2) and r16 (step 3). Walls R and H are replaced by r17 and
r14 , resulting in the ﬁrst anticlinal division of cell Q4 into two cells Q1
by wall I (step 4). At the same time, productions r5 and r6 split cell
Q3 periclinally into two cells T . In the following derivation steps, each
of the newly created cells Q1 undergoes a sequence of changes similar
to that described above. Production r8 introduces a one-step delay
before Q1 is subdivided into Q2 and Q3 using r9 and r10 (analogous
to r2 and r7 ). Productions r11 and r12 play a role similar to r5 and
r6 , while production r13 introduces a delay. Walls labeled x do not
undergo further changes and cells T do not subdivide. A simulated
developmental sequence generated by the L-system in Figure 7.17 using
the dynamic method to determine cell shape is given in Figure 7.16.
     A comparison of Microsorium and Dryopteris gametophytes (either           Microsorium
real or modeled) indicates that diﬀerent division patterns of segment          vs. Dryopteris
cells have a large impact on the overall thalli shapes. In Microsorium,
the number of marginal cells, situated at the apical front of a segment, is
doubled every second derivation step. The segments are approximately
triangular, with a wide apical front, which results in the circular thallus
shape. The apical front of Dryopteris segments is comparatively less
developed. The number of marginal cells is doubled only every third
step, and the segments grow faster in length. The resulting thallus
shape is concave.
164                                                                   Chapter 7. Modeling of cellular layers

                      A


                      IR

              b                              D                                                                             a

                                C
                                                                                                                                                     O
                                                                                                                       IL
                                                                                               d                                       B
                  (0)                                                                                                                                G
                                                                                                                                   Q1
                                                                                                           c                                 F
                                    A
                                                                                                                       e               J
              o
                                    IR                                     P
                           b                                  D                                                            (1)
             g
                           Q1                                 Q2
                                                  C       x                    K
                  f
                                                                           J
                           j             E       Q3               x
                                x                         x
                                         x            E
                                                                                                   a

                                (2)                                                                                                O
                                                              p                                IL
                                                                                                                                                 R
                                                                           d                                    B                   G
                                                                      Q2                                       Q1                           Q4
                                                          k                            c                                               H
                                                                               x                                           F
                                                                  j                                                                                  D
                                                                                   Q3 e                                        Q3                C
                                                                       x                                       J           x
                                                                                                                                            E
                                                                               x                       x
                                                                                                               T                        E
                                                                                   e           x           x                       x
                                                                                           x           T                       x
                                                                                                                       x
                                                                                                    x              x



                                                                                                   (3)




      Figure 7.17: Developmental sequence of a Dryopteris gametophyte
7.4. Dryopteris thelypteris                                                 165




          →←←→
 ω    :   ADCb                                  →       →               →
          →      ←    ← →             r10   :   I   →   L [+ x] x [− x] M
 r1   :   A →    a [− B ] O                     →
          →      →    → →         →   r11   :   L   →   x [+ x] x [− x] x
 r2   :   B →    E [+ b ] C [− x] D             →       →    ←        → →
          →      ←                    r12   :   M   →   L [+ H ] x [− H ] N
 r3   :   C →    J                              →       →
          →      →                    r13   :   N   →   I
 r4   :   J →    E                              →            →
          →                           r14   :   H   →   x [+ I ] x
 r5   :   E →    x [− x] x                      →       →
          →      →    → →             r15   :   O   →   P
 r6   :   D →    F [− H ] G                     →       →
          →                      ←    r16   :   P   →   Q
 r7   :   F →    x [+ x] x [− x] J              →       →    ← →
 r8   :
          →
          G →
                 →
                 K                    r17   :   Q   →   O [− I ] O
          →      →    ← →         →
 r9   :   K →    E [+ H ] C [− x] D


   Figure 7.17 (continued): Developmental sequence of Dryopteris
                  166                                 Chapter 7. Modeling of cellular layers

                      In order to quantify the relationship between segment cell division
                  pattern and thallus shape, de Boer [22] proposed an empirical measure
                  called periclinal ratio. It is based on the following considerations:
                        • anticlinal growth takes place mainly along the margin and is ex-
                          ponential since all marginal cells divide; and
                        • periclinal growth of a segment is linear, as cells displaced away
                          from the margin eventually stop dividing.
                  Since the division pattern is recursive, the average ratio of the numbers
                  of marginal cells in neighboring segments converges to a constant A.
                  Similarly, the diﬀerence between the numbers of cells along the pericli-
                  nal boundary of two neighboring segments converges to a constant P .
                  By computer simulation [22], it was found that if the periclinal ratio
                  P/A is smaller than 1.25, the apical front is convex as in the case of
                  Microsorium linguaeforme. In contrast, if P/A is larger than 2.0, the
                  simulated structure develops a concave apical front, corresponding to a
                  heart-shaped thallus as in Dryopteris thelypteris. These results relate
                  local growth to global shape. Periclinal ratios from 1.25 to 2.0 were not
                  studied in detail.


                  7.5        Modeling spherical cell layers
                  Although the scope of this book is limited to plants, it is interesting
                  to note that the formalism of L-systems can be applied also to simu-
                  late some developmental processes in animals. For example, during the
Animal            cleavage stage of development, an animal embryo consists of a single
embryos           layer of cells that covers the surface of a spherical cavity. This structure
                  is known as the blastula [6]. The cells divide synchronously in a regular
                  pattern up to and including the 64-cell stage (6th cleavage). This devel-
                  opment can be captured using an mBPMOL-system operating on the
                  surface of a sphere rather than on a plane. To this end, cell walls are
                  represented as great circle arcs connecting vertices that are constrained
                  to the sphere surface.
                      The extension of the dynamic interpretation method from the plane
                  to the surface of a sphere requires few changes. Osmotic pressure and
                  wall tension are calculated as before. Since the resulting force may
                  displace a vertex away from the surface of the sphere, the actual vertex
                  position is found by projecting the displaced point back to the sphere.
                  During the cleavage stage, cells of embryos do not expand, thus the
                  overall size of the sphere is constant.
Patella vulgata       For example, deBoer [22] proposed the map L-system in Figure 7.18
                  to model the development of a snail embryo, Patella vulgata, according
                  to data presented by Biggelaar [150]. The starting map and develop-
                  mental sequence are shown in Figure 7.18, while Figure 7.19 presents
                  an alternative rendering. Each cell is approximated by a sphere cen-
                  tered at the point obtained by raising the center of gravity of the cell
7.5. Modeling spherical cell layers                                   167




                      p1    :   A   →   b[−a]x[+a]b
                      p2    :   a   →   B[+A]x[−A]B
                      p3    :   B   →   a
                      p4    :   b   →   A
                                →       →      →
                      p5    :   C   →   D [+a] E
                                →       →
                      p6    :   D   →   C [−A]x
                                →       →
                      p7    :   E   →   C
                                        ←           →
                      p8    :   F   →   E [−a]G[+a] E
                      p9    :   G   →   J
                      p10   :   H   →   I
                      p11   :   I   →   B[−A]x[+A]B
                      p12   :   J   →   b[+a]x[−a]b
                                        →           ←
                      p13   :   Z   →   C [−F]H[+F] C

 Figure 7.18: Developmental sequence of Patella vulgata (equatorial view)
            168                                  Chapter 7. Modeling of cellular layers

            vertices to the surface of the underlying spherical cavity. The radius is
            the maximum distance from the center of gravity to the cell vertices.
            A comparison of the Patella model at the 16-cell stage (bottom left
            of Figure 7.19) with an electron microscope image (Figure 7.20) shows
            good correspondence between the model and reality.


            7.6        Modeling 3D cellular structures
Cellworks   The previous sections presented a method for modeling cellular lay-
            ers extending in a plane or on the surface of a sphere. However, real
            cellular structures are three-dimensional objects. In order to capture
            the three-dimensional aspect of cellular layers and model more complex
            structures, Lindenmayer [85] proposed an extension of map L-systems
            called cellwork L-systems. The notion of a cellwork is characterized as
            follows.
                  • A cellwork is a ﬁnite set of cells. Each cell is surrounded by one
                    or more walls (faces).
                  • Each wall is surrounded by a boundary consisting of a ﬁnite,
                    circular sequence of edges that meet at vertices.
                  • Walls cannot intersect without forming an edge, although there
                    can be walls without edges (in the case of cells shaped as spheres
                    or tori).
                  • Every wall is part of the boundary of a cell, and the set of walls
                    is connected.
                  • Each edge has one or two vertices associated with it. The edges
                    cannot cross without forming a vertex, and there are no vertices
                    without an associated edge.
                  • Every edge is a part of the boundary of a wall, and the set of
                    edges is connected.
            Note that the terms cell and wall have diﬀerent meanings in the context
            of cellworks than in the context of maps.
mBPCOL-         The development of three-dimensional structures is captured using
system      an extension of mBPMOL-systems called marker Binary Propagating
            Cellwork OL-systems [42]. An mBPCOL-system G is deﬁned by a ﬁnite
            alphabet of edge labels Σ, a ﬁnite alphabet of wall labels Γ, a starting
            cellwork ω, and a ﬁnite set of edge productions P . The initial cellwork ω
            is speciﬁed by a list of walls and their bounding edges. As in the case of
            mBPMOL-systems, edges may be directed or neutral. Each production
            is of the form A : β → α, where the edge A ∈ Σ is the predecessor, the
            string β ∈ {Γ+ , ∗} is a list of applicable walls (* denotes all walls), and
            the string α is the successor, which is composed of edge labels from Σ,
7.6. Modeling 3D cellular structures                                 169




          Figure 7.19: Simulated development of Patella vulgata




      Figure 7.20: An electron microscope image of Patella vulgata
             170                               Chapter 7. Modeling of cellular layers




                           Figure 7.21: The phases of a derivation step

             wall labels from Γ and the symbols [ and ]. The symbols outside square
             brackets describe the subdivision pattern for the predecessor. Pairs of
             matching brackets [ and ] delimit markers that specify possible attach-
             ment sites for new edges and walls. As in the two-dimensional case,
             arrows indicate the relative directions of successor edges and markers
             with respect to the predecessor edge. The list β contains all walls into
             which a marker should be inserted. In addition to the labels for edges
             and markers, a production successor speciﬁes the labels of walls that
             may be created as a result of a derivation step.
Production       The syntax of a production is best explained using an example. The
syntax       production
                                     →         →← → →
                                     A : 14 → DC 2 [E 5 ]B 3 F
             applies to an edge A if it belongs to one or more walls labeled 1 or
             4 (Figure 7.21a). The predecessor edge is subdivided into four edges
             D, C, B and F . During a derivation step, marker E is introduced
             into all walls of type 1 or 4 that share edge A (Figure 7.21b), and
             can be connected with a matching marker inserted into the same wall
             by another production. As a result, the wall will split into two. The
             daughter wall having C as one of its edges will be labeled 2, and the
             wall having B as an edge will be labeled 3 (Figure 7.21c). Markers E
             can be connected only if both productions assign labels to the daughter
             walls in a consistent way. Otherwise, the markers are considered non-
             matching and are discarded. If several walls bounding a cell split in
             such a way that the sequence of new edges forms a closed contour, a
7.6. Modeling 3D cellular structures                                     171




           Figure 7.22: Example of consistent edge productions

new wall bound by these edges may be created. In order for this to
occur, all markers involved must specify the same label for the new
wall, 5 in this example (Figure 7.21d).
   The limitation of the scope of a production to speciﬁc walls may
create a consistency problem while rewriting edges. For instance, as-
sume that walls 1 and 2 share edge A and the following productions
are in P :
                                 →           →←
                           p1 : A : 1 → C E
                                →         →
                           p2 : A : 2 → AB
Productions p1 and p2 are inconsistent since they specify two diﬀerent
partitions of the same edge. It is assumed that the mBPCOL-systems
under consideration are free of such inconsistencies. This does not
preclude the possibility of applying several productions simultaneously
to the same edge. For example, a production pair,
                             →           →   →   ←
                       p1 : A : 1 → C 2 [F 3 ]E 4
                            →       → ← ←
                       p2 : A : 2 → C 5 [D6 ]E 7 ,
consistently divides edge A into segments C and E, although the mark-
ers inserted into walls 1 and 2 are diﬀerent (Figure 7.22).
    According to the above discussion, a derivation step in an mBPCOL-          Derivation
system consists of three phases.
   • Each edge in the cellwork is replaced by successor edges and mark-
     ers using one or more productions in P .
   • Each wall is scanned for matching markers. If a match inducing
     a consistent labeling of daughter cells is found, the wall is subdi-
     vided. The selection of matching markers is done by the system.
     Unused markers are discarded.
   • Each cell is scanned for a circular sequence of new division edges.
     If a cycle assigning the same label to the division wall is found, it is
     used to bound the wall that will divide the cell into two daughter
     cells. If diﬀerent possibilities exist, the edges are selected by the
     system.
                 172                                  Chapter 7. Modeling of cellular layers




                                         p1 :   A : 1 →       B1 [A2 ]B1
                                         p2 :   A : 2 →       B2 [C2 ]B2
                                         p3 :   B : * →       A

                                  Figure 7.23: Example of a cellwork L-system

                 A wall may be subdivided more than once as long as new division edges
                 do not intersect and a consistent labeling of daughter walls is possible.
                 In contrast, a cell may be divided only once in any derivation step.
Example              For example, Figure 7.23 presents a three-dimensional extension of
                 the map L-system from Figure 7.2. In the ﬁrst derivation step, produc-
                 tion p1 divides walls labeled 1, and production p2 divides walls labeled
                 2. The inserted edges form a cycle that divides the cell with a new wall
                 labeled 2. In the subsequent steps this process is repeated, generating
                 a pattern of alternating division walls. Production p3 introduces the
                 necessary delay.
Dynamic              The dynamic method for interpreting map L-systems is extended to
interpretation   cellwork L-systems using the following assumptions:
                       • the structure is represented as a three-dimensional network of
                         masses corresponding to cell vertices, connected by springs which
                         correspond to cell edges,
                       • the springs are always straight and obey Hooke’s law,
                       • for the purpose of force calculations, walls can be approximated
                         by ﬂat polygons,
                       • the cells exert pressure on their bounding walls; the pressure on
                         a wall is directly proportional to the wall area and inversely pro-
                         portional to the cell volume,
7.6. Modeling 3D cellular structures                                      173

   • the pressure on a wall is divided evenly between the wall vertices,
   • the motion of masses is damped, and
   • other forces are not considered.
   The total force F T acting on a vertex X is given by the formula

                       FT =         Fe +         Fw + Fd ,
                               e∈E           w∈W

 where F e are forces contributed by the set of edges E incident to X,
F w are forces contributed by the set of walls W incident to X, and
F d = −bv is a damping force. The forces F e act along the cell edges and
 represent wall tension. The forces F w are due to the pressure exerted
 by the cells on their bounding walls. The total force of pressure P
 exerted by a cell on a wall w has direction normal to w and is equal
 to p · A, where p is the internal cell pressure and A is the wall area.
 Calculation of the polygon area proceeds as in the two-dimensional
 case. The pressure p is assumed to be inversely proportional to the
 cell volume, p ∼ V −1 , which corresponds to the equation describing
 osmotic pressure (Section 7.2). The volume V of a cell is calculated by
 tesselating the cell into tetrahedra. The resulting diﬀerential equations
 are formed and solved as in the two-dimensional case.
     A division pattern that frequently occurs in epidermal cell structures      Epidermal cells
 is described by the L-system in Figure 7.24, based on a cyclic cellwork
 L-system (a slightly diﬀerent formalism) proposed by Lindenmayer [85].
 Productions p1 , p2 , p6 and p7 are responsible for cell divisions, while the
 remaining productions introduce delays such that the division pattern
 is staggered.
     On the surface, the cellular structures analyzed in this chapter may
 appear quite unrelated to the models discussed previously. However,
 a closer inspection reveals many analogies. For example, consecutively
 created segments of a fern gametophyte exhibit a phase eﬀect corre-
 sponding to that observed in inﬂorescences. Furthermore, parts of an
 older gametophyte situated near the apex have the same topology as
 the entire thallus at an earlier developmental stage, which associates
 the recursive structures generated by map or cellwork L-systems with
 self-similar patterns created using string L-systems. As observed by
 Oppenheimer [105], self-similarity appears to be one of the general prin-
 ciples organizing the world of botany. The next chapter discusses this
 topic in more detail.
174                                     Chapter 7. Modeling of cellular layers




                     p1   :   A : 123   →   C3 [E1 ]B2 [D1 ]C3
                     p2   :   A:4       →   CB4 [F1 ]C4
                     p3   :   B:∗       →   A
                     p4   :   C:∗       →   B
                     p5   :   E:∗       →   D
                     p6   :   F : 123   →   HGH
                     p7   :   F:4       →   H4 [F1 ]G4 [F1 ]H4
                     p8   :   G:∗       →   F
                     p9   :   H:∗       →   G

Figure 7.24: Developmental sequence of epidermal cells: (a) The starting
cellwork; (b), (d) and (f) cellworks immediately after cell divisions; (c), (e)
and (g) the corresponding cellworks at equilibrium
Chapter 8

Fractal properties of plants

What is a fractal? In his 1982 book, Mandelbrot deﬁnes it as a set with      Fractals vs.
Hausdorﬀ-Besicovitch dimension DH strictly exceeding the topological         ﬁnite curves
dimension DT [95, page 15]. In this sense, none of the ﬁgures presented
in this book are fractals, since they all consist of a ﬁnite number of
primitives (lines or polygons), and DH = DT . However, the situation
changes dramatically if the term “fractal” is used in a broader sense [95,
page 39]:

      Strictly speaking, the triangle, the Star of David, and the
      ﬁnite Koch teragons are of dimension 1. However, both
      intuitively and from the pragmatic point of view of the sim-
      plicity and naturalness of the corrective terms required, it is
      reasonable to consider an advanced Koch teragon as being
      closer to a curve of dimension log 4/log 3 than to a curve
      of dimension 1.

    Thus, a ﬁnite curve can be considered an approximate rendering
of an inﬁnite fractal as long as the interesting properties of both are
closely related. In the case of plant models, this distinctive feature is
self-similarity.
    The use of approximate ﬁgures to illustrate abstract concepts has a      Fractals vs.
long tradition in geometry. After all, even the primitives of Euclidean      plants
geometry — a point and a line — cannot be drawn exactly. An in-
teresting question, however, concerns the relationship between fractals
and real biological structures. The latter consist of a ﬁnite number of
cells, thus are not fractals in the strict sense of the word. To consider
real plants as approximations of “perfect” fractal structures would be
acceptable only if we assumed Plato’s view of the supremacy of ideas
over their mundane realization. A viable approach is the opposite one,
to consider fractals as abstract descriptions of the real structures. At
ﬁrst sight, this concept may seem strange. What can be gained by             Complexity of
reducing an irregular contour of a compound leaf to an even more ir-         fractals
regular fractal? Would it not be simpler to characterize the leaf using
              176                                 Chapter 8. Fractal properties of plants

              a smooth curve? The key to the answer lies in the meaning of the term
              “simple.” A smooth curve may seem intuitively simpler than a fractal,
              but as a matter of fact, the reverse is often true [95, page 41]. Accord-
              ing to Kolmogorov [80], the complexity of an object can be measured
              by the length of the shortest algorithm that generates it. In this sense,
              many fractals are particularly simple objects.
Previous          The above discussion of the relationship between fractals and plants
viewpoints    did not emerge in a vacuum. Mandelbrot [95] gives examples of the re-
              cursive branching structures of trees and ﬂowers, analyzes their
              Hausdorﬀ-Besicovitch dimension and writes inconclusively “trees may
              be called fractals in part.” Smith [136] recognizes similarities between
              algorithms yielding Koch curves and branching plant-like structures,
              but does not qualify plant models as fractals. These structures are pro-
              duced in a ﬁnite number of steps and consist of a ﬁnite number of line
              segments, while the “notion of fractal is deﬁned only in the limit.” Op-
              penheimer [105] uses the term “fractal” more freely, exchanging it with
              self-similarity, and comments: “The geometric notion of self-similarity
              became a paradigm for structure in the natural world. Nowhere is this
              principle more evident than in the world of botany.” The approach pre-
              sented in this chapter, which considers fractals as simpliﬁed abstract
              representations of real plant structures, seems to reconcile these previ-
              ous opinions.
Fractals in       But why are we concerned with this problem at all? Does the no-
botany        tion of fractals provide any real assistance in the analysis and modeling
              of real botanical structures? On the conceptual level, the distinctive
              feature of the fractal approach to plant analysis is the emphasis on
              self-similarity. It oﬀers a key to the understanding of complex-looking,
              compound structures, and suggests the recursive developmental mech-
              anisms through which these structures could have been created. The
              reference to similarities in living structures plays a role analogous to the
              reference to symmetry in physics, where a strong link between conser-
              vation laws and the invariance under various symmetry operations can
              be observed. Weyl [159, page 145] advocates the search for symmetry
              as a cognitive tool:

                    Whenever you have to deal with a structure-endowed entity
                    Σ, try to determine its group of automorphisms, the group
                    of those element-wise transformations which leave all struc-
                    tural relations undisturbed. You can expect to gain a deep
                    insight into the constitution of Σ in this way.

                  The relationship between symmetry and self-similarity is discussed
              in Section 8.1. Technically, the recognition of self-similar features of
              plant structures makes it possible to render them using algorithms de-
              veloped for fractals as discussed in Section 8.2.
8.1. Symmetry and self-similarity                                         177




Figure 8.1: The Sierpiński gasket is closed with respect to transformations
T1 , T2 and T3 (a), but it is not closed with respect to the set including the
inverse transformations (b).


8.1      Symmetry and self-similarity

The notion of symmetry is generally deﬁned as the invariance of a con-
ﬁguration of elements under a group of automorphic transformations.
Commonly considered transformations are congruences, which can be
obtained by composing rotations, reﬂections and translations. Could
we extend this list of transformations to similarities, and consider self-
similarity as a special case of symmetry involving scaling operations?
    On the surface, this seems possible. For example, Weyl [159, page 68]
suggests: “In dealing with potentially inﬁnite patterns like band orna-
ments or with inﬁnite groups, the operation under which a pattern is
invariant is not of necessity a congruence but could be a similarity.”
The spiral shapes of the shells Turritella duplicata and Nautilus are
given as examples. However, all similarities involved have the same
ﬁxed point. The situation changes dramatically when similarities with
diﬀerent ﬁxed points are considered. For example, the Sierpiński gasket
is mapped onto itself by a set of three contractions T1 , T2 and T3 (Fig-
ure 8.1a). Each contraction takes the entire ﬁgure into one of its three
main components. Thus, if A is an arbitrary point of the gasket, and
T = Ti1 Ti2 . . . Tin is an arbitrary composition of transformations T1 , T2
and T3 , the image T (A) will belong to the set A. On the other hand,
if the inverses of transformations T1 , T2 and T3 can also be included
in the composition, one obtains points that do not belong to the set A
nor its inﬁnite extension (Figure 8.1b). This indicates that the set of
transformations that maps A into itself forms a semigroup generated
by T1 , T2 and T3 , but does not form a group. Thus, self-similarity is a
weaker property than symmetry, yet it still provides a valuable insight
into the relationships between the elements of a structure.
                178                               Chapter 8. Fractal properties of plants




                           Figure 8.2: The fern leaf from Barnsley’s model [7]


                8.2     Plant models and iterated function sys-
                        tems
                Barnsley [7, pages 101–104] presents a model of a fern leaf (Figure 8.2),
                generated using an iterated function system, or IFS. This raises a ques-
                tion regarding the relationship between developmental plant models
                expressed using L-systems and plant-like structures captured by IFSes.
                This section brieﬂy describes IFSes and introduces a method for con-
                structing those which approximate structures generated by a certain
                type of parametric L-system. The restrictions of this method are ana-
                lyzed, shedding light on the role of IFSes in the modeling of biological
                structures.
IFS deﬁnition       By deﬁnition [74], a planar iterated function system is a ﬁnite set
                of contractive aﬃne mappings T = {T1 , T2 , . . . , Tn } which map the
                plane R × R into itself. The set deﬁned by T is the smallest nonempty
                set A, closed in the topological sense, such that the image y of any
                point x ∈ A under any of the mappings Ti ∈ T also belongs to A.
                It can be shown that such a set always exists and is unique [74] (see
                also [118] for an elementary presentation of the proof). Thus, starting
                from an arbitrary point x ∈ A, one can approximate A as a set of
                images of x under compositions of the transformations from T . On
8.2. Plant models and iterated function systems                                   179




Figure 8.3: A comparison of three attracting methods for the rendering of
a set deﬁned by an IFS: (a) deterministic method using a balanced tree of
depth n = 9 with the total number of points N1 = 349, 525, (b) deterministic
method using a non-balanced tree with N2 = 198, 541 points, (c) stochastic
method with N3 = N2 points


the other hand, if the starting point x does not belong to A, the con-
secutive images of x gradually approach A, since all mappings Ti are
contractions. For this reason, the set A is called the attractor of the
IFS T . The methods for rendering it are based on ﬁnding the images                      Rendering
Tik (Tik−1 (. . . (Ti1 (x)) . . .)) = xTi1 . . . Tik−1 Tik , and are termed attracting   methods
methods. According to the deterministic approach [123], a tree of trans-
formations is constructed, with each node representing a point in A.
Various strategies, such as breadth-ﬁrst or depth-ﬁrst, can be devised to
traverse this tree and produce diﬀerent intermediate results [60]. If the
transformations in T do not have the same scaling factors (Lipschitz
constants), the use of a balanced tree yields a non-uniform distribu-
tion of points in A. This eﬀect can be eliminated by constructing a
non-balanced tree, using a proper criterion for stopping the extension
of a branch [60]. An alternative approach for approximating the set A
is termed the chaos game [7] (see also [107, Chapter 5]). In this case,
only one sequence of transformations is constructed, corresponding to
a single path in the potentially inﬁnite tree of transformations. The
transformation applied in each derivation step is selected at random.
In order to achieve a uniform distribution of points in the attractor,
the probability of choosing transformation Ti ∈ T is set according to
its Lipschitz constant. Figure 8.3 illustrates the diﬀerence between the
stochastic and deterministic methods of rendering the attractor. The
               180                               Chapter 8. Fractal properties of plants

               underlying IFS consists of four transformations, given below using ho-
               mogeneous coordinates [40]:

                                                             
                                           0.00 0.00 0.00
                                    T1 =  0.00 0.16 0.00 
                                           0.00 0.00 1.00
                                                                 
                                            0.20 0.23 0.00
                                    T2 =  −0.26 0.22 0.00 
                                            0.00 1.60 1.00
                                                                 
                                          −0.15 0.26 0.00
                                    T3 =  0.28 0.24 0.00 
                                           0.00 0.44 1.00
                                                                 
                                           0.85 −0.04 0.00
                                    T4 =  0.04  0.85 0.00 
                                           0.00  1.60 1.00

                   Other methods for the rendering of the set A, deﬁned by an inter-
               ated function system T , include the repelling or escape-time method
               and the distance method [60, 118]. Both methods assign values to
               points outside of A. The ﬁrst method determines how fast a point is
               repelled from A to inﬁnity by the set of inverse transformations Ti−1 ,
               where Ti ∈ T . An example of the application of this method, with
               escape time values represented as a height ﬁeld, is shown in Figure 8.4.
               The second method computes the Euclidean distance of a point from
               the attractor A.
IFS                The problem of constructing an IFS that will approximate a branch-
construction   ing structure modeled using an L-system can now be considered. This
               discussion focuses speciﬁcally on structures that develop in a biologi-
               cally justiﬁable way, by subapical branching (Section 3.2). The com-
               pound leaf shown in Figure 5.11a on page 129 will be used as a working
               example. In this case, the apical delay D is equal to zero, and the
               L-system can be represented in the simpliﬁed form:
                             ω : A
                             p1 : A     : ∗ → F (1)[+A][−A]F (1)A                  (8.1)
                             p2 : F (a) : ∗ → F (a ∗ R)



                                  Figure 8.4: Fern dune           -
8.2. Plant models and iterated function systems   181
182                                 Chapter 8. Fractal properties of plants




Figure 8.5: Initial sequences of structures generated by the L-systems spec-
iﬁed in equations (8.1) and (8.2)

This L-system operates by creating segments of constant size, then
increasing their length by constant factor R in each derivation step
(Figure 8.5a). As discussed in Section 1.10.3, a structure with the
same proportions can be obtained by successively appending segments
of decreasing length (Figure 8.5b):

   ω : A(1)
   p1 : A(s) : ∗ → F (s)[+A(s/R)][−A(s/R)]F (s)A(s/R)                 (8.2)

   Let An (s) denote the structure generated by module A(s) in n ≥ 1
derivation steps. According to production p1 , the following equality
holds:
      An (s) = F (s)[+An−1 (s/R)][−An−1 (s/R)]F (s)An−1 (s/R)         (8.3)
8.2. Plant models and iterated function systems                        183




Figure 8.6: Illustration of equation (8.4), with µ1 = F (1) − (45) and µ2 =
[−(45)F (0.5)]F (0.5)

It is important to clearly distinguish between a parametric word µ (a         Properties of
string of modules) and its turtle interpretation J (µ) (a set of points in    turtle
the plane). The symbol M(µ) will be used to denote the transformation         interpretation
induced by µ. This transformation moves the turtle from its initial
position and orientation to those resulting from the interpretation of
word µ. According to the deﬁnition of turtle interpretation (Chapter 1),
if a word µ is decomposed into subwords µ1 and µ2 such that µ2 does
not contain unbalanced right brackets, then

               J (µ) = J (µ1 µ2 ) = J (µ1 ) ∪ J (µ2 )M(µ1 ).         (8.4)
See Figure 8.6 for an illustration. By applying equation (8.4) to (8.3),
we obtain


             J (An (s)) = J (F (s)) ∪
                          J (An−1 (s/R))M(F (s)+) ∪
                          J (An−1 (s/R))M(F (s)−) ∪                  (8.5)
                          J (F (s))M(F (s)) ∪
                          J (An−1 (s/R))M(F (s)F (s)),

which is true for any n ≥ 1. Now let A(s) be the limit of the sequence        Passage to
of sets J (An (s)) from equation 8.6,                                         inﬁnity

                          A(s) = n→∞
                                  lim J (An (s)).

At the limit we obtain:

               A(s) = J (F (2s)) ∪ A(s/R)(T1 ∪ T2 ∪ T3 ),         (8.6)
                 184                                  Chapter 8. Fractal properties of plants

                 where T1 = T (F (s)+), T2 = T (F (s)−), and T3 = T (F (2s)). Let
                 S(s/R) be the operation of scaling by s/R, then

                                           A(s/R) = A(s)S(s/R).
                 By noting Ti = Ti S(s/R) for i = 1, 2, 3, equation (8.6) can be trans-
                 formed to

                                   A(s) = J (F (2s)) ∪ A(s)(T1 ∪ T2 ∪ T3 ).                (8.7)
                 The solution of this equation with respect to A(s) is

                                      A(s) = J (F (2s))(T1 ∪ T2 ∪ T3 )∗ ,                  (8.8)
                 where (T1 ∪ T2 ∪ T3 )∗ stands for the iteration of the union of transfor-
                 mations T1 , T2 and T3 . Equation (8.8) suggests the following method
                 for constructing the set (A(s)):
                       • create segment J (F (2s))
                       • create images of J (F (2s)) using transformations T1 , T2 , T3 and
                         their compositions
                      Equation (8.7) and the method of constructing the set A(s) based
                 on equation (8.8) are closely related to the deﬁnition of iterated function
                 systems stated at the beginning of this chapter. However, instead of
                 starting from an arbitrary point x ∈ A(s), the iteration begins with
                 the set J (F (2s)). Although this is simply a straight line segment, a
                 question arises as to how its generation can be incorporated into an
                 IFS. Two approaches can be distinguished.
Controlled IFS        The ﬁrst approach is related to the notions of hierarchical iterated
                 function systems discussed by Reuter [123] and recurrent IFSes intro-
                 duced recently by Barnsley [8]. The line segment J (F (2s)) is gener-
                 ated using an IFS, for example consisting of two scaling transformations
                 Q1 and Q2 which map it onto its upper and lower half (Figure 8.7a).
                 Subsequently, transformations T1 , T2 and T3 are applied to create other
                 points of the set A(s). The order of transformation application is im-
                 portant. Transformations Q1 and Q2 are used solely for the purpose
                 of initial segment creation. They must not be applied after T1 , T2 or
                 T3 , since in this case they would aﬀect the branching structure under
                 consideration. The admissible sequences of transformations can be de-
                 ﬁned using a directed control graph (Figure 8.7b), and correspond to
                 the inﬁnite set of paths starting at node a.1 The term controlled it-
                 erated function system (CIFS) denotes an IFS with restrictions on the
                 transformation sequences imposed by a control graph. Thus, noting
                 the angle increment associated with symbols + and − by δ, the fractal
                   1
                     Formally, the sequence of admissible transformations is the regular language
                 accepted by the ﬁnite (Rabin-Scott) automaton represented by the graph in Fig-
                 ure 8.7b.
8.2. Plant models and iterated function systems                          185




Figure 8.7: Construction of the set A(S): (a) deﬁnition of an IFS {Q1 , Q2 }
that generates the initial line segment, (b) the control graph specifying the
admissible sequences of transformation application

approximation of the leaf in Figure 5.11a is given by the CIFS with the         Resulting CIFS
control graph in Figure 8.7b and the transformations speciﬁed below:
                                                          
                    0.5 0 0          0.5 0 0
             Q1 =  0 0.5 0  Q2 =  0 0.5 0 
                     0  0 1           0  s 1
                                                       
                           1/R cos δ 1/R sin δ 0
                   T1 =  −1/R sin δ 1/R cos δ 0 
                             0          s      1
                                                       
                          1/R cos δ −1/R sin δ 0
                   T2 =  1/R sin δ  1/R cos δ 0 
                             0         s       1
                                                   
                                1/R 0 0
                         T3 =   0 1/R 0 
                                 0  2s 1
    The second approach to the generation of the line segment J (F (2s))        Noninvertible
is consistent with the method applied by Barnsley to specify the fern           transforma-
leaf in Figure 8.2. The idea is to map the entire branching structure           tions
A(s) onto the line J (F (2s)). This can be achieved using a noninvertible
transformation Q which collapses all branches into a vertical line. The
scaling factor along the y axis is the ratio of the desired segment length
2s, and the limit height of the entire structure A(s),
                                       2s
                               h=           .
                                    1 − 1/R
            186                                Chapter 8. Fractal properties of plants




            Figure 8.8: Two renderings of the compound leaf from Figure 5.11a, gener-
            ated using iterated function systems

            This last value is calculated as the limit of the geometric series with the
            ﬁrst term equal to 2s and the ratio equal to 1/R. Thus, the compound
            leaf of Figure 5.11a is deﬁned by an IFS consisting of transformation
                                                           
                                          0    0    0
                                    Q =  0 1 − 1/R 0 
                                          0    0    1

            and transformations T1 , T2 and T3 speciﬁed as in the case of the con-
            trolled IFS.
Rendering       Two fractal-based renderings of the set A(s) are shown in Fig-
examples    ure 8.8. Figure 8.8a was obtained using the controlled IFS and a deter-
            ministic algorithm to traverse the tree of admissible transformations.
            Figure 8.8b was obtained using the “ordinary” IFS and the random
            selection of transformations. Figure 8.9 shows another fractal-based
            rendering of the same structure. The spheres have radii equal to the
            distance from the sphere center to the leaf, within a speciﬁed .


                               Figure 8.9: Carrot leaf          -
8.2. Plant models and iterated function systems   187
188                                 Chapter 8. Fractal properties of plants




                  L-system with elongating internodes
                                   
                        L-system transformation
                                   ⇓
                    L-system with decreasing apices
                                   
                           L-system analysis
                                   ⇓
             Recurrent equation in the domain of strings
                                   
                        Graphical interpretation
                                   ⇓
               Recurrent equation in the domain of sets
                                   
                            Passage to limit
                                   ⇓
           An equation expressing the limit set as a union of
           the limit object and reduced copies of itself
                                   
                           Equation solution
                                   ⇓
           An equation expressing the limit object as the im-
           age of an initial object under an iteration of a
           union of transformations
                                   
                    Elimination of the initial object
                                   ⇓
                           A (controlled) IFS


Figure 8.10: Steps in the construction of an IFS given an L-system capturing
a developmental model
8.2. Plant models and iterated function systems                        189

    It is instructive to retrace the logical construction that started with   Conclusions
an L-system, and ended with an iterated function system which can
generate fractal approximations of the same object (Figure 8.10). An
analysis of the operations performed in the subsequent steps of this
construction reveals its limitations, and clariﬁes the relationship be-
tween strictly self-similar structures and real plants. The critical step
is the transformation of the L-system with elongating internodes to the
L-system with decreasing apices. It can be performed as indicated in
the example if the plant maintains constant branching angles as well as
ﬁxed proportions between the mother and daughter segments, indepen-
dent of branch order. This, in turn, can be achieved if all segments in
the modeled plant elongate exponentially over time. These are strong
assumptions, and may be satisﬁed to diﬀerent degrees in real plants.
Strict self-similarity is an abstraction that captures the essential prop-
erties of many plant structures and represents a useful point of reference
when describing them in detail.
Epilogue

This quiet place, reminiscient of Claude Monet’s 1899 painting Water-
lilies pool — Harmony in green, does not really exist. The scene was
modeled using L-systems that captured the development of trees and
water plants, and illuminated by simulated sunlight. It is diﬃcult not
to appreciate how far the theory of L-systems and the entire ﬁeld of
computer graphics have developed since their beginnings in the 1960’s,
making such images possible. Yet the results contained in this book are
not conclusive and constitute only an introduction to the research on
plant modeling for biological and graphics purposes. The algorithmic
beauty of plants is open to further exploration.




                           Figure E.1: Water-lilies
Appendix A

Software environment for
plant modeling

This book is illustrated with images of plants which exist only as math-
ematical models visualized by means of computer graphics. The soft-
ware environment used to construct and experiment with these models
includes dozens of programs and hundreds of data ﬁles. This creates
the nontrivial problem of organizing all components for easy deﬁnition,
saving, retrieval and modiﬁcation of the models. In order to solve it, the
idea of simulation was extended beyond the level of individual plants
to an entire laboratory in botany [98]. Thus, a user can create and
conduct experiments in a virtual laboratory by applying intuitive con-
cepts and techniques from the “real” world. As an operating system
deﬁnes the way a user perceives a computing environment, the virtual
laboratory determines a user’s perception of the environment in which
simulated experiments take place. In the future, a virtual laboratory
may complement, extend, or even replace books as a means for gather-
ing and presenting scientiﬁc information. Because of this potential, the
laboratory in which the research reported in this book was produced is
described here in more detail.


A.1       A virtual laboratory in botany
A virtual laboratory, like its “real” counterpart, is a playground for ex-   User’s
perimentation. It comes with a set of objects pertinent to its scientiﬁc     perspective
domain (in this case, plant models), tools which operate on these ob-
jects, a reference book and a notebook. Once the concepts and tools are
understood, the user can expand the laboratory by adding new objects,
creating new experiments, and recording descriptions in the notebook.
An experienced user can expand the laboratory further by creating and
installing new tools.
               194                  Appendix A. Software environment for plant modeling

Laboratory =       Technically, a virtual laboratory is a microworld which can be ex-
microworld +   plored under the guidance of a hypertext system. The term “microworld”
hypertext      denotes an interactive environment for creating and conducting simu-
               lated experiments. The guidance could be provided in the form of a
               traditional book, but an electronic document is more suitable for inte-
               gration with a microworld. In a sense, both components of the virtual
               laboratory are described by Nelson in Dream Machines [104]. The pi-
               oneering role of this book in introducing the concept of hypertext is
               known, but under the heading The Mind’s Eye the notion of a mi-
               croworld is also anticipated:

                       Suppose that you have a computer.
                       What sorts of things would you do with it?
                       Things that are imaginative
                          and don’t require too much else.
                       I am hinting at something.
                       You could have it make pictures and show you stuﬀ
                       and change what it shows depending on what you do.

Requirements       A virtual laboratory can be divided into two components: the ap-
               plication programs, data ﬁles and textual descriptions that comprise
               the experiments; and the system support that provides the framework
               on which these domain-dependent experiments are built. The following
               list speciﬁes the features of this framework.

                     • Consistent organization of the lab. In the lab environment,
                       experiments are run by applying tools (programs) to objects (data
                       ﬁles). An object consists of ﬁles that are grouped together so
                       that they can be retrieved easily. The format of the objects is
                       suﬃciently standardized to allow straightforward implementation
                       of common operations such as object saving and deletion.
                     • Inheritance of features. It is often the case that several ob-
                       jects diﬀer only in details. For example, two lilac inﬂorescences
                       may diﬀer only in the color of their petals. The mechanism of
                       inheritance is employed to store such objects eﬃciently.
                     • Version control. Interaction with an object during experimen-
                       tation may result in a temporary or permanent modiﬁcation. In
                       the latter case, the user is able to decide whether the newly cre-
                       ated object replaces the old one or should be stored as another
                       version of the original object.
                     • Interactive manipulation of objects. The laboratory pro-
                       vides a set of general-purpose tools for manipulating object pa-
                       rameters. For example, objects can be modiﬁed using control
                       panels or by editing speciﬁc ﬁelds in a textual description of an
                       experiment.
A.1. A virtual laboratory in botany                                  195

   • Flexibility in conducting experiments. The user may apply
     tools to objects in a dynamic way while an experiment is being
     conducted. This can be contrasted to a static experiment de-
     signed when the object is initially incorporated into the system.
   • Guidance through the laboratory. A hypertext system im-
     poses a logical organization on the set of objects, provides a
     textual description of the experiments, and makes it possible to
     browse through the experiments in many ways. Speciﬁc experi-
     ments are invoked automatically when the corresponding text is
     selected, in order to facilitate demonstrations and assist a novice
     user.

    So far, objects have been referred to in an intuitive way, relying      Objects
on the analogy between a real and virtual laboratory. For example, if
our interest is in the development of the gametophyte Microsorium lin-
guaeforme, in a real laboratory we would experiment with a specimen
of the plant, while in a virtual laboratory we explore the corresponding
mathematical model. However, the analogy to real objects does not ex-
tend to the level of detailed object deﬁnition. Speciﬁc design decisions
are needed for software development purposes. In the current design, a
laboratory object is deﬁned as a directory containing two types of ﬁles
and a subdirectory.

   • The data ﬁles comprise our knowledge of a particular model.
   • A speciﬁcation ﬁle deﬁnes the data ﬁles which make up the object
     and the tools which apply to them.
   • A directory of extensions lists objects which inherit some features
     of the current object.

The object-oriented ﬁle structure which provides the basis for lab op-
eration can be represented by a hierarchy of directories and ﬁles (Fig-
ure A.1).
    The path of subdirectories leading to an object establishes the in-     Inheritance of
heritance structure for the lab. Inheritance is based on the idea of        features
specifying new objects in reference to objects which already exist [81].
The “old” object is called a prototype and the new one is its extension.
The extension contains only those ﬁles which are diﬀerent from the
corresponding ﬁles in the prototype. Files that remain the same are
delegated to the prototype by establishing links. In other words, the
object directory will contain those ﬁles that are unique to the object,
and links to ﬁles that are inherited from its prototype (Figure A.2).
This approach saves space, facilitates creation of objects similar to the
prototype, and allows a single change in the prototype to propagate
through all descendents.
196               Appendix A. Software environment for plant modeling




            Figure A.1: The hierarchical structure of objects




 Figure A.2: A prototype and its extension. Shaded areas indicate links.
A.1. A virtual laboratory in botany                                  197




                 Figure A.3: An object icon with menus

To conduct an experiment, all ﬁles that make up the selected object         Version control
are copied to a temporary location called the lab table. Consequently,
manipulation of object parameters does not disturb the stored version.
When the experiment is ﬁnished, the user may save the results by
overwriting the original object or by creating an extension. In the
latter case, the ﬁles on the lab table are compared with those in the
prototype object; those ﬁles that diﬀer from the prototype are saved,
and links to the remaining ﬁles are established automatically.
    The ability to manipulate the parameters in an experiment easily is     Object
an essential feature of the virtual laboratory. As a rule, all parameters   manipulation
involved in an experiment are supplied to the tools through the object’s
data ﬁles. In order to modify a parameter, the user edits the appropri-
ate ﬁle, which is subsequently re-read by the application. Though the
editing of parameters can be accomplished using a text editor, in many
cases parameter modiﬁcation can be performed more conveniently using
virtual control panels [114]. The current implementation of the labora-
tory provides the user with a general-purpose control manager which
creates panels according to user-supplied conﬁguration ﬁles.
    The user is able to apply a tool to an object as a whole, without       Tool
detailed knowledge of the programs involved or the component ﬁles.          application
This is achieved through the object’s speciﬁcation ﬁle which lists all
ﬁles associated with an object and the tools that can be applied to
them. This information is used to create a hierarchy of menus associ-
ated with an icon representing the object (Figure A.3). The end nodes
in the hierarchy invoke tools that operate on the object. For example,
selection of the item image followed by the item generate from the
menus in the ﬁgure would invoke the plant modeling program Pfg.
    A user may browse through the objects in the lab by following either    Browsing
the hierarchical structure of objects or hypertext links. The browser is
used to navigate through the hierarchy, moving down through succes-
sive extensions or up through previous levels. At any time, the user
may request that an object be placed on the lab table. The hypertext
document associated with the lab provides an alternative method of
browsing and a means of relating objects independent of the hierarchy.
198                  Appendix A. Software environment for plant modeling

A.2         List of laboratory programs
The essential programs incorporated into the virtual laboratory in botany
are listed below.

      • Plant and fractal generator (Pfg)
        P. Prusinkiewicz and J. Hanan
        Given an L-system, a set of viewing parameters and optional ﬁles
        specifying predeﬁned surfaces, Pfg generates the modeled struc-
        ture by carrying out the derivation, then interpreting the resulting
        string using turtle geometry. Both non-parametric and paramet-
        ric L-systems are supported. The model can be visualized directly
        on the screen of an IRIS workstation or output to a ﬁle. The ﬁrst
        mode of operation is used to experiment with the model interac-
        tively and present developmental sequences. The output ﬁle can
        be either in Postscript format, particularly suitable for printing
        results such as fractal curves and inﬂorescence diagrams on a laser
        printer, or in the format required by the ray-tracer Rayshade for
        realistic rendering of the modeled structures.
      • Modeling program for phyllotactic patterns (Spiral)
        D. R. Fowler
        Spiral is an interactive program for modeling organs with spiral
        phyllotactic patterns. The user can choose between planar and
        cylindrical patterns, and modify parameters which deﬁne model
        geometry (Chapter 4). This technique is faster than “growing”
        organs using parametric L-systems. Once an organ has been de-
        signed, it can be expressed using an L-system and incorporated
        into a plant structure.
      • Interactive surface editor (Ise)
        J. Hanan
        Ise makes it possible to deﬁne and modify bicubic surfaces con-
        sisting of one or several arbitrarily connected patches. The output
        ﬁles produced by Ise are compatible with Pfg and Spiral.
      • Modeling program for cellular structures (Mapl)
        F. D. Fracchia
        Mapl accepts the speciﬁcation of a two-dimensional cell layer cap-
        tured by a map L-system and generates the resulting developmen-
        tal sequence using the dynamic method of map interpretation.
        Options include map generation on the surface of a sphere, and
        the simulation of development in three dimensions according to
        a given cellwork L-system. As in the case of Pfg, the models can
        be visualized directly on the screen or output to a ﬁle in either
        Postscript or Rayshade format.
A.2. List of laboratory programs                                     199

   • Control panel manager (Panel)
     L. Mercer and A. Snider
     This program creates control panels containing sliders and but-
     tons, according to a conﬁguration ﬁle provided by the user. Upon
     activation of a control by the mouse, Panel generates a message
     which indicates the corresponding control value. Application pro-
     grams process this information and modify the appropriate pa-
     rameters. For example, a panel can be used to control parameters
     used by Pfg, Spiral, or Mapl.
   • Ray tracer (Rayshade)
     C. Kolb, Yale University
     Rayshade reads a scene description from a text ﬁle, and renders it
     using ray tracing. Scenes can be composed of primitives such as
     planes, triangles, polygons, spheres, cylinders, cones and height
     ﬁelds, grouped together to form objects. These objects can be
     instantiated in other object deﬁnitions to create a hierarchical
     description of a scene. Transformations including translation, ro-
     tation and scaling, and a variety of procedural textures can be ap-
     plied to any object. Extended light sources, simulation of depth
     of ﬁeld, and adaptive supersampling are supported. The program
     uses 3D grids to partition object space for fast intersection tests.
   • Previewer for the ray tracer (Preray)
     A. Snider
     Preray is a previewer for Rayshade used to provide a fast wire
     frame rendering of a scene before committing time to ray tracing.
     A control panel associated with Preray makes it possible to set
     viewing parameters interactively.
   • Modeling program based on Euclidean constructions (L.E.G.O.)
     N. Fuller
     L.E.G.O. makes it possible to model two- and three-dimensional
     objects using geometric constructions. In the scope of this book,
     L.E.G.O. was used to model man-made objects such as the Zinnia
     vase and the Water-lilies bridge.
   • Iterated function system generator (Ifsg)
     D. Hepting
     A fractal deﬁned by an iterated function system is described by
     a ﬁnite set of contractive aﬃne transformations with an optional
     ﬁnite state control mechanism. Ifsg accepts input from a ﬁle spec-
     ifying the transformations and rendering information. The pro-
     gram is capable of rendering by either attracting, distance-based
     or escape-time methods. The output can be displayed directly
     on an IRIS workstation or written to a ﬁle for further processing.
     In the scope of this book, Ifsg was used to obtain results which
     related plant models expressed using L-systems to fractals.
200               Appendix A. Software environment for plant modeling




                Figure A.4: A virtual laboratory screen

Figure A.4 presents a sample screen of a Silicon Graphics IRIS 4D/60
workstation running some of the above programs within the virtual
laboratory framework. The icon in the top right corner represents the
laboratory browser which was used to select a sunﬂower plant as the
current object. The icon underneath and the associated menu were
subsequently applied to select tools which operate on the object. The
control panel in the bottom right corner of the screen is a part of the
surface editor Ise. The manipulated petal is displayed as a wire frame
in the window labeled Ise, and incorporated into a ﬂower head by the
modeling program Spiral which presents its output in the window sun-
ﬂower. The ﬂower heads are in turn incorporated into a complete plant
model generated by Pfg and rendered using Rayshade in the window
plant.rle. The panel below that window makes it possible to choose
organs included in the model and change parameters related to the
angles of the branching structure. The metaphor of a virtual labora-
tory provides a uniform interface to various operations on the selected
plant, ranging from the modiﬁcation of a petal to the rendering of the
complete model.
Appendix B

About the ﬁgures

The following descriptions of the color images include details about the
pictures not described in the main text. Unless otherwise stated, ﬁgures
were created at the University of Regina.

Figure 1.19 [page 20] Three-dimensional Hilbert curve
                      F. D. Fracchia, P. Prusinkiewicz, N. Fuller
                      (1989)

     This image was rendered using ray-tracing without shadows.
Figure 1.25 [page 26] Three-dimensional bush
                      P. Prusinkiewicz (1986)

     Simple branching structure, rendered using the ﬁrmware of a Sil-
     icon Graphics IRIS workstation. Total generating and rendering
     time on IRIS 4D/20: 4 seconds.
Figure 1.28 [page 29] Flower ﬁeld
                      P. Prusinkiewicz (1986)

     The ﬁeld contains four rows of four plants. The scene was ren-
     dered with IRIS ﬁrmware, using depth-cueing to assign colors to
     petals.
Figure 1.35 [page 45] Developmental stages of Anabaena catenula
                      J. Hanan, P. Prusinkiewicz (1989)


Figure 2.1 [page 52] Organic architecture
                     Ned Greene, NYIT (1989)
202                                       Appendix B. About the ﬁgures

      An array of 300 x 300 x 300 voxel space automata was used to
      track a polygonal model of a house. Rendering was performed
      using a probabilistic radiosity method. See [54] for a full descrip-
      tion.
Figure 2.3 [page 54] Acer graphics
                     Jules Bloomenthal, NYIT (1984)

      A model of a maple tree. The basic branching structure was gen-
      erated recursively. Limbs were modeled as generalized cylinders,
      obtained by moving discs of varying radii along spline curves.
      Real bark texture was digitized and used as a bump map. Leaf
      texture was obtained by digitizing a photograph of a real leaf and
      emphasizing the veins using a paint program. See [11] for details.
Figure 2.4 [page 54] Forest scene
                     Bill Reeves, Pixar (1984)

      A scene from the ﬁlm The Adventures of André and Wally B,
      modeled using particle systems. Shading and shadows were ap-
      proximated using probabilistic techniques. Visible surfaces were
      determined using depth-sorting. See [119] for a full description.
Figure 2.5 [page 55] Oil palm tree canopy
                     CIRAD Modelisation Laboratory (1990)

      A developmental model of oil palm trees, modeled using the
      method originated by de Reﬀye and described from the graph-
      ics perspective in [30].
Figure 2.10 [page 61] Medicine lake
                      F. K. Musgrave, C. E. Kolb, P. Prusinkiewicz,
                      B. B. Mandelbrot (1988)

      A scene combining a fractal terrain model, a tree generated us-
      ing L-systems, and a rainbow. The rainbow model was derived
      from a simulation of refraction with dispersion of light through
      an idealized raindrop. Procedural textures were applied to the
      mountains, the water surface and a vertical plane modeling the
      sky. See [101] for further details.
Figure 2.11 [page 62] Surrealistic elevator
                      A. Snider, P. Prusinkiewicz, N. Fuller (1989)

      The elevator was modeled using L.E.G.O. The island is a su-
      perquadratic surface. Procedural textures were applied to create
      stars in the sky, craters on the moon, colored layers in the rock,
Appendix B. About the ﬁgures                                        203

     waves in the lake and imperfections in the glass that covers the
     elevator.
Figure 3.2 [page 69] Crocuses
                     J. Hanan, D. R. Fowler (1990)

     The petals were modeled as Bézier surfaces, with the shapes de-
     termined using Ise.
Figure 3.4 [page 72] Lily-of-the-valley
                     P. Prusinkiewicz, J. Hanan (1987)


Figure 3.5 [page 74] Development of Capsella bursa-pastoris
                     P. Prusinkiewicz, A. Lindenmayer (1987)


Figure 3.6 [page 75] Apple twig
                     P. Prusinkiewicz, D. R. Fowler (1990)

     This twig model was developed in one spring day, looking at a
     real twig nearby. This time is indicative for most inﬂorescence
     models shown.
Figure 3.11 [page 81] A mint
                      P. Prusinkiewicz (1988)


Figure 3.14 [page 84] Development of Lychnis coronaria
                      P. Prusinkiewicz, J. Hanan (1987)


Figure 3.17 [page 90] Development of Mycelis muralis
                      P. Prusinkiewicz, A. Lindenmayer (1987)


Figure 3.18 [page 91] A three-dimensional rendering of the Mycelis
                      models
                      P. Prusinkiewicz, J. Hanan (1987)

     All internodes in the model are assumed to have the same length.
     In reality, the internodes have diﬀerent lengths, and the structure
     is less crowded.
Figure 3.19 [page 92] Lilac inﬂorescences
                      P. Prusinkiewicz, J. Hanan, D. R. Fowler
                      (1990)
204                                     Appendix B. About the ﬁgures

Figure 3.21 [page 94] The Garden of L
                      P. Prusinkiewicz, F. D. Fracchia, J. Hanan,
                      D. R. Fowler (1988)

      All plants were modeled with L-systems and rendered using the
      IRIS ﬁrmware. Images corresponding to diﬀerent viewing planes
      (the background lilac twigs, the apple twig and the daisies) were
      defocused separately using low-pass ﬁlters to simulate the depth
      of ﬁeld, then composited with a focused image of lilac inﬂores-
      cences. The sky was generated using a fractal algorithm.
Figure 3.23 [page 96] Wild carrot
                      P. Prusinkiewicz (1988)


Figure 4.3 [page 102] Close-up of a daisy capitulum
                      D. R. Fowler (1988)

      The petals and ﬂorets were modeled as Bézier surfaces.
Figure 4.4 [page 102] Domestic sunﬂower head
                      D. R. Fowler, P. Prusinkiewicz (1989)


Figure 4.5 [page 105] Sunﬂower ﬁeld
                      D. R. Fowler, N. Fuller, J. Hanan, A. Snider
                      (1990)

      This image contains approximately 400 plants, each with 15 ﬂow-
      ers. A ﬂower has 21 petals and 300 seeds, modeled using 600 tri-
      angles and 400 triangles respectively. Counting leaves and buds,
      the entire scene contains about 800,000,000 triangles. The image
      was ray-traced with adaptive supersampling on a grid of 1024 x
      768 pixels using 45 hours of CPU time on a MIPS M-120 com-
      puter.
Figure 4.6 [page 106] Zinnias
                      D. R. Fowler, P. Prusinkiewicz, J. Hanan,
                      N. Fuller (1990)

      The vase was modeled using L.E.G.O. and rendered with a pro-
      cedural texture. The scene was illuminated by one extended light
      source.
Appendix B. About the ﬁgures                                      205

Figure 4.7 [page 106] Close-up of zinnias
                      D. R. Fowler, P. Prusinkiewicz, A. Snider
                      (1990)

     This scene was rendered using distributed ray-tracing to simu-
     late the depth ﬁeld.
Figure 4.8 [page 108] Water-lily
                      D. R. Fowler, J. Hanan (1990)


Figure 4.9 [page 108] Lily pond
                      D. R. Fowler, J. Hanan, P. Prusinkiewicz,
                      N. Fuller (1990)

     The wavelets on the water surface were obtained using bump-
     mapping with a procedurally deﬁned texture.
Figure 4.10 [page 109] Roses
                       D. R. Fowler, J. Hanan, P. Prusinkiewicz
                       (1990)

     Distributed ray-tracing with one extended light source was used
     to simulate depth of ﬁeld and create fuzzy shadows.
Figure 4.11 [page 111] Parastichies on a cylinder
                       D. R. Fowler (1990)


Figure 4.15 [page 116] Pineapples
                       D. R. Fowler, A. Snider (1990)

     The image incorporates a physically-based model of a tablecloth
     approximated as an array of masses connected by springs and
     placed in a gravitational ﬁeld. The scene is illuminated by three
     extended light sources.
Figure 4.16 [page 117] Spruce cones
                       D. R. Fowler, J. Hanan (1990)


Figure 4.17 [page 117] Carex laevigata
                       J. Hanan, P. Prusinkiewicz (1989)

     The entire plant, including the leaves, was modeled using para-
     metric L-systems.
206                                      Appendix B. About the ﬁgures

Figure 5.2 [page 121] Maraldi ﬁgure
                      Ned Greene, NYIT (1984)

      The shapes of leaves, calyxes and petals were deﬁned using a paint
      program, by interpreting gray levels as height. Painted textures
      were mapped onto the surfaces of leaves and calyxes. Smooth
      gradation of color across the petals was obtained by assigning
      colors to the vertices of the polygon meshes representing ﬂowers,
      then interpolating colors across polygons using Gouraud shading.
      The vines were rendered with bump-mapping, using a digitized
      image of real bark.
Figure 5.3 [page 121] The fern
                      P. Prusinkiewicz (1986)


Figure 5.7 [page 125] A rose in a vase
                      D. R. Fowler, J. Hanan, P. Prusinkiewicz
                      (1990)

      Petals and thorns are Bézier surfaces incorporated into a rose
      model expressed using L-systems. The vase was modeled as a
      surface of revolution.
Figure 6.3 [page 141] Development of Anabaena catenula
                      P. Prusinkiewicz, F. D. Fracchia (1989)

      Each developmental stage is plotted in one scan line.
Figure 7.13 [page 161] Simulated development of Microsorium
                       linguaeforme
                       F. D. Fracchia, P. Prusinkiewicz,
                       M. J. M. de Boer (1989)

      Cells are represented as polygons, rendered using the IRIS ﬁrmware.
      The development can be visualized directly on the screen of an
      IRIS 4D/20 workstation without resorting to single-frame anima-
      tion techniques.
Figure 7.14 [page 161] Microphotograph of Microsorium linguaeforme
                       M. J. M. de Boer, University of Utrecht


Figure 7.16 [page 163] Simulated development of Dryopteris
                       thelypteris
                       F. D. Fracchia, P. Prusinkiewicz,
                       M. J. M. de Boer (1989)
Appendix B. About the ﬁgures                                          207



Figure 7.19 [page 169] Developmental sequence of Patella vulgata
                       F. D. Fracchia, A. Lindenmayer,
                       M. J. M. de Boer (1989)

     Cells are represented as spheres. Intersections of spheres inside
     the modeled embryo are ignored, since they do not aﬀect the
     ray-traced images.
Figure 7.20 [page 169] An electron microscope image of Patella
                       vulgata
                       W. J. Dictus, University of Utrecht


Figure 8.4 [page 180] Fern dune
                      P. Prusinkiewicz, D. Hepting (1989)

     The shape of the leaf has been captured using a controlled iter-
     ated function system. A continuous escape-time function deﬁnes
     point altitudes, resulting in a surrealistic incorporation of a leaf
     into the landscape.
Figure 8.9 [page 186] Carrot leaf
                      D. Hepting, P. Prusinkiewicz (1989)

     The leaf shape has been modeled using a controlled iterated func-
     tion system. The scene consists of a set of spheres, with the radius
     equal to the distance to the leaf. The image was rendered using
     ray-tracing.
Figure E.1 [page 191] Water-lilies
                      D. R. Fowler, J. Hanan, P. Prusinkiewicz,
                      N. Fuller (1990)

     A scene inspired by Water-lilies pool - Harmony in green by
     Claude Monet (1899). All trees and water-lilies were modeled us-
     ing L-systems. The willow twigs bend downwards due to a strong
     tropism eﬀect, simulating gravity. The bridge was modeled using
     L.E.G.O. The sky is a sphere with a procedural texture. The
     entire scene was ray-traced, then the resulting image was repre-
     sented as a set of small circles, with the colors close but not equal
     to the average of pixel colors underneath. This last operation was
     aimed at creating the appearance of an impressionistic painting.
Figure A.4 [page 200] Virtual lab
                      L. Mercer, D. R. Fowler (1990)
Turtle interpretation of
symbols

Symbol   Interpretation                                             Page

  F      Move forward and draw a line.                              7, 46
  f      Move forward without drawing a line.                       7, 46
  +      Turn left.                                              7, 19, 46
  −      Turn right.                                                7, 19
  ∧      Pitch up.                                                 19, 46
  &      Pitch down.                                               19, 46
  \      Roll left.                                                19, 46
  /      Roll right.                                               19, 46
   |     Turn around.                                              19, 46
  $      Rotate the turtle to vertical.                                57
   [     Start a branch.                                               24
   ]     Complete a branch.                                            24
  {      Start a polygon.                                        120, 127
  G      Move forward and draw a line. Do not record a vertex.        122
   .     Record a vertex in the current polygon.                 122, 127
  }      Complete a polygon.                                     120, 127
  ∼      Incorporate a predeﬁned surface.                             119
   !     Decrement the diameter of segments.                       26, 57
   
         Increment the current color index.                            26
  %      Cut oﬀ the remainder of the branch.                           73
Bibliography

 [1] H. Abelson and A. A. diSessa. Turtle geometry. M.I.T. Press,
     Cambridge, 1982.
 [2] M. Aono and T. L. Kunii. Botanical tree image generation. IEEE
     Computer Graphics and Applications, 4(5):10–34, 1984.
 [3] M. J. Apter. Cybernetics and development. Pergamon Press,
     Oxford, 1966. (International Series of Monographs in Pure and
     Applied Biology/Zoology Division Vol. 29).
 [4] W. W. Armstrong. The dynamics of tree linkages with a ﬁxed
     root link and limited range of rotation. Actes du Colloque Inter-
     nationale l’Imaginaire Numérique ’86, pages 16–21, 1986.
 [5] J. W. Backus. The syntax and semantics of the proposed interna-
     tional algebraic language of the Zurich ACM-GAMM conference.
     In Proc. Intl. Conf. on Information Processing, pages 125–132.
     UNESCO, 1959.
 [6] B. I. Balinsky. An introduction to embryology. W. B. Saunders,
     Philadelphia, 1970.
 [7] M. F. Barnsley. Fractals everywhere. Academic Press, San Diego,
     1988.
 [8] M. F. Barnsley, J. H. Elton, and D. P. Hardin. Recurrent iterated
     function systems. Constructive Approximation, 5:3–31, 1989.
 [9] B. A. Barsky. The Beta-spline: A local representation based on
     shape parameters and fundamental geometric measures. PhD the-
     sis, Department of Computer Science, University of Utah, 1981.
[10] R. Bartels, J. Beatty, and B. Barsky, editors. An introduction
     to splines for use in computer graphics and geometric modeling.
     Morgan Kaufman, Los Altos, California, 1987.
[11] J. Bloomenthal. Modeling the mighty maple. Proceedings of
     SIGGRAPH ’85 (San Francisco, California, July 22-26, 1985) in
     Computer Graphics, 19, 3 (July 1985), pages 305–311, ACM SIG-
     GRAPH, New York, 1985.
212                                                        Bibliography

 [12] B. G. Briggs and L. A. S. Johnson. Evolution in the Myrtaceae –
      evidence from inﬂorescence structure, Appendix I: The relevance
      of Troll’s system of inﬂorescence typology. In Proceedings of the
      Linnean Society of New South Wales, volume 102, pages 236–240,
      1979.
 [13] N. Chomsky. Three models for the description of language. IRE
      Trans. on Information Theory, 2(3):113–124, 1956.
 [14] V. Claus, H. Ehrig, and G. Rozenberg, editors. Graph grammars
      and their application to computer science; First International
      Workshop. Lecture Notes in Computer Science 73. Springer-
      Verlag, Berlin, 1979.
 [15] D. Cohen. Computer simulation of biological pattern generation
      processes. Nature, 216:246–248, 1967.
 [16] E. Costes. Analyse architecturale et modelisation du litchi. PhD
      thesis, Université des Sciences et Techniques du Languedoc, 1988.
 [17] H. S. M. Coxeter. Introduction to geometry. J. Wiley & Sons,
      New York, 1961.
 [18] H. S. M. Coxeter. The role of intermediate convergents in Tait’s
      explanation for phyllotaxis. J. Algebra, 20:167–175, 1972.
 [19] K. Culik II and D. Wood. A mathematical investigation of prop-
      agating graph OL-systems. Information and Control, 43:50–82,
      1979.
 [20] P. Dabadie, P. de Reﬀye, and P. Dinouard. Modélisation de la
      croissance et de l’architecture d’un bambou. In Deuxième congrès
      international du bambou, 1988.
 [21] C. Davis and D. E. Knuth. Number representations and dragon
      curves. J. of Recreational Mathematics, 3:66–81, 133–149, 1970.
 [22] M. J. M. de Boer. Analysis and computer generation of divi-
      sion patterns in cell layers using developmental algorithms. PhD
      thesis, University of Utrecht, the Netherlands, 1989.
 [23] M. J. M. de Boer and A. Lindenmayer. Map 0L-systems with
      edge label control: Comparison of marker and cyclic systems.
      In H. Ehrig, M. Nagl, A. Rosenfeld, and G. Rozenberg, editors,
      Graph-grammars and their application to computer science, Lec-
      ture Notes in Computer Science 291, pages 378–392. Springer-
      Verlag, 1987.
Bibliography                                                          213

 [24] M. de Does and A. Lindenmayer. Algorithms for the genera-
      tion and drawing of maps representing cell clones. In H. Ehrig,
      M. Nagl, and G. Rozenberg, editors, Graph-grammars and their
      application to computer science, Lecture Notes in Computer Sci-
      ence 153, pages 39–57. Springer-Verlag, 1983.
 [25] C. G. de Koster and A. Lindenmayer. Discrete and continuous
      models for heterocyst diﬀerentiation in growing ﬁlaments of blue-
      green bacteria. In Acta Biotheoretica, volume 36, pages 249–273.
      Kluwer Academic, the Netherlands, 1987.
 [26] P. de Reﬀye. Modéle mathématique aléatorie et simulation de
      la croissance et de l’architecture du caféier robusta. Première
      partie, Café-Cacao-Thé, 25(2):83–104, 1981. Deuxième partie,
      Café-Cacao-Thé, 25(4):219–230, 1981. Troisième partie, Café-
      Cacao-Thé, 26(2):77–96, 1982. Quatrième partie, Café-Cacao-
      Thé, 27(1):3–20, 1983.
 [27] P. de Reﬀye. Travaux sur la caféier. CIRAD, Montpellier. Col-
      lection of earlier papers.
 [28] P. de Reﬀye. Modélisation et simulation de la verse de caféier, à
      l’aide de la théorie de la résistance des matériaux. Café-Cacao-
      Thé, XX(4):251–272, 1976.
 [29] P. de Reﬀye, M. Cognee, M. Jaeger, and B. Traore. Modélisation
      de la croissance et de l’architecture du cotonnier. Manuscript,
      1988.
 [30] P. de Reﬀye, C. Edilin, J. Françon, M. Jaeger, and C. Puech.
      Plant models faithful to botanical structure and development.
      Proceedings of SIGGRAPH ’88 (Atlanta, Georgia, August 1-5,
      1988), in Computer Graphics 22,4 (August 1988), pages 151–158,
      ACM SIGGRAPH, New York, 1988.
 [31] F. M. Dekking. Recurrent sets.         Advances in Mathematics,
      44(1):78–104, 1982.
 [32] F. M. Dekking. Recurrent sets: A fractal formalism. Report
      82-32, Delft University of Technology, 1982.
 [33] H. Ehrig, M. Nagl, A. Rosenfeld, and G. Rozenberg, editors.
      Graph grammars and their application to computer science; Third
      International Workshop. Lecture Notes in Computer Science 291.
      Springer-Verlag, Berlin, 1987.
 [34] H. Ehrig, M. Nagl, and G. Rozenberg, editors. Graph grammars
      and their application to computer science; Second International
      Workshop. Lecture Notes in Computer Science 153. Springer-
      Verlag, Berlin, 1983.
214                                                         Bibliography

 [35] P. Eichhorst and W. J. Savitch. Growth functions of stochas-
      tic Lindenmayer systems. Information and Control, 45:217–228,
      1980.
 [36] R. O. Erickson. The geometry of phyllotaxis. In J. E. Dale and
      F. L. Milthrope, editors, The growth and functioning of leaves,
      pages 53–88. University Press, Cambridge, 1983.
 [37] G. Eyrolles. Synthèse d’images ﬁguratives d’arbres par des
      méthodes combinatoires. PhD thesis, Université de Bordeaux
      I, 1986.
 [38] J. B. Fisher and H. Honda. Computer simulation of branching
      pattern and geometry in Terminalia (Combretaceae), a tropical
      tree. Botanical Gazette, 138(4):377–384, 1977.
 [39] J. B. Fisher and H. Honda. Branch geometry and eﬀective leaf
      area: A study of Terminalia–branching pattern, Parts I and II.
      American Journal of Botany, 66:633–655, 1979.
 [40] J. D. Foley and A. Van Dam. Fundamentals of interactive com-
      puter graphics. Addison-Wesley, Reading, Massachusetts, 1982.
 [41] L. Fox and D. F. Mayers. Numerical solution of ordinary diﬀer-
      ential equations. Chapman and Hall, London, 1987.
 [42] F. D. Fracchia, P. Prusinkiewicz, and M. J. M. de Boer. Visualiza-
      tion of the development of multicellular structures. In Proceedings
      of Graphics Interface ’90, pages 267–277, 1990.
 [43] H. Freeman. On encoding arbitrary geometric conﬁgurations.
      IRE Trans. Electronic. Computers, 10:260–268, 1961.
 [44] D. Frijters. Mechanisms of developmental integration of Aster
      novae-angliae L. and Hieracium murorum L. Annals of Botany,
      42:561–575, 1978.
 [45] D. Frijters. Principles of simulation of inﬂorescence development.
      Annals of Botany, 42:549–560, 1978.
 [46] D. Frijters and A. Lindenmayer. A model for the growth and
      ﬂowering of Aster novae-angliae on the basis of table (1,0)L-
      systems. In G. Rozenberg and A. Salomaa, editors, L Systems,
      Lecture Notes in Computer Science 15, pages 24–52. Springer-
      Verlag, Berlin, 1974.
 [47] D. Frijters and A. Lindenmayer. Developmental descriptions of
      branching patterns with paracladial relationships. In A. Linden-
      mayer and G. Rozenberg, editors, Automata, languages, develop-
      ment, pages 57–73. North-Holland, Amsterdam, 1976.
Bibliography                                                      215

 [48] M. Gardner. Mathematical games: An array of problems that can
      be solved with elementary mathematical techniques. Scientiﬁc
      American, 216, 1967. 3:124–129 (March), 4:116–123 (April).
 [49] M. Gardner. Mathematical games: The fantastic combinations
      of John Conway’s new solitaire game “life”. Scientiﬁc American,
      223(4):120–123, October 1970.
 [50] M. Gardner. Mathematical games: On cellular automata, self-
      reproduction, the Garden of Eden and the game “life”. Scientiﬁc
      American, 224(2):112–117, February 1971.
 [51] M. Gardner. Mathematical games – in which “monster” curves
      force redeﬁnition of the word “curve”. Scientiﬁc American,
      235(6):124–134, December 1976.
 [52] S. Ginsburg and H. G. Rice. Two families of languages related to
      ALGOL. J. ACM, 9(3):350–371, 1962.
 [53] H. Gravelius. Flusskunde. Goschen, Berlin, 1914.
 [54] N. Greene. Voxel space automata: Modeling with stochastic
      growth processes in voxel space. Proceedings of SIGGRAPH ’89
      (Boston, Mass., July 31-August 4, 1989), in Computer Graph-
      ics 23,4 (August 1989), pages 175–184, ACM SIGGRAPH, New
      York, 1989.
 [55] B. E. S. Gunning. Microtubules and cytomorphogenesis in a
      developing organ: The root primordium of Azolla pinnata. In
      O. Kiermayer, editor, Cytomorphogenesis in plants, Cell Biology
      Monographs 8, pages 301–325. Springer-Verlag, Wien, 1981.
 [56] A. Habel and H.-J. Kreowski. On context-free graph languages
      generated by edge replacement. In H. Ehrig, M. Nagl, and
      G. Rozenberg, editors, Graph grammars and their application to
      computer science; Second International Workshop, Lecture Notes
      in Computer Science 153, pages 143–158. Springer-Verlag, Berlin,
      1983.
 [57] A. Habel and H.-J. Kreowski. May we introduce to you: Hy-
      peredge replacement. In H. Ehrig, M. Nagl, G. Rozenberg, and
      A. Posenfeld, editors, Graph grammars and their application to
      computer science; Third International Workshop, Lecture Notes
      in Computer Science 291, pages 15–26. Springer-Verlag, Berlin,
      1987.
 [58] F. Hallé, R. A. A. Oldeman, and P. B. Tomlinson. Tropical trees
      and forests: An architectural analysis. Springer-Verlag, Berlin,
      1978.
216                                                         Bibliography

 [59] P. H. Hellendoorn and A. Lindenmayer. Phyllotaxis in Bryophyl-
      lum tubiﬂorum: Morphogenetic studies and computer simula-
      tions. Acta Biol. Neerl, 23(4):473–492, 1974.
 [60] D. Hepting, P. Prusinkiewicz, and D. Saupe. Rendering methods
      for iterated function systems. Manuscript, 1990.
 [61] G. Herman, A. Lindenmayer, and G. Rozenberg. Description of
      developmental languages using recurrence systems. Mathematical
      Systems Theory, 8:316–341, 1975.
 [62] G. T. Herman and G. Rozenberg. Developmental systems and
      languages. North-Holland, Amsterdam, 1975.
 [63] D. Hilbert.     Ueber stetige Abbildung einer Linie auf ein
      Flächenstück. Mathematische Annalin., 38:459–460, 1891.
 [64] P. Hogeweg and B. Hesper. A model study on biomorphological
      description. Pattern Recognition, 6:165–179, 1974.
 [65] H. Honda. Description of the form of trees by the parameters of
      the tree-like body: Eﬀects of the branching angle and the branch
      length on the shape of the tree-like body. Journal of Theoretical
      Biology, 31:331–338, 1971.
 [66] H. Honda and J. B. Fisher. Tree branch angle: Maximizing ef-
      fective leaf area. Science, 199:888–890, 1978.
 [67] H. Honda and J. B. Fisher. Ratio of tree branch lengths: The
      equitable distribution of leaf clusters on branches. Proceedings of
      the National Academy of Sciences USA, 76(8):3875–3879, 1979.
 [68] H. Honda, P. B. Tomlinson, and J. B. Fisher. Computer simula-
      tion of branch interaction and regulation by unequal ﬂow rates in
      botanical trees. American Journal of Botany, 68:569–585, 1981.
 [69] H. Honda, P. B. Tomlinson, and J. B. Fisher. Two geometrical
      models of branching of botanical trees. Annals of Botany, 49:1–
      11, 1982.
 [70] R. E. Horton. Erosioned development of systems and their
      drainage basins, hydrophysical approach to quantitative morphol-
      ogy. Bull. Geol. Soc. America, 56:275–370, 1945.
 [71] R. E. Horton. Hypsometric (area-altitude) analysis of erosional
      topology. Bull. Geol. Soc. America, 63:1117–1142, 1952.
 [72] R. Hunt. Plant growth analysis. Studies in Biology 96. Edward
      Arnold, London, 1978.
Bibliography                                                        217

 [73] R. Hunt. Plant growth curves – the functional approach to plant
      growth analysis. Edward Arnold, London, 1982.
 [74] J. E. Hutchinson. Fractals and self-similarity. Indiana University
      Journal of Mathematics, 30(5):713–747, 1981.
 [75] G. Van Iterson. Mathematische und mikroskopish-anatomische
      Studien über Blattstellungen. Gustav Fischer, Jena, 1907.
 [76] M. Jaeger. Représentation et simulation de croissance des
      végétaux. PhD thesis, Université Louis Pasteur de Strasbourg,
      1987.
 [77] J. M. Janssen and A. Lindenmayer. Models for the control of
      branch positions and ﬂowering sequences of capitula in Mycelis
      muralis (L.) Dumont (Compositae). New Phytologist, 105:191–
      220, 1987.
 [78] R. V. Jean. Mathematical modelling in phyllotaxis: The state of
      the art. Mathematical Biosciences, 64:1–27, 1983.
 [79] H. Jürgensen and A. Lindenmayer. Modelling development by
      OL-systems: Inference algorithms for developmental systems
      with cell lineages. Bulletin of Mathematical Biology, 49(1):93–
      123, 1987.
 [80] A. N. Kolmogorov. Three approaches to the quantitative deﬁni-
      tion of information. Int. J. Comp. Math, 2:157–168, 1968.
 [81] H. Lieberman. Using prototypical objects to implement shared
      behavior in object oriented systems. In Proceedings of the
      ACM Conference on Object-Oriented Programming Systems,
      Languages, and Applications, pages 214–223, New York, 1986.
      Association for Computing Machinery.
 [82] A. Lindenmayer. Mathematical models for cellular interaction
      in development, Parts I and II. Journal of Theoretical Biology,
      18:280–315, 1968.
 [83] A. Lindenmayer. Adding continuous components to L-systems. In
      G. Rozenberg and A. Salomaa, editors, L Systems, Lecture Notes
      in Computer Science 15, pages 53–68. Springer-Verlag, Berlin,
      1974.
 [84] A. Lindenmayer. Developmental algorithms: Lineage versus in-
      teractive control mechanisms. In S. Subtelny and P. B. Green,
      editors, Developmental order: Its origin and regulation, pages
      219–245. Alan R. Liss, New York, 1982.
218                                                        Bibliography

 [85] A. Lindenmayer. Models for plant tissue development with cell
      division orientation regulated by preprophase bands of micro-
      tubules. Diﬀerentiation, 26:1–10, 1984.
 [86] A. Lindenmayer. Positional and temporal control mechanisms in
      inﬂorescence development. In P. W. Barlow and D. J. Carr, ed-
      itors, Positional controls in plant development. University Press,
      Cambridge, 1984.
 [87] A. Lindenmayer. An introduction to parallel map generating sys-
      tems. In H. Ehrig, M. Nagl, A. Rosenfeld, and G. Rozenberg,
      editors, Graph grammars and their application to computer sci-
      ence; Third International Workshop, Lecture Notes in Computer
      Science 291, pages 27–40. Springer-Verlag, Berlin, 1987.
 [88] A. Lindenmayer. Models for multicellular development: Char-
      acterization, inference and complexity of L-systems. In A. Kel-
      menová and J. Kelmen, editors, Trends, techniques and problems
      in theoretical computer science, Lecture Notes in Computer Sci-
      ence 281, pages 138–168. Springer-Verlag, Berlin, 1987.
 [89] A. Lindenmayer and P. Prusinkiewicz. Developmental models
      of multicellular organisms: A computer graphics perspective. In
      C. Langton, editor, Artiﬁcial Life: Proceedings of an Interdisci-
      plinary Workshop on the Synthesis and Simulation of Living Sys-
      tems held September, 1987, in Los Alamos, New Mexico, pages
      221–249. Addison-Wesley, Redwood City, 1989.
 [90] A. Lindenmayer and G. Rozenberg, editors. Automata, languages,
      development. North-Holland, Amsterdam, 1976.
 [91] A. Lindenmayer and G. Rozenberg. Parallel generation of maps:
      Developmental systems for cell layers. In V. Claus, H. Ehrig, and
      G. Rozenberg, editors, Graph grammars and their application to
      computer science; First International Workshop, Lecture Notes
      in Computer Science 73, pages 301–316. Springer-Verlag, Berlin,
      1979.
 [92] J. Lück, A. Lindenmayer, and H. B. Lück. Models for cell
      tetrads and clones in meristematic cell layers. Botanical Gazette,
      149:1127–141, 1988.
 [93] J. Lück and H. B. Lück. Generation of 3-dimensional plant bod-
      ies by double wall map and stereomap systems. In H. Ehrig,
      M. Nagl, and G. Rozenberg, editors, Graph Grammars and Their
      Application to Computer Science; Second International Work-
      shop, Lecture Notes in Computer Science 153, pages 219–231.
      Springer-Verlag, Berlin, 1983.
Bibliography                                                        219

 [94] N. Macdonald. Trees and networks in biological models. J. Wiley
      & Sons, New York, 1983.
 [95] B. B. Mandelbrot. The fractal geometry of nature. W. H. Free-
      man, San Francisco, 1982.
 [96] D. M. McKenna. SquaRecurves, E-tours, eddies and frenzies:
      Basic families of Peano curves on the square grid. In Proceed-
      ings of the Eugene Strens Memorial Conference on Recreational
      Mathematics and its History, 1989. To appear.
 [97] H. Meinhardt. Models of biological pattern formation. Academic
      Press, New York, 1982.
 [98] L. Mercer, P. Prusinkiewicz, and J. Hanan. The concept and de-
      sign of a virtual laboratory. In Proceedings of Graphics Interface
      ’90, pages 149–155. CIPS, 1990.
 [99] G. J. Mitchison and Michael Wilcox. Rules governing cell division
      in Anabaena. Nature, 239:110–111, 1972.
[100] D. Müller-Doblies and U. Müller-Doblies. Cautious improvement
      of a descriptive terminology of inﬂorescences. Monocot Newsletter
      4, 1987.
[101] F. K. Musgrave, C. E. Kolb, and R. S. Mace. The synthesis
      and rendering of eroded fractal terrains. Proceedings of SIG-
      GRAPH ’89 (Boston, Mass., July 31-August 4, 1989), in Com-
      puter Graphics 23,4 (August 1989), pages 41–50, ACM SIG-
      GRAPH, New York, 1989.
[102] A. Nakamura, A. Lindenmayer, and K. Aizawa. Some systems
      for map generation. In G. Rozenberg and A. Salomaa, editors,
      The Book of L, pages 323–332. Springer-Verlag, Berlin, 1986.
[103] P. Naur et al. Report on the algorithmic language ALGOL 60.
      Communications of the ACM, 3(5):299–314, 1960. Revised in
      Comm. ACM 6(1):1-17.
[104] T. Nelson. Computer lib and dream machines. Self-published,
      1980.
[105] P. Oppenheimer. Real time design and animation of fractal plants
      and trees. Computer Graphics, 20(4):55–64, 1986.
[106] G. Peano. Sur une courbe, qui remplit tout une aire plaine. Math.
      Annln., 36:157–160, 1890. Translated in G. Peano, Selected works
      of Giuseppe Peano, H. C. Kennedy, editor, pages 143–149, Uni-
      versity of Toronto Press, Toronto, 1973.
220                                                         Bibliography

[107] H. Peitgen and D. Saupe, editors. The science of fractal images.
      Springer-Verlag, New York, 1988.
[108] F. P. Preparata and R. T. Yeh. Introduction to Discrete Struc-
      tures. Addison-Wesley, Reading, Massachusetts, 1973.
[109] P. Prusinkiewicz. Graphical applications of L-systems. In Pro-
      ceedings of Graphics Interface ’86 — Vision Interface ’86, pages
      247–253. CIPS, 1986.
[110] P. Prusinkiewicz. Score generation with L-systems. In Proceedings
      of the International Computer Music Conference ’86, pages 455–
      457, 1986.
[111] P. Prusinkiewicz. Applications of L-systems to computer imagery.
      In H. Ehrig, M. Nagl, A. Rosenfeld, and G. Rozenberg, editors,
      Graph grammars and their application to computer science; Third
      International Workshop, pages 534–548. Springer-Verlag, Berlin,
      1987. Lecture Notes in Computer Science 291.
[112] P. Prusinkiewicz and J. Hanan. Lindenmayer systems, frac-
      tals, and plants, volume 79 of Lecture Notes in Biomathematics.
      Springer-Verlag, Berlin, 1989.
[113] P. Prusinkiewicz and J. Hanan. Visualization of botanical struc-
      tures and processes using parametric L-systems. In D. Thalmann,
      editor, Scientiﬁc Visualization and Graphics Simulation, pages
      183–201. J. Wiley & Sons, 1990.
[114] P. Prusinkiewicz and K. Krithivasan. Algorithmic generation of
      South Indian folk art patterns. In Proceedings of the Interna-
      tional Conference on Computer Graphics ICONCG ’88, Singa-
      pore, 1988.
[115] P. Prusinkiewicz, K. Krithivasan, and M. G. Vijayanarayana. Ap-
      plication of L-systems to algorithmic generation of South Indian
      folk art patterns and karnatic music. In R. Narasimhan, editor,
      A perspective in theoretical computer science — commemorative
      volume for Gift Siromoney, pages 229–247. World Scientiﬁc, Sin-
      gapore, 1989. Series in Computer Science Vol. 16.
[116] P. Prusinkiewicz, A. Lindenmayer, and F. D. Fracchia. Synthesis
      of space-ﬁlling curves on the square grid. To appear in Proceedings
      of FRACTAL ’90, the 1st IFIP conference on fractals, Lisbon,
      Portugal, June 6-8, 1990.
[117] P. Prusinkiewicz, A. Lindenmayer, and J. Hanan. Developmen-
      tal models of herbaceous plants for computer imagery purposes.
      Proceedings of SIGGRAPH ’88 (Atlanta, Georgia, August 1-5,
      1988), in Computer Graphics 22,4 (August 1988), pages 141–150,
      ACM SIGGRAPH, New York, 1988.
Bibliography                                                        221

[118] P. Prusinkiewicz and G. Sandness. Koch curves as attractors and
      repellers. IEEE Computer Graphics and Applications, 8(6):26–40,
      1988.
[119] W. T. Reeves and R. Blau. Approximate and probabilistic al-
      gorithms for shading and rendering structured particle systems.
      Proceedings of SIGGRAPH ’85 (San Francisco, California, July
      22-26, 1985) in Computer Graphics, 19, 3 (July 1985), pages 313–
      322, ACM SIGGRAPH, New York, 1985.
[120] W. R. Remphrey, B. R. Neal, and T. A. Steeves. The morphology
      and growth of Arctostaphylos uva-ursi (bearberry), parts i and ii.
      Canadian Journal of Botany, 61(9):2430–2458, 1983.
[121] W. R. Remphrey and G. R. Powell. Crown architecture of Larix
      laricina saplings: Quantitative analysis and modelling of (non-
      sylleptic) order 1 branching in relation to development of the
      main stem. Canadian Journal of Botany, 62(9):1904–1915, 1984.
[122] W. R. Remphrey and G. R. Powell. Crown architecture of Larix
      laricina saplings: Sylleptic branching on the main stem. Cana-
      dian Journal of Botany, 63(7):1296–1302, 1985.
[123] L. H. Reuter. Rendering and magniﬁcation of fractals using in-
      terated function systems. PhD thesis, Georgia Institute of Tech-
      nology, 1987.
[124] J. N. Ridley. Computer simulation of contact pressure in capitula.
      Journal of Theoretical Biology, 95:1–11, 1982.
[125] J. N. Ridley. Packing eﬃciency in sunﬂower heads. Mathematical
      Biosciences, 58:129–139, 1982.
[126] D. F. Robinson. A notation for the growth of inﬂorescences. New
      Phytologist, 103:587–596, 1986.
[127] G. Rozenberg and A. Salomaa. The mathematical theory of L-
      systems. Academic Press, New York, 1980.
[128] A. Salomaa. Formal languages. Academic Press, New York, 1973.
[129] F. W. Sears, M. W. Zemansky, and H. D. Young. College physics.
      Addison-Wesley Publ. Co., Reading, 6th edition, 1985.
[130] M. Shebell. Modeling branching plants using attribute L-systems.
      Master’s thesis, Worcester Polytechnic Institute, 1986.
[131] P. L. J. Siero, G. Rozenberg, and A. Lindenmayer. Cell division
      patterns: Syntactical description and implementation. Computer
      Graphics and Image Processing, 18:329–346, 1982.
222                                                       Bibliography

[132] W. Sierpiński. Sur une courbe dont tout point est un point
      de ramiﬁcation. Comptes Rendus hebdomadaires des séances de
      l’Académie des Sciences, 160:302–305, 1915. Reprinted in W.
      Sierpiński, Oeuvres choisies, S. Hartman et al., editors, pages
      99–106, PWN – Éditions Scientiﬁques de Pologne, Warsaw, 1975.
[133] G. Siromoney and R. Siromoney. Rosenfeld’s cycle grammars and
      kolam. In H. Ehrig, M. Nagl, A. Rosenfeld, and G. Rozenberg,
      editors, Graph grammars and their application to computer sci-
      ence; Third International Workshop, Lecture Notes in Computer
      Science 291, pages 564–579. Springer-Verlag, Berlin, 1987.
[134] G. Siromoney, R. Siromoney, and T. Robinsin. Kambi kolam
      and cycle grammars. In R. Narasimhan, editor, A perspective in
      theoretical computer science — commemorative volume for Gift
      Siromoney, Series in Computer Science Vol. 16, pages 267–300.
      World Scientiﬁc, Singapore, 1989.
[135] R. Siromoney and K. G. Subramanian. Space-ﬁlling curves and
      inﬁnite graphs. In H. Ehrig, M. Nagl, and G. Rozenberg, editors,
      Graph grammars and their application to computer science; Sec-
      ond International Workshop, Lecture Notes in Computer Science
      153, pages 380–391. Springer-Verlag, Berlin, 1983.
[136] A. R. Smith. Plants, fractals, and formal languages. Proceedings
      of SIGGRAPH ’84 (Minneapolis, Minnesota, July 22-27, 1984)
      in Computer Graphics, 18, 3 (July 1984), pages 1–10, ACM SIG-
      GRAPH, New York, 1984.
[137] A. R. Smith. About the cover: Reconﬁgurable machines. Com-
      puter, 11(7):3–4, 1978.
[138] P. S. Stevens. Patterns in nature. Little, Brown and Co., Boston,
      1974.
[139] R. J. Stevens, A. F. Lehar, and F. H. Perston. Manipulation
      and presentation of multidimensional image data using the Peano
      scan. IEEE Trans. on Pattern Analysis and Machine Intelligence,
      PAMI-5(5):520–526, 1983.
[140] A. L. Szilard. Growth functions of Lindenmayer systems. Techni-
      cal Report 4, Computer Science Department, University of West-
      ern Ontario, 1971.
[141] A. L. Szilard and R. E. Quinton. An interpretation for DOL
      systems by computer graphics. The Science Terrapin, 4:8–13,
      1979.
Bibliography                                                         223

[142] R. Thom. Structural stability and morphogenesis. An outline of
      a general theory of models. Benjamin/Cummings, Reading, Mas-
      sachusetts, 1975.
[143] d’Arcy Thompson. On growth and form. University Press, Cam-
      bridge, 1952.
[144] W. Troll. Die Inﬂoreszenzen, volume I. Gustav Fischer Verlag,
      Stuttgart, 1964.
[145] W. Troll. Die Inﬂoreszenzen, volume II. Gustav Fischer Verlag,
      Jena, 1969.
[146] A. Turing. On computable numbers with an application to the
      Entscheidungsproblem, 1936. Proc. Lond. Math. Soc. (ser. 2),
      42:230–265, 1936–37, and 43:544–546, 1937.
[147] A. Turing. The chemical basis of morphogenesis. Philosophical
      Trans. Roy. Soc. B, 237(32):5–72, 1952.
[148] W. T. Tutte. Graph theory. Addison-Wesley, Reading, Mas-
      sachusetts, 1982.
[149] S. Ulam. Patterns of growth of ﬁgures: Mathematical aspects. In
      G. Kepes, editor, Module, Proportion, Symmetry, Rhythm, pages
      64–74. Braziller, New York, 1966.
[150] J. A. M. van den Biggelaar. Development of dorsoventral polarity
      and mesentoblast determination in Patella vulgata. Journal of
      Morphology, 154:157–186, 1977.
[151] A. H. Veen and A. Lindenmayer. Diﬀusion mechanism for phyl-
      lotaxis: Theoretical physico-chemical and computer study. Plant
      Physiology, 60:127–139, 1977.
[152] X. G. Viennot, G. Eyrolles, N. Janey, and D. Arquès. Combinato-
      rial analysis of ramiﬁed patterns and computer imagery of trees.
      Proceedings of SIGGRAPH ’89 (Boston, Mass., July 31-August
      4, 1989), in Computer Graphics 23,4 (August 1989), pages 31–40,
      ACM SIGGRAPH, New York, 1989.
[153] P. M. B. Vitányi. Development, growth and time. In G. Rozen-
      berg and A. Salomaa, editors, The Book of L, pages 431–444.
      Springer-Verlag, Berlin, 1986.
[154] H. Vogel. A better way to construct the sunﬂower head. Mathe-
      matical Biosciences, 44:179–189, 1979.
[155] H. von Koch. Une méthode géométrique élémentaire pour l’étude
      de certaines questions de la théorie des courbes planes. Acta
      mathematica, 30:145–174, 1905.
224                                                        Bibliography

[156] J. von Neumann. Theory of self-reproducing automata. University
      of Illinois Press, Urbana, 1966. Edited by A. W. Burks.
[157] F. Weberling. Typology of inﬂorescences. J. Linn. Soc. (Bot.),
      59(378):215–222, 1965.
[158] F. Weberling. Morphologie der Blüten und der Blütenstände. Ver-
      lag Eugen Ulmer, Stuttgart, 1981.
[159] H. Weyl. Symmetry. Princeton University Press, Princeton, New
      Jersey, 1982.
[160] S. Wolfram. Computer software in science and mathematics. Sci-
      entiﬁc American, 251(3):188–203, 1984.
[161] S. Wolfram. Some recent results and questions about cellular
      automata. In J. Demongeot, E. Goles, and M. Tchuente, edi-
      tors, Dynamical systems and cellular automata, pages 153–167.
      Academic Press, London, 1985.
[162] T. Yokomori. Stochastic characterizations of EOL languages. In-
      formation and Control, 45:26–33, 1980.
[163] D. A. Young. On the diﬀusion theory of phyllotaxis. Journal of
      Theoretical Biology, 71:421–423, 1978.
[164] M. H. Zimmerman and C. L. Brown. Trees — structure and
      function. Springer-Verlag, Berlin, 1971.
Index

accumulation 67                         cell (continued)
acrotonic structure 87                       apical 154
age 135                                      epidermal 173
alphabet 4                                   marginal 163
Anabaena catenula 5, 136                     vegetative 44
anastomosis 51                          cell division system 154
angle increment 6                       cellular automata 51
apex 21                                 cellwork 168
    continuing 70                       chaos game 178
    ﬂowering 64                         cleavage 166
    terminal 70                         condition 42
    vegetative 64                       contact point 13, 119
apical dominance 88                     context 30
apical front 155                        continuity requirement 140
apple 75                                control graph 182
attractor 178                           crocus 68
axiom 4                                 curve
axis 21                                      dragon 11
                                             E-curve 12
bicubic patch 119                            FASS 12
blastula 166                                 Gosper 12
blue-green bacteria 5                        Hilbert 16, 21
branch 21                                    Koch island 7
branching                                    Peano 17
    decussate 93                             pure 16
    monopodial 55, 70                        Sierpiński 11
    polypodial 70, 86                        snowﬂake 1
    sympodial 50, 58, 70                     space-ﬁlling 12
    ternary 58                               SquaRecurve 14
branching angles 52                     cyme 82
branch plane 52                              closed 85
                                             double 83
capitulum 96                                 open 82
     daisy 102                               simple 82
     sunﬂower 102
Capsella bursa-pastoris 73, 120         data base ampliﬁcation 63
Carex laevigata 116                     da Vinci’s postulate 57
catastrophe 134                         delay mechanism 66
cell 150                                derivation 4, 42, 135, 147, 171


                                  225
226                                                         Index

derivation (continued)          growth function 36, 140
    direct 4                    growth potential 88, 123
    length 4
    stochastic 28               heading 6
developmental sequence 4        heading vector 119
developmental switch 65         heterocyst 44
dibotryoid 76                   Hooke’s law 151, 172
    closed 79
    open 76                     IFS 177
direction vector 13                  controlled 182
divergence angle 52, 100, 109   inference 11
Dryopteris thelypteris 162      inﬂorescence 71
                                initiator 1
edge 168                        interaction 65
    directed 146                internode 21
    neutral 146
embryo 166                      Koch construction 1, 7
encyclic number 110             L-system 2
entry point 13                       1L 30
entry vector 13                      2L 30
Euler method 153                     bracketed 24
exit point 13                        cellwork 168
exit vector 13                       complete 64
expression 41                        context-sensitive 30
fern 120                             deterministic 4
Fibonacci                            DOL 4
    angle 99                         IL 30
    number 99, 102                   map 146
    series 37                        mBPCOL 168
ﬂorigen 76                           mBPMOL 146, 168
ﬂower head 96                        OL 4
ﬂowering sequence                    parametric 41
    acropetal 73, 78                 partial 64
    basipetal 75, 78, 87             pseudo 18
fractal 6                            scheme 64
                                     stochastic 28, 66
gametophyte 153                      string 4
generative helix 109                 table 66
generator 1                          timed 135
golden mean 99                       tree 23
grammar 2                       leaf
growth                               compound 128, 142
    exponential 36, 142              cordate 122
    linear 140                       simple 123
    polynomial 37, 143          letter 3
    sigmoidal 38, 39                 timed 135
    square-root 38              letter occurrence 28
Index                                                         227

lifetime 135                   raceme 71
lilac 93                           closed 75
lily-of-the-valley 73, 127         compound 76, 81
lineage 65                         open 71
Lychnis coronaria 83           recursive formula 15
                               region 145
map 145                        rewriting 1
map interpretation                 edge 11, 46
   center of gravity 150           node 13, 47
   dynamic 151, 172            root node 21
   wall subdivision 150        rose 106, 126
marker 147, 170
   matching 147                segment 154
Microsorium linguaeforme 153       basal 159
microworld 187                 signal 31, 67
mint 79                            acropetal 76, 88
module 41, 134                     basipetal 88
Mycelis muralis 87             spadix 96
                               spike 95
Newton’s law 152               spruce cone 116
nitrogen compound 44           statement
                                   #deﬁne 44
object 189                         #ignore 32
oﬀset 148                          #include 44
order of continuity 141        step size 6
osmotic pressure 151, 173      string 3
panicle 86                         bracketed 24
parameter 41                   subapical growth 26
parastichy 102                 subﬁgure 13
    order 110                  successor 4, 42, 147
Pascal triangle 38             terminal node 21
Patella vulgata 166            thallus 154
periclinal ratio 166           thyrsus 85
phase eﬀect 63, 73             tile 12
phyllotaxis 99                 total elapsed time 136
    cylindrical 109            tree
    planar 100                      axial 21
pineapple 116                       rooted 21
plastochron 65                 tribotryoid 81
predecessor 4, 42, 147         tropism vector 58
production 1                   turtle interpretation 6, 18, 26,
    edge 146, 168                       46, 57, 73, 119, 120, 122,
    identity 4                          127
    inconsistent 171
    probabilistic 28           umbel 95
    string 4                   Umbelliferae 128
    tree 23                    up vector 119
228                      Index

virtual laboratory 187
voxel space 51
wall 150, 168
    anticlinal 155
    periclinal 155
    tension 151, 173
water-lily 106
wild carrot 95, 131
word 3
    parametric 41
    timed 135
zinnia 106

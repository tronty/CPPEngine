http://media.pragprog.com/titles/jbmaze/code/jbmaze-code.tgz
http://media.pragprog.com/titles/jbmaze/code/jbmaze-code.zip

#deadend_counts.rb:  total_deadends = deadend_counts.inject(0) { |s,a| s + a } 
#deadend_counts.rb:sorted_algorithms = algorithms.sort_by { |algorithm| -averages[algorithm] }

# prims.rb:    grid.each_cell { |cell| costs[cell] = rand(100) }
# sphere_grid.rb:      hemi.each_cell { |cell| yield cell }
# wilsons.rb:    grid.each_cell { |cell| unvisited << cell }
# recursive_division.rb:      cell.neighbors.each { |n| cell.link(n, false) }
# ellers.rb:      @cells_in_set.each { |set, cells| yield set, cells }
# grid.rb:      neighbors = cell.neighbors.reject { |n| cell.linked?(n) }" 

# kruskals.rb:      @neighbors.delete_if { |left,right| left == cell || right == cell }
# mask.rb:    lines = File.readlines(file).map { |line| line.strip } 
# polar_grid.rb:      rows[row] = Array.new(cells) { |col| PolarCell.new(row, col) } 
# sphere_grid.rb:      grid[row] = Array.new(cells) { |col| HemisphereCell.new(id, row, col) }
# sphere_grid.rb:    Array.new(2) { |id| HemisphereGrid.new(id, @equator) } 
# prims.rb:      available_neighbors = cell.neighbors.select { |n| n.links.empty? } 
# recursive_backtracker.rb:      neighbors = current.neighbors.select { |n| n.links.empty? } 
# grid.rb:      best = neighbors.select { |n| n.links.count == 1 } 
# growing_tree.rb:      available_neighbors = cell.neighbors.select { |n| n.links.empty? }
# hunt_and_kill.rb:      unvisited_neighbors = current.neighbors.select { |n| n.links.empty? } 
# hunt_and_kill.rb:          visited_neighbors = cell.neighbors.select { |n| n.links.any? }

#prims.rb:      cell = active.min { |a,b| costs[a] <=> costs[b] }
#prims.rb:        neighbor = available_neighbors.min { |a,b| costs[a] <=> costs[b] }

growing_tree_demo.rb:GrowingTree.on(grid) { |list| list.sample }
growing_tree_demo.rb:GrowingTree.on(grid) { |list| list.last }
growing_tree_demo.rb:GrowingTree.on(grid) { |list| (rand(2) == 0) ? list.last : list.sample }

#weighted_cell.rb:      cell = pending.sort_by { |c| weights[c] }.first 

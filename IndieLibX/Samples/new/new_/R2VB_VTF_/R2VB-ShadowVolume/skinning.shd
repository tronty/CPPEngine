[Vertex shader]

float xBias;

struct VsOut {
	float4 Pos: POSITION;
	float2 tc0: TEXCOORD0;
};

VsOut main(float4 pos: POSITION, float2 t0 : TEXCOORD0){
	VsOut Out;

	Out.Pos = pos;
	Out.tc0.x = t0.x + xBias;
	Out.tc0.y = t0.y;

	return Out;
}


[Fragment shader]

sampler skinningVertex;
sampler vertexBoneIndex;
sampler vertexWeight;
sampler boneMatrix;

float4 bias;

float4x4 getMatrix(sampler s, float mi)
{
	float4x4 m;
	float4 XOff;
	
	XOff = mi + bias;
	
	m[0] = tex2D(s, float2(XOff.x, 0.0f));
	m[1] = tex2D(s, float2(XOff.y, 0.0f));
	m[2] = tex2D(s, float2(XOff.z, 0.0f));
	m[3] = tex2D(s, float2(XOff.w, 0.0f));
	
	return m;
}

float4 main(float4 t0: TEXCOORD0) : COLOR {
	float4 Out;
	float4x4 M;

	float4 Index = tex2D(vertexBoneIndex, t0); // get bone index.
	float4 Weight = tex2D(vertexWeight, t0); // get vertex position or normal.
	float4 Vertex = tex2D(skinningVertex, t0); // get vertex weight.

	M = getMatrix(boneMatrix, Index.x); // get bone matrix indexed by bone index 0.
	Out.xyz = mul(Vertex, M).xyz*Weight.x;
	
	M = getMatrix(boneMatrix, Index.y); // get bone matrix indexed by bone index 1.
	Out.xyz += mul(Vertex, M).xyz*Weight.y;

	M = getMatrix(boneMatrix, Index.z); // get bone matrix indexed by bone index 2.
	Out.xyz += mul(Vertex, M).xyz*Weight.z;

	M = getMatrix(boneMatrix, Index.w); // get bone matrix indexed by bone index 3.
	Out.xyz += mul(Vertex, M).xyz*Weight.w;

	Out.w = 1.0f;
	return Out;
}

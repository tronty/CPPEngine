VertexShader multiModelVS = asm {

    //
    // Generated by Microsoft (R) HLSL Shader Compiler
    //
    //
    // Resource Bindings:
    //
    // Name                   Type  Format         Dim Slot Elements
    // ---------------- ---------- ------- ----------- ---- --------
    // skinVertexPos       texture   float          2d    0        1
    // skinVertexNormal    texture   float          2d    1        1
    // skinVertexTexCoord    texture   float          2d    2        1
    // skinVertexBoneIndex    texture   float          2d    3        1
    // boneMatrixBuffer    texture   float         buf    4        1
    //
    //
    //
    // Input signature:
    //
    // Name             Index   Mask Register SysValue Format   Used
    // ---------------- ----- ------ -------- -------- ------ ------
    // SV_VertexID          0   x           0   VERTID   uint   x   
    // SV_InstanceID        0   x           1   INSTID   uint   x   
    //
    //
    // Output signature:
    //
    // Name             Index   Mask Register SysValue Format   Used
    // ---------------- ----- ------ -------- -------- ------ ------
    // SKINNED              0   xyzw        0     NONE  float   xyzw
    // NORMAL               0   xyzw        1     NONE  float   xyzw
    //
    vs_4_0
    dcl_input_sgv  v0.x , vertex_id
    dcl_input_sgv  v1.x , instance_id
    dcl_output o0.xyzw
    dcl_output o1.xyzw
    dcl_resource_texture2d ( float , float , float , float ) t0
    dcl_resource_texture2d ( float , float , float , float ) t1
    dcl_resource_texture2d ( float , float , float , float ) t2
    dcl_resource_texture2d ( float , float , float , float ) t3
    dcl_resource_buffer ( float , float , float , float ) t4
    dcl_temps 12
    utof r0.x, v0.x
    ftoi r0.x, r0.x
    ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
    ld r1.xyzw, r0.xyzw, t0.xyzw
    ld r2.xyzw, r0.xyzw, t1.xyzw
    ld r3.xyzw, r0.xyzw, t3.xyzw
    ftou r3.xyzw, r3.xyzw
    ld r0.xyzw, r0.xyzw, t2.xyzw
    ishl r3.x, r3.x, l(1)
    umul null, r4.x, v1.x, l(62)
    iadd r3.x, r3.x, r4.x
    ld r5.xyzw, r3.xxxx, t4.xyzw
    iadd r3.x, r3.x, l(1)
    ld r6.xyzw, r3.xxxx, t4.xyzw
    sincos r4.yz, null, r5.xxyx
    mov r7.y, -r4.y
    sincos null, r5.yw, r5.xxxy
    mov r8.x, -r4.z
    sincos null, r9.y, r5.z
    sincos r9.x, null, r5.z
    mov r9.z, -r9.x
    mul r5.x, r4.z, r4.y
    mul r8.y, r4.y, r5.w
    mul r7.x, r4.z, r5.y
    mul r8.z, r5.w, r5.y
    mul r10.x, r5.w, r9.y
    mul r11.x, r5.w, r9.x
    dp2 r10.y, r5.xyxx, r9.yzyy
    dp2 r11.y, r5.xyxx, r9.xyxx
    dp2 r10.z, r7.xyxx, r9.yzyy
    dp2 r11.z, r7.xyxx, r9.xyxx
    mov r5.xyz, r1.xyzx
    mov r5.w, l(1.000000)
    mov r10.w, r6.x
    dp4 r1.x, r5.xyzw, r10.xyzw
    mov r11.w, r6.y
    dp4 r1.y, r5.xyzw, r11.xyzw
    mov r8.w, r6.z
    dp4 r1.z, r5.xyzw, r8.xyzw
    mul r1.xyz, r1.wwww, r1.xyzx
    dp3 o1.x, r2.xyzx, r10.xyzx
    dp3 o1.y, r2.xyzx, r11.xyzx
    dp3 o1.z, r2.xyzx, r8.xyzx
    ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
    if_nz r2.x
      ishl r2.x, r3.y, l(1)
      iadd r2.x, r2.x, r4.x
      ld r6.xyzw, r2.xxxx, t4.xyzw
      iadd r2.x, r2.x, l(1)
      ld r7.xyzw, r2.xxxx, t4.xyzw
      sincos r2.xy, null, r6.xyxx
      mov r3.y, -r2.x
      sincos null, r4.zw, r6.xxxy
      mov r8.x, -r2.y
      sincos null, r6.y, r6.z
      sincos r6.x, null, r6.z
      mov r6.w, -r6.x
      mul r4.y, r2.y, r2.x
      mul r8.y, r2.x, r4.w
      mul r3.x, r2.y, r4.z
      mul r8.z, r4.w, r4.z
      mul r9.x, r4.w, r6.y
      mul r10.x, r4.w, r6.x
      dp2 r9.y, r4.yzyy, r6.ywyy
      dp2 r10.y, r4.yzyy, r6.xyxx
      dp2 r9.z, r3.xyxx, r6.ywyy
      dp2 r10.z, r3.xyxx, r6.xyxx
      mov r9.w, r7.x
      dp4 r2.x, r5.xyzw, r9.xyzw
      mov r10.w, r7.y
      dp4 r2.y, r5.xyzw, r10.xyzw
      mov r8.w, r7.z
      dp4 r2.z, r5.xyzw, r8.xyzw
      mad r1.xyz, r2.wwww, r2.xyzx, r1.xyzx
      ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
      if_nz r2.x
        ishl r2.x, r3.z, l(1)
        iadd r2.x, r2.x, r4.x
        ld r6.xyzw, r2.xxxx, t4.xyzw
        iadd r2.x, r2.x, l(1)
        ld r2.xyzw, r2.xxxx, t4.xyzw
        sincos r3.xy, null, r6.xyxx
        mov r4.z, -r3.x
        sincos null, r6.yw, r6.xxxy
        mov r7.x, -r3.y
        sincos null, r8.y, r6.z
        sincos r8.x, null, r6.z
        mov r8.z, -r8.x
        mul r6.x, r3.y, r3.x
        mul r7.y, r3.x, r6.w
        mul r4.y, r3.y, r6.y
        mul r7.z, r6.w, r6.y
        mul r9.x, r6.w, r8.y
        mul r10.x, r6.w, r8.x
        dp2 r9.y, r6.xyxx, r8.yzyy
        dp2 r10.y, r6.xyxx, r8.xyxx
        dp2 r9.z, r4.yzyy, r8.yzyy
        dp2 r10.z, r4.yzyy, r8.xyxx
        mov r9.w, r2.x
        dp4 r3.x, r5.xyzw, r9.xyzw
        mov r10.w, r2.y
        dp4 r3.y, r5.xyzw, r10.xyzw
        mov r7.w, r2.z
        dp4 r3.z, r5.xyzw, r7.xyzw
        mad r1.xyz, r0.zzzz, r3.xyzx, r1.xyzx
        ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
        if_nz r0.z
          ishl r0.z, r3.w, l(1)
          iadd r0.z, r0.z, r4.x
          ld r2.xyzw, r0.zzzz, t4.xyzw
          iadd r0.z, r0.z, l(1)
          ld r3.xyzw, r0.zzzz, t4.xyzw
          sincos r4.xy, null, r2.xyxx
          mov r4.w, -r4.x
          sincos null, r2.yw, r2.xxxy
          mov r6.x, -r4.y
          sincos null, r7.y, r2.z
          sincos r7.x, null, r2.z
          mov r7.z, -r7.x
          mul r2.x, r4.y, r4.x
          mul r6.y, r4.x, r2.w
          mul r4.z, r4.y, r2.y
          mul r6.z, r2.w, r2.y
          mul r8.x, r2.w, r7.y
          mul r9.x, r2.w, r7.x
          dp2 r8.y, r2.xyxx, r7.yzyy
          dp2 r9.y, r2.xyxx, r7.xyxx
          dp2 r8.z, r4.zwzz, r7.yzyy
          dp2 r9.z, r4.zwzz, r7.xyxx
          mov r8.w, r3.x
          dp4 r2.x, r5.xyzw, r8.xyzw
          mov r9.w, r3.y
          dp4 r2.y, r5.xyzw, r9.xyzw
          mov r6.w, r3.z
          dp4 r2.z, r5.xyzw, r6.xyzw
          mad r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
        endif 
      endif 
    endif 
    udiv null, r0.z, v1.x, l(4)
    ushr r0.w, v1.x, l(2)
    udiv null, r0.w, r0.w, l(4)
    utof r2.xy, r0.zwzz
    mad r0.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
    mov r1.w, r0.x
    mov o0.xyzw, r1.xyzw
    mov o1.w, r0.y
    ret 
    // Approximately 148 instruction slots used
    
};

technique10 techConstantBuffer
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            // cbuffer cbAnimMatrices
            // {
            //
            //   float4x4 boneMatrixConstantBuffer[32];// Offset:    0 Size:  2048
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // skinVertexPos       texture   float          2d    0        1
            // skinVertexNormal    texture   float          2d    1        1
            // skinVertexTexCoord    texture   float          2d    2        1
            // skinVertexBoneIndex    texture   float          2d    3        1
            // cbGlobal            cbuffer      NA          NA    0        1
            // cbAnimMatrices      cbuffer      NA          NA    1        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_VertexID          0   x           0   VERTID   uint   x   
            // SV_InstanceID        0   x           1   INSTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input_sgv  v0.x , vertex_id
            dcl_input_sgv  v1.x , instance_id
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_constantbuffer  cb1[128], dynamicIndexed
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_resource_texture2d ( float , float , float , float ) t3
            dcl_temps 6
            utof r0.x, v0.x
            ftoi r0.x, r0.x
            ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
            ld r1.xyzw, r0.xyzw, t0.xyzw
            ld r2.xyzw, r0.xyzw, t1.xyzw
            ld r3.xyzw, r0.xyzw, t3.xyzw
            ftou r3.xyzw, r3.xyzw
            ld r0.xyzw, r0.xyzw, t2.xyzw
            umul null, r3.x, r3.x, l(4)
            mov r4.xyz, r1.xyzx
            mov r4.w, l(1.000000)
            dp4 r5.x, r4.xyzw, cb1[r3.x + 0].xyzw
            dp4 r5.y, r4.xyzw, cb1[r3.x + 1].xyzw
            dp4 r5.z, r4.xyzw, cb1[r3.x + 2].xyzw
            dp4 r5.w, r4.xyzw, cb1[r3.x + 3].xyzw
            mul r1.xyzw, r1.wwww, r5.xyzw
            dp3 o2.x, r2.xyzx, cb1[r3.x + 0].xyzx
            dp3 o2.y, r2.xyzx, cb1[r3.x + 1].xyzx
            dp3 o2.z, r2.xyzx, cb1[r3.x + 2].xyzx
            ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
            if_nz r2.x
              umul null, r2.x, r3.y, l(4)
              dp4 r5.x, r4.xyzw, cb1[r2.x + 0].xyzw
              dp4 r5.y, r4.xyzw, cb1[r2.x + 1].xyzw
              dp4 r5.z, r4.xyzw, cb1[r2.x + 2].xyzw
              dp4 r5.w, r4.xyzw, cb1[r2.x + 3].xyzw
              mad r1.xyzw, r2.wwww, r5.xyzw, r1.xyzw
              ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
              if_nz r2.x
                umul null, r2.x, r3.z, l(4)
                dp4 r5.x, r4.xyzw, cb1[r2.x + 0].xyzw
                dp4 r5.y, r4.xyzw, cb1[r2.x + 1].xyzw
                dp4 r5.z, r4.xyzw, cb1[r2.x + 2].xyzw
                dp4 r5.w, r4.xyzw, cb1[r2.x + 3].xyzw
                mad r1.xyzw, r0.zzzz, r5.xyzw, r1.xyzw
                ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
                if_nz r0.z
                  umul null, r0.z, r3.w, l(4)
                  dp4 r2.x, r4.xyzw, cb1[r0.z + 0].xyzw
                  dp4 r2.y, r4.xyzw, cb1[r0.z + 1].xyzw
                  dp4 r2.z, r4.xyzw, cb1[r0.z + 2].xyzw
                  dp4 r2.w, r4.xyzw, cb1[r0.z + 3].xyzw
                  mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
                endif 
              endif 
            endif 
            udiv null, r0.z, v1.x, l(4)
            ushr r0.w, v1.x, l(2)
            udiv null, r0.w, r0.w, l(4)
            utof r2.xy, r0.zwzz
            mad o1.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
            dp4 o0.x, r1.xyzw, cb0[0].xyzw
            dp4 o0.y, r1.xyzw, cb0[1].xyzw
            dp4 o0.z, r1.xyzw, cb0[2].xyzw
            dp4 o0.w, r1.xyzw, cb0[3].xyzw
            add o3.xyz, -r1.xyzx, cb0[8].xyzx
            add o4.xyz, -r1.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 58 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // diffuseMap          texture   float          2d    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v2.xyz
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_sampler s0, mode_default
            dcl_temps 3
            dp3 r0.x, -v3.xyzx, -v3.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, -v3.xyzx
            dp3 r0.w, v2.xyzx, v2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, v2.xyzx
            dp3 r0.w, r0.xyzx, r1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, r1.xyzx, -r0.wwww, r0.xyzx
            dp3 r0.w, v4.xyzx, v4.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, v4.xyzx
            dp3_sat r0.x, r0.xyzx, r2.xyzx
            dp3_sat r0.y, r1.xyzx, r2.xyzx
            log r0.x, r0.x
            mul r0.x, r0.x, l(16.000000)
            exp r0.x, r0.x
            add r0.y, r0.y, l(0.300000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.yyyy, r0.xxxx
            mov_sat o0.w, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
    }
}

technique10 techBuffer
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // skinVertexPos       texture   float          2d    0        1
            // skinVertexNormal    texture   float          2d    1        1
            // skinVertexTexCoord    texture   float          2d    2        1
            // skinVertexBoneIndex    texture   float          2d    3        1
            // boneMatrixBuffer    texture   float         buf    4        1
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_VertexID          0   x           0   VERTID   uint   x   
            // SV_InstanceID        0   x           1   INSTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input_sgv  v0.x , vertex_id
            dcl_input_sgv  v1.x , instance_id
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_resource_texture2d ( float , float , float , float ) t3
            dcl_resource_buffer ( float , float , float , float ) t4
            dcl_temps 9
            utof r0.x, v0.x
            ftoi r0.x, r0.x
            ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
            ld r1.xyzw, r0.xyzw, t0.xyzw
            ld r2.xyzw, r0.xyzw, t1.xyzw
            ld r3.xyzw, r0.xyzw, t3.xyzw
            ftou r3.xyzw, r3.xyzw
            ld r0.xyzw, r0.xyzw, t2.xyzw
            umul null, r3.x, r3.x, l(4)
            ld r4.xyzw, r3.xxxx, t4.xyzw
            iadd r5.x, r3.x, l(1)
            ld r5.xyzw, r5.xxxx, t4.xyzw
            iadd r6.x, r3.x, l(2)
            ld r6.xyzw, r6.xxxx, t4.xyzw
            iadd r3.x, r3.x, l(3)
            ld r7.xyzw, r3.xxxx, t4.xyzw
            mul r8.xyzw, r1.yyyy, r5.xyzw
            mad r8.xyzw, r1.xxxx, r4.xyzw, r8.xyzw
            mad r8.xyzw, r1.zzzz, r6.xyzw, r8.xyzw
            add r7.xyzw, r7.xyzw, r8.xyzw
            mul r7.xyzw, r1.wwww, r7.xyzw
            mul r5.xyz, r2.yyyy, r5.xyzx
            mad r4.xyz, r2.xxxx, r4.xyzx, r5.xyzx
            mad o2.xyz, r2.zzzz, r6.xyzx, r4.xyzx
            ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
            if_nz r1.w
              umul null, r1.w, r3.y, l(4)
              ld r4.xyzw, r1.wwww, t4.xyzw
              iadd r2.x, r1.w, l(1)
              ld r5.xyzw, r2.xxxx, t4.xyzw
              iadd r2.x, r1.w, l(2)
              ld r6.xyzw, r2.xxxx, t4.xyzw
              iadd r1.w, r1.w, l(3)
              ld r8.xyzw, r1.wwww, t4.xyzw
              mul r5.xyzw, r1.yyyy, r5.xyzw
              mad r4.xyzw, r1.xxxx, r4.xyzw, r5.xyzw
              mad r4.xyzw, r1.zzzz, r6.xyzw, r4.xyzw
              add r4.xyzw, r8.xyzw, r4.xyzw
              mad r7.xyzw, r2.wwww, r4.xyzw, r7.xyzw
              ne r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
              if_nz r1.w
                umul null, r1.w, r3.z, l(4)
                ld r2.xyzw, r1.wwww, t4.xyzw
                iadd r3.x, r1.w, l(1)
                ld r4.xyzw, r3.xxxx, t4.xyzw
                iadd r3.x, r1.w, l(2)
                ld r5.xyzw, r3.xxxx, t4.xyzw
                iadd r1.w, r1.w, l(3)
                ld r6.xyzw, r1.wwww, t4.xyzw
                mul r4.xyzw, r1.yyyy, r4.xyzw
                mad r2.xyzw, r1.xxxx, r2.xyzw, r4.xyzw
                mad r2.xyzw, r1.zzzz, r5.xyzw, r2.xyzw
                add r2.xyzw, r6.xyzw, r2.xyzw
                mad r7.xyzw, r0.zzzz, r2.xyzw, r7.xyzw
                ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
                if_nz r0.z
                  umul null, r0.z, r3.w, l(4)
                  ld r2.xyzw, r0.zzzz, t4.xyzw
                  iadd r1.w, r0.z, l(1)
                  ld r3.xyzw, r1.wwww, t4.xyzw
                  iadd r1.w, r0.z, l(2)
                  ld r4.xyzw, r1.wwww, t4.xyzw
                  iadd r0.z, r0.z, l(3)
                  ld r5.xyzw, r0.zzzz, t4.xyzw
                  mul r3.xyzw, r1.yyyy, r3.xyzw
                  mad r2.xyzw, r1.xxxx, r2.xyzw, r3.xyzw
                  mad r1.xyzw, r1.zzzz, r4.xyzw, r2.xyzw
                  add r1.xyzw, r5.xyzw, r1.xyzw
                  mad r7.xyzw, r0.wwww, r1.xyzw, r7.xyzw
                endif 
              endif 
            endif 
            udiv null, r0.z, v1.x, l(4)
            ushr r0.w, v1.x, l(2)
            udiv null, r0.w, r0.w, l(4)
            utof r1.xy, r0.zwzz
            mad o1.xy, r1.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
            dp4 o0.x, r7.xyzw, cb0[0].xyzw
            dp4 o0.y, r7.xyzw, cb0[1].xyzw
            dp4 o0.z, r7.xyzw, cb0[2].xyzw
            dp4 o0.w, r7.xyzw, cb0[3].xyzw
            add o3.xyz, -r7.xyzx, cb0[8].xyzx
            add o4.xyz, -r7.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 84 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // diffuseMap          texture   float          2d    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v2.xyz
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_sampler s0, mode_default
            dcl_temps 3
            dp3 r0.x, -v3.xyzx, -v3.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, -v3.xyzx
            dp3 r0.w, v2.xyzx, v2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, v2.xyzx
            dp3 r0.w, r0.xyzx, r1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, r1.xyzx, -r0.wwww, r0.xyzx
            dp3 r0.w, v4.xyzx, v4.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, v4.xyzx
            dp3_sat r0.x, r0.xyzx, r2.xyzx
            dp3_sat r0.y, r1.xyzx, r2.xyzx
            log r0.x, r0.x
            mul r0.x, r0.x, l(16.000000)
            exp r0.x, r0.x
            add r0.y, r0.y, l(0.300000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.yyyy, r0.xxxx
            mov_sat o0.w, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
    }
}

technique10 techGPUResolveSkinning
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // positionKeys        texture   float          2d    0        1
            // rotationKeys        texture   float          2d    1        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // MODELROT             0   xyzw        0     NONE  float   xyzw
            // MODELPOS             0   xyzw        1     NONE  float   xyzw
            // SV_VertexID          0   x           2   VERTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // ROTKEY               0   xyzw        0     NONE  float   xyzw
            // POSKEY               0   xyzw        1     NONE  float   xyzw
            //
            vs_4_0
            dcl_input v0.xyzw
            dcl_input v1.xyzw
            dcl_input_sgv  v2.x , vertex_id
            dcl_output o0.xyzw
            dcl_output o1.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_temps 10
            round_ni r0.x, v1.w
            ftou r0.x, r0.x
            iadd r0.y, r0.x, l(1)
            umul null, r0.xy, r0.xyxx, l(31, 31, 0, 0)
            iadd r0.xy, r0.xyxx, v2.xxxx
            frc r0.z, v1.w
            udiv null, r1.x, r0.x, l(2048)
            udiv r1.y, null, r0.x, l(2048)
            mov r1.zw, l(0, 0, 0, 0)
            ld r2.xyzw, r1.xyzw, t0.xyzw
            ld r1.xyzw, r1.xyzw, t1.xyzw
            udiv null, r3.x, r0.y, l(2048)
            udiv r3.y, null, r0.y, l(2048)
            mov r3.zw, l(0, 0, 0, 0)
            ld r4.xyzw, r3.xyzw, t0.xyzw
            ld r3.xyzw, r3.xyzw, t1.xyzw
            add r0.xyw, -r2.xyxz, r4.xyxz
            mad r2.xyz, r0.zzzz, r0.xywx, r2.xyzx
            add r3.xyzw, -r1.xyzw, r3.xyzw
            mad r0.xyzw, r0.zzzz, r3.xyzw, r1.xyzw
            add r1.xyz, v0.xyzx, v0.xyzx
            mul r1.w, r1.x, v0.w
            mul r3.xyzw, r1.yyzz, v0.ywzw
            mad r4.x, v0.y, r1.y, r3.z
            add r4.x, -r4.x, l(1.000000)
            mad r5.x, v0.x, r1.y, r3.w
            mad r6.x, v0.x, r1.z, -r3.y
            mad r4.y, v0.x, r1.y, -r3.w
            mad r1.y, v0.x, r1.x, r3.z
            add r5.y, -r1.y, l(1.000000)
            mad r6.y, v0.y, r1.z, r1.w
            mad r4.z, v0.x, r1.z, r3.y
            mad r5.z, v0.y, r1.z, -r1.w
            mad r1.x, v0.x, r1.x, r3.x
            add r6.z, -r1.x, l(1.000000)
            add r1.xyz, r0.xyzx, r0.xyzx
            mul r1.w, r0.w, r1.x
            mul r3.xy, r0.ywyy, r1.yyyy
            mul r7.xyz, r0.yzwy, r1.zzzz
            mad r8.xz, r0.yyxy, r1.yyyy, r7.yyzy
            add r8.y, -r8.x, l(1.000000)
            mad r8.w, r0.x, r1.z, -r3.y
            mad r9.y, r0.x, r1.y, -r7.z
            mad r9.xw, r0.xxxw, r1.xxxx, r7.yyyx
            add r9.z, -r9.x, l(1.000000)
            mad r3.y, r0.x, r1.z, r3.y
            mad r3.z, r0.y, r1.z, -r1.w
            mad r0.x, r0.x, r1.x, r3.x
            add r3.w, -r0.x, l(1.000000)
            dp3 r0.x, r8.yzwy, r6.xyzx
            mov r2.w, l(1.000000)
            mov r4.w, v1.x
            dp4 o1.x, r2.xyzw, r4.xyzw
            mov r5.w, v1.y
            dp4 o1.y, r2.xyzw, r5.xyzw
            mov r6.w, v1.z
            dp4 o1.z, r2.xyzw, r6.xyzw
            mad r0.y, -r0.x, r0.x, l(1.000000)
            sqrt r0.y, r0.y
            min r0.z, |r0.x|, r0.y
            max r0.w, |r0.x|, r0.y
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
            mul r0.z, r0.z, r0.w
            mul r0.w, r0.z, r0.z
            mad r1.x, r0.w, l(0.020835), l(-0.085133)
            mad r1.x, r0.w, r1.x, l(0.180141)
            mad r1.x, r0.w, r1.x, l(-0.330299)
            mad r0.w, r0.w, r1.x, l(0.999866)
            mul r1.x, r0.z, r0.w
            lt r1.y, r0.y, |r0.x|
            mad r1.x, r1.x, l(-2.000000), l(1.570796)
            and r1.x, r1.x, r1.y
            mad r0.z, r0.z, r0.w, r1.x
            min r0.w, -r0.x, r0.y
            max r1.x, -r0.x, r0.y
            lt r0.w, r0.w, -r0.w
            ge r1.x, r1.x, -r1.x
            and r0.w, r0.w, r1.x
            movc r1.z, r0.w, -r0.z, r0.z
            ne r0.xz, -r0.xxxx, l(1.000000, 0.000000, -1.000000, 0.000000)
            and r0.x, r0.x, r0.z
            if_nz r0.x
              dp3 r0.x, r8.yzwy, r4.xyzx
              dp3 r0.z, r8.yzwy, r5.xyzx
              dp3 r0.w, r9.yzwy, r6.xyzx
              dp3 r2.x, r3.yzwy, r6.xyzx
              div r2.x, r2.x, r0.y
              div r0.w, r0.w, r0.y
              min r2.y, |r2.x|, |r0.w|
              max r2.z, |r2.x|, |r0.w|
              div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
              mul r2.y, r2.y, r2.z
              mul r2.z, r2.y, r2.y
              mad r2.w, r2.z, l(0.020835), l(-0.085133)
              mad r2.w, r2.z, r2.w, l(0.180141)
              mad r2.w, r2.z, r2.w, l(-0.330299)
              mad r2.z, r2.z, r2.w, l(0.999866)
              mul r2.w, r2.y, r2.z
              lt r3.x, |r2.x|, |r0.w|
              mad r2.w, r2.w, l(-2.000000), l(1.570796)
              and r2.w, r2.w, r3.x
              mad r2.y, r2.y, r2.z, r2.w
              lt r2.z, r2.x, -r2.x
              and r2.z, r2.z, l(0xc0490fdb)
              add r2.y, r2.y, r2.z
              min r2.z, r2.x, r0.w
              max r0.w, r2.x, r0.w
              lt r2.x, r2.z, -r2.z
              ge r0.w, r0.w, -r0.w
              and r0.w, r2.x, r0.w
              movc r1.x, r0.w, -r2.y, r2.y
              div r0.xy, r0.xzxx, r0.yyyy
              min r0.z, |r0.x|, |r0.y|
              max r0.w, |r0.x|, |r0.y|
              div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
              mul r0.z, r0.z, r0.w
              mul r0.w, r0.z, r0.z
              mad r2.x, r0.w, l(0.020835), l(-0.085133)
              mad r2.x, r0.w, r2.x, l(0.180141)
              mad r2.x, r0.w, r2.x, l(-0.330299)
              mad r0.w, r0.w, r2.x, l(0.999866)
              mul r2.x, r0.z, r0.w
              lt r2.y, |r0.x|, |r0.y|
              mad r2.x, r2.x, l(-2.000000), l(1.570796)
              and r2.x, r2.x, r2.y
              mad r0.z, r0.z, r0.w, r2.x
              lt r0.w, r0.x, -r0.x
              and r0.w, r0.w, l(0xc0490fdb)
              add r0.z, r0.z, r0.w
              min r0.w, r0.x, r0.y
              max r0.x, r0.x, r0.y
              lt r0.y, r0.w, -r0.w
              ge r0.x, r0.x, -r0.x
              and r0.x, r0.y, r0.x
              movc r1.y, r0.x, -r0.z, r0.z
            else 
              dp3 r0.x, r9.yzwy, r5.xyzx
              dp3 r0.y, r3.yzwy, r5.xyzx
              min r0.z, |r0.x|, |r0.y|
              max r0.w, |r0.x|, |r0.y|
              div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
              mul r0.z, r0.z, r0.w
              mul r0.w, r0.z, r0.z
              mad r2.x, r0.w, l(0.020835), l(-0.085133)
              mad r2.x, r0.w, r2.x, l(0.180141)
              mad r2.x, r0.w, r2.x, l(-0.330299)
              mad r0.w, r0.w, r2.x, l(0.999866)
              mul r2.x, r0.z, r0.w
              lt r2.y, |r0.x|, |r0.y|
              mad r2.x, r2.x, l(-2.000000), l(1.570796)
              and r2.x, r2.x, r2.y
              mad r0.z, r0.z, r0.w, r2.x
              lt r0.w, r0.x, -r0.x
              and r0.w, r0.w, l(0xc0490fdb)
              add r0.z, r0.z, r0.w
              min r0.w, r0.x, -r0.y
              max r0.x, r0.x, -r0.y
              lt r0.y, r0.w, -r0.w
              ge r0.x, r0.x, -r0.x
              and r0.x, r0.y, r0.x
              movc r1.x, r0.x, -r0.z, r0.z
              mov r1.y, l(0)
            endif 
            mov r1.w, l(0)
            mov o0.xyzw, r1.xzyw
            mov o1.w, l(1.000000)
            ret 
            // Approximately 167 instruction slots used
                    
        };
        GeometryShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // positionKeys        texture   float          2d    0        1
            // rotationKeys        texture   float          2d    1        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // MODELROT             0   xyzw        0     NONE  float   xyzw
            // MODELPOS             0   xyzw        1     NONE  float   xyzw
            // SV_VertexID          0   x           2   VERTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // ROTKEY               0   xyzw        0     NONE  float   xyzw
            // POSKEY               0   xyzw        1     NONE  float   xyzw
            //
            vs_4_0
            dcl_input v0.xyzw
            dcl_input v1.xyzw
            dcl_input_sgv  v2.x , vertex_id
            dcl_output o0.xyzw
            dcl_output o1.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_temps 10
            round_ni r0.x, v1.w
            ftou r0.x, r0.x
            iadd r0.y, r0.x, l(1)
            umul null, r0.xy, r0.xyxx, l(31, 31, 0, 0)
            iadd r0.xy, r0.xyxx, v2.xxxx
            frc r0.z, v1.w
            udiv null, r1.x, r0.x, l(2048)
            udiv r1.y, null, r0.x, l(2048)
            mov r1.zw, l(0, 0, 0, 0)
            ld r2.xyzw, r1.xyzw, t0.xyzw
            ld r1.xyzw, r1.xyzw, t1.xyzw
            udiv null, r3.x, r0.y, l(2048)
            udiv r3.y, null, r0.y, l(2048)
            mov r3.zw, l(0, 0, 0, 0)
            ld r4.xyzw, r3.xyzw, t0.xyzw
            ld r3.xyzw, r3.xyzw, t1.xyzw
            add r0.xyw, -r2.xyxz, r4.xyxz
            mad r2.xyz, r0.zzzz, r0.xywx, r2.xyzx
            add r3.xyzw, -r1.xyzw, r3.xyzw
            mad r0.xyzw, r0.zzzz, r3.xyzw, r1.xyzw
            add r1.xyz, v0.xyzx, v0.xyzx
            mul r1.w, r1.x, v0.w
            mul r3.xyzw, r1.yyzz, v0.ywzw
            mad r4.x, v0.y, r1.y, r3.z
            add r4.x, -r4.x, l(1.000000)
            mad r5.x, v0.x, r1.y, r3.w
            mad r6.x, v0.x, r1.z, -r3.y
            mad r4.y, v0.x, r1.y, -r3.w
            mad r1.y, v0.x, r1.x, r3.z
            add r5.y, -r1.y, l(1.000000)
            mad r6.y, v0.y, r1.z, r1.w
            mad r4.z, v0.x, r1.z, r3.y
            mad r5.z, v0.y, r1.z, -r1.w
            mad r1.x, v0.x, r1.x, r3.x
            add r6.z, -r1.x, l(1.000000)
            add r1.xyz, r0.xyzx, r0.xyzx
            mul r1.w, r0.w, r1.x
            mul r3.xy, r0.ywyy, r1.yyyy
            mul r7.xyz, r0.yzwy, r1.zzzz
            mad r8.xz, r0.yyxy, r1.yyyy, r7.yyzy
            add r8.y, -r8.x, l(1.000000)
            mad r8.w, r0.x, r1.z, -r3.y
            mad r9.y, r0.x, r1.y, -r7.z
            mad r9.xw, r0.xxxw, r1.xxxx, r7.yyyx
            add r9.z, -r9.x, l(1.000000)
            mad r3.y, r0.x, r1.z, r3.y
            mad r3.z, r0.y, r1.z, -r1.w
            mad r0.x, r0.x, r1.x, r3.x
            add r3.w, -r0.x, l(1.000000)
            dp3 r0.x, r8.yzwy, r6.xyzx
            mov r2.w, l(1.000000)
            mov r4.w, v1.x
            dp4 o1.x, r2.xyzw, r4.xyzw
            mov r5.w, v1.y
            dp4 o1.y, r2.xyzw, r5.xyzw
            mov r6.w, v1.z
            dp4 o1.z, r2.xyzw, r6.xyzw
            mad r0.y, -r0.x, r0.x, l(1.000000)
            sqrt r0.y, r0.y
            min r0.z, |r0.x|, r0.y
            max r0.w, |r0.x|, r0.y
            div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
            mul r0.z, r0.z, r0.w
            mul r0.w, r0.z, r0.z
            mad r1.x, r0.w, l(0.020835), l(-0.085133)
            mad r1.x, r0.w, r1.x, l(0.180141)
            mad r1.x, r0.w, r1.x, l(-0.330299)
            mad r0.w, r0.w, r1.x, l(0.999866)
            mul r1.x, r0.z, r0.w
            lt r1.y, r0.y, |r0.x|
            mad r1.x, r1.x, l(-2.000000), l(1.570796)
            and r1.x, r1.x, r1.y
            mad r0.z, r0.z, r0.w, r1.x
            min r0.w, -r0.x, r0.y
            max r1.x, -r0.x, r0.y
            lt r0.w, r0.w, -r0.w
            ge r1.x, r1.x, -r1.x
            and r0.w, r0.w, r1.x
            movc r1.z, r0.w, -r0.z, r0.z
            ne r0.xz, -r0.xxxx, l(1.000000, 0.000000, -1.000000, 0.000000)
            and r0.x, r0.x, r0.z
            if_nz r0.x
              dp3 r0.x, r8.yzwy, r4.xyzx
              dp3 r0.z, r8.yzwy, r5.xyzx
              dp3 r0.w, r9.yzwy, r6.xyzx
              dp3 r2.x, r3.yzwy, r6.xyzx
              div r2.x, r2.x, r0.y
              div r0.w, r0.w, r0.y
              min r2.y, |r2.x|, |r0.w|
              max r2.z, |r2.x|, |r0.w|
              div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
              mul r2.y, r2.y, r2.z
              mul r2.z, r2.y, r2.y
              mad r2.w, r2.z, l(0.020835), l(-0.085133)
              mad r2.w, r2.z, r2.w, l(0.180141)
              mad r2.w, r2.z, r2.w, l(-0.330299)
              mad r2.z, r2.z, r2.w, l(0.999866)
              mul r2.w, r2.y, r2.z
              lt r3.x, |r2.x|, |r0.w|
              mad r2.w, r2.w, l(-2.000000), l(1.570796)
              and r2.w, r2.w, r3.x
              mad r2.y, r2.y, r2.z, r2.w
              lt r2.z, r2.x, -r2.x
              and r2.z, r2.z, l(0xc0490fdb)
              add r2.y, r2.y, r2.z
              min r2.z, r2.x, r0.w
              max r0.w, r2.x, r0.w
              lt r2.x, r2.z, -r2.z
              ge r0.w, r0.w, -r0.w
              and r0.w, r2.x, r0.w
              movc r1.x, r0.w, -r2.y, r2.y
              div r0.xy, r0.xzxx, r0.yyyy
              min r0.z, |r0.x|, |r0.y|
              max r0.w, |r0.x|, |r0.y|
              div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
              mul r0.z, r0.z, r0.w
              mul r0.w, r0.z, r0.z
              mad r2.x, r0.w, l(0.020835), l(-0.085133)
              mad r2.x, r0.w, r2.x, l(0.180141)
              mad r2.x, r0.w, r2.x, l(-0.330299)
              mad r0.w, r0.w, r2.x, l(0.999866)
              mul r2.x, r0.z, r0.w
              lt r2.y, |r0.x|, |r0.y|
              mad r2.x, r2.x, l(-2.000000), l(1.570796)
              and r2.x, r2.x, r2.y
              mad r0.z, r0.z, r0.w, r2.x
              lt r0.w, r0.x, -r0.x
              and r0.w, r0.w, l(0xc0490fdb)
              add r0.z, r0.z, r0.w
              min r0.w, r0.x, r0.y
              max r0.x, r0.x, r0.y
              lt r0.y, r0.w, -r0.w
              ge r0.x, r0.x, -r0.x
              and r0.x, r0.y, r0.x
              movc r1.y, r0.x, -r0.z, r0.z
            else 
              dp3 r0.x, r9.yzwy, r5.xyzx
              dp3 r0.y, r3.yzwy, r5.xyzx
              min r0.z, |r0.x|, |r0.y|
              max r0.w, |r0.x|, |r0.y|
              div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
              mul r0.z, r0.z, r0.w
              mul r0.w, r0.z, r0.z
              mad r2.x, r0.w, l(0.020835), l(-0.085133)
              mad r2.x, r0.w, r2.x, l(0.180141)
              mad r2.x, r0.w, r2.x, l(-0.330299)
              mad r0.w, r0.w, r2.x, l(0.999866)
              mul r2.x, r0.z, r0.w
              lt r2.y, |r0.x|, |r0.y|
              mad r2.x, r2.x, l(-2.000000), l(1.570796)
              and r2.x, r2.x, r2.y
              mad r0.z, r0.z, r0.w, r2.x
              lt r0.w, r0.x, -r0.x
              and r0.w, r0.w, l(0xc0490fdb)
              add r0.z, r0.z, r0.w
              min r0.w, r0.x, -r0.y
              max r0.x, r0.x, -r0.y
              lt r0.y, r0.w, -r0.w
              ge r0.x, r0.x, -r0.x
              and r0.x, r0.y, r0.x
              movc r1.x, r0.x, -r0.z, r0.z
              mov r1.y, l(0)
            endif 
            mov r1.w, l(0)
            mov o0.xyzw, r1.xzyw
            mov o1.w, l(1.000000)
            ret 
            // Approximately 167 instruction slots used
                    
        };
        PixelShader = NULL;
    }
}

technique10 techGPUDrawMultiModels
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // skinVertexPos       texture   float          2d    0        1
            // skinVertexNormal    texture   float          2d    1        1
            // skinVertexTexCoord    texture   float          2d    2        1
            // skinVertexBoneIndex    texture   float          2d    3        1
            // boneMatrixBuffer    texture   float         buf    4        1
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_VertexID          0   x           0   VERTID   uint   x   
            // SV_InstanceID        0   x           1   INSTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input_sgv  v0.x , vertex_id
            dcl_input_sgv  v1.x , instance_id
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_resource_texture2d ( float , float , float , float ) t3
            dcl_resource_buffer ( float , float , float , float ) t4
            dcl_temps 12
            utof r0.x, v0.x
            ftoi r0.x, r0.x
            ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
            ld r1.xyzw, r0.xyzw, t0.xyzw
            ld r2.xyzw, r0.xyzw, t1.xyzw
            ld r3.xyzw, r0.xyzw, t3.xyzw
            ftou r3.xyzw, r3.xyzw
            ld r0.xyzw, r0.xyzw, t2.xyzw
            ishl r3.x, r3.x, l(1)
            umul null, r4.x, v1.x, l(62)
            iadd r3.x, r3.x, r4.x
            ld r5.xyzw, r3.xxxx, t4.xyzw
            iadd r3.x, r3.x, l(1)
            ld r6.xyzw, r3.xxxx, t4.xyzw
            sincos r4.yz, null, r5.xxyx
            mov r7.y, -r4.y
            sincos null, r5.yw, r5.xxxy
            mov r8.x, -r4.z
            sincos null, r9.y, r5.z
            sincos r9.x, null, r5.z
            mov r9.z, -r9.x
            mul r5.x, r4.z, r4.y
            mul r8.y, r4.y, r5.w
            mul r7.x, r4.z, r5.y
            mul r8.z, r5.w, r5.y
            mul r10.x, r5.w, r9.y
            mul r11.x, r5.w, r9.x
            dp2 r10.y, r5.xyxx, r9.yzyy
            dp2 r11.y, r5.xyxx, r9.xyxx
            dp2 r10.z, r7.xyxx, r9.yzyy
            dp2 r11.z, r7.xyxx, r9.xyxx
            mov r5.xyz, r1.xyzx
            mov r5.w, l(1.000000)
            mov r10.w, r6.x
            dp4 r7.x, r5.xyzw, r10.xyzw
            mov r11.w, r6.y
            dp4 r7.y, r5.xyzw, r11.xyzw
            mov r8.w, r6.z
            dp4 r7.z, r5.xyzw, r8.xyzw
            mov r7.w, l(1.000000)
            mul r1.xyzw, r1.wwww, r7.xyzw
            dp3 o2.x, r2.xyzx, r10.xyzx
            dp3 o2.y, r2.xyzx, r11.xyzx
            dp3 o2.z, r2.xyzx, r8.xyzx
            ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
            if_nz r2.x
              ishl r2.x, r3.y, l(1)
              iadd r2.x, r2.x, r4.x
              ld r6.xyzw, r2.xxxx, t4.xyzw
              iadd r2.x, r2.x, l(1)
              ld r7.xyzw, r2.xxxx, t4.xyzw
              sincos r2.xy, null, r6.xyxx
              mov r3.y, -r2.x
              sincos null, r4.zw, r6.xxxy
              mov r8.x, -r2.y
              sincos null, r6.y, r6.z
              sincos r6.x, null, r6.z
              mov r6.w, -r6.x
              mul r4.y, r2.y, r2.x
              mul r8.y, r2.x, r4.w
              mul r3.x, r2.y, r4.z
              mul r8.z, r4.w, r4.z
              mul r9.x, r4.w, r6.y
              mul r10.x, r4.w, r6.x
              dp2 r9.y, r4.yzyy, r6.ywyy
              dp2 r10.y, r4.yzyy, r6.xyxx
              dp2 r9.z, r3.xyxx, r6.ywyy
              dp2 r10.z, r3.xyxx, r6.xyxx
              mov r9.w, r7.x
              dp4 r6.x, r5.xyzw, r9.xyzw
              mov r10.w, r7.y
              dp4 r6.y, r5.xyzw, r10.xyzw
              mov r8.w, r7.z
              dp4 r6.z, r5.xyzw, r8.xyzw
              mov r6.w, l(1.000000)
              mad r1.xyzw, r2.wwww, r6.xyzw, r1.xyzw
              ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
              if_nz r2.x
                ishl r2.x, r3.z, l(1)
                iadd r2.x, r2.x, r4.x
                ld r6.xyzw, r2.xxxx, t4.xyzw
                iadd r2.x, r2.x, l(1)
                ld r2.xyzw, r2.xxxx, t4.xyzw
                sincos r3.xy, null, r6.xyxx
                mov r4.z, -r3.x
                sincos null, r6.yw, r6.xxxy
                mov r7.x, -r3.y
                sincos null, r8.y, r6.z
                sincos r8.x, null, r6.z
                mov r8.z, -r8.x
                mul r6.x, r3.y, r3.x
                mul r7.y, r3.x, r6.w
                mul r4.y, r3.y, r6.y
                mul r7.z, r6.w, r6.y
                mul r9.x, r6.w, r8.y
                mul r10.x, r6.w, r8.x
                dp2 r9.y, r6.xyxx, r8.yzyy
                dp2 r10.y, r6.xyxx, r8.xyxx
                dp2 r9.z, r4.yzyy, r8.yzyy
                dp2 r10.z, r4.yzyy, r8.xyxx
                mov r9.w, r2.x
                dp4 r6.x, r5.xyzw, r9.xyzw
                mov r10.w, r2.y
                dp4 r6.y, r5.xyzw, r10.xyzw
                mov r7.w, r2.z
                dp4 r6.z, r5.xyzw, r7.xyzw
                mov r6.w, l(1.000000)
                mad r1.xyzw, r0.zzzz, r6.xyzw, r1.xyzw
                ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
                if_nz r0.z
                  ishl r0.z, r3.w, l(1)
                  iadd r0.z, r0.z, r4.x
                  ld r2.xyzw, r0.zzzz, t4.xyzw
                  iadd r0.z, r0.z, l(1)
                  ld r3.xyzw, r0.zzzz, t4.xyzw
                  sincos r4.xy, null, r2.xyxx
                  mov r4.w, -r4.x
                  sincos null, r2.yw, r2.xxxy
                  mov r6.x, -r4.y
                  sincos null, r7.y, r2.z
                  sincos r7.x, null, r2.z
                  mov r7.z, -r7.x
                  mul r2.x, r4.y, r4.x
                  mul r6.y, r4.x, r2.w
                  mul r4.z, r4.y, r2.y
                  mul r6.z, r2.w, r2.y
                  mul r8.x, r2.w, r7.y
                  mul r9.x, r2.w, r7.x
                  dp2 r8.y, r2.xyxx, r7.yzyy
                  dp2 r9.y, r2.xyxx, r7.xyxx
                  dp2 r8.z, r4.zwzz, r7.yzyy
                  dp2 r9.z, r4.zwzz, r7.xyxx
                  mov r8.w, r3.x
                  dp4 r2.x, r5.xyzw, r8.xyzw
                  mov r9.w, r3.y
                  dp4 r2.y, r5.xyzw, r9.xyzw
                  mov r6.w, r3.z
                  dp4 r2.z, r5.xyzw, r6.xyzw
                  mov r2.w, l(1.000000)
                  mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
                endif 
              endif 
            endif 
            udiv null, r0.z, v1.x, l(4)
            ushr r0.w, v1.x, l(2)
            udiv null, r0.w, r0.w, l(4)
            utof r2.xy, r0.zwzz
            mad o1.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
            dp4 o0.x, r1.xyzw, cb0[0].xyzw
            dp4 o0.y, r1.xyzw, cb0[1].xyzw
            dp4 o0.z, r1.xyzw, cb0[2].xyzw
            dp4 o0.w, r1.xyzw, cb0[3].xyzw
            add o3.xyz, -r1.xyzx, cb0[8].xyzx
            add o4.xyz, -r1.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 155 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // diffuseMap          texture   float          2d    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v2.xyz
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_sampler s0, mode_default
            dcl_temps 3
            dp3 r0.x, -v3.xyzx, -v3.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, -v3.xyzx
            dp3 r0.w, v2.xyzx, v2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, v2.xyzx
            dp3 r0.w, r0.xyzx, r1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, r1.xyzx, -r0.wwww, r0.xyzx
            dp3 r0.w, v4.xyzx, v4.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, v4.xyzx
            dp3_sat r0.x, r0.xyzx, r2.xyzx
            dp3_sat r0.y, r1.xyzx, r2.xyzx
            log r0.x, r0.x
            mul r0.x, r0.x, l(16.000000)
            exp r0.x, r0.x
            add r0.y, r0.y, l(0.300000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.yyyy, r0.xxxx
            mov_sat o0.w, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
    }
}

technique10 techGPUDrawMultiModelShadows
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // skinVertexPos       texture   float          2d    0        1
            // skinVertexNormal    texture   float          2d    1        1
            // skinVertexTexCoord    texture   float          2d    2        1
            // skinVertexBoneIndex    texture   float          2d    3        1
            // boneMatrixBuffer    texture   float         buf    4        1
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_VertexID          0   x           0   VERTID   uint   x   
            // SV_InstanceID        0   x           1   INSTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input_sgv  v0.x , vertex_id
            dcl_input_sgv  v1.x , instance_id
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_resource_texture2d ( float , float , float , float ) t3
            dcl_resource_buffer ( float , float , float , float ) t4
            dcl_temps 12
            utof r0.x, v0.x
            ftoi r0.x, r0.x
            ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
            ld r1.xyzw, r0.xyzw, t0.xyzw
            ld r2.xyzw, r0.xyzw, t1.xyzw
            ld r3.xyzw, r0.xyzw, t3.xyzw
            ftou r3.xyzw, r3.xyzw
            ld r0.xyzw, r0.xyzw, t2.xyzw
            ishl r3.x, r3.x, l(1)
            umul null, r4.x, v1.x, l(62)
            iadd r3.x, r3.x, r4.x
            ld r5.xyzw, r3.xxxx, t4.xyzw
            iadd r3.x, r3.x, l(1)
            ld r6.xyzw, r3.xxxx, t4.xyzw
            sincos r4.yz, null, r5.xxyx
            mov r7.y, -r4.y
            sincos null, r5.yw, r5.xxxy
            mov r8.x, -r4.z
            sincos null, r9.y, r5.z
            sincos r9.x, null, r5.z
            mov r9.z, -r9.x
            mul r5.x, r4.z, r4.y
            mul r8.y, r4.y, r5.w
            mul r7.x, r4.z, r5.y
            mul r8.z, r5.w, r5.y
            mul r10.x, r5.w, r9.y
            mul r11.x, r5.w, r9.x
            dp2 r10.y, r5.xyxx, r9.yzyy
            dp2 r11.y, r5.xyxx, r9.xyxx
            dp2 r10.z, r7.xyxx, r9.yzyy
            dp2 r11.z, r7.xyxx, r9.xyxx
            mov r5.xyz, r1.xyzx
            mov r5.w, l(1.000000)
            mov r10.w, r6.x
            dp4 r7.x, r5.xyzw, r10.xyzw
            mov r11.w, r6.y
            dp4 r7.y, r5.xyzw, r11.xyzw
            mov r8.w, r6.z
            dp4 r7.z, r5.xyzw, r8.xyzw
            mov r7.w, l(1.000000)
            mul r1.xyzw, r1.wwww, r7.xyzw
            dp3 o2.x, r2.xyzx, r10.xyzx
            dp3 o2.y, r2.xyzx, r11.xyzx
            dp3 o2.z, r2.xyzx, r8.xyzx
            ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
            if_nz r2.x
              ishl r2.x, r3.y, l(1)
              iadd r2.x, r2.x, r4.x
              ld r6.xyzw, r2.xxxx, t4.xyzw
              iadd r2.x, r2.x, l(1)
              ld r7.xyzw, r2.xxxx, t4.xyzw
              sincos r2.xy, null, r6.xyxx
              mov r3.y, -r2.x
              sincos null, r4.zw, r6.xxxy
              mov r8.x, -r2.y
              sincos null, r6.y, r6.z
              sincos r6.x, null, r6.z
              mov r6.w, -r6.x
              mul r4.y, r2.y, r2.x
              mul r8.y, r2.x, r4.w
              mul r3.x, r2.y, r4.z
              mul r8.z, r4.w, r4.z
              mul r9.x, r4.w, r6.y
              mul r10.x, r4.w, r6.x
              dp2 r9.y, r4.yzyy, r6.ywyy
              dp2 r10.y, r4.yzyy, r6.xyxx
              dp2 r9.z, r3.xyxx, r6.ywyy
              dp2 r10.z, r3.xyxx, r6.xyxx
              mov r9.w, r7.x
              dp4 r6.x, r5.xyzw, r9.xyzw
              mov r10.w, r7.y
              dp4 r6.y, r5.xyzw, r10.xyzw
              mov r8.w, r7.z
              dp4 r6.z, r5.xyzw, r8.xyzw
              mov r6.w, l(1.000000)
              mad r1.xyzw, r2.wwww, r6.xyzw, r1.xyzw
              ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
              if_nz r2.x
                ishl r2.x, r3.z, l(1)
                iadd r2.x, r2.x, r4.x
                ld r6.xyzw, r2.xxxx, t4.xyzw
                iadd r2.x, r2.x, l(1)
                ld r2.xyzw, r2.xxxx, t4.xyzw
                sincos r3.xy, null, r6.xyxx
                mov r4.z, -r3.x
                sincos null, r6.yw, r6.xxxy
                mov r7.x, -r3.y
                sincos null, r8.y, r6.z
                sincos r8.x, null, r6.z
                mov r8.z, -r8.x
                mul r6.x, r3.y, r3.x
                mul r7.y, r3.x, r6.w
                mul r4.y, r3.y, r6.y
                mul r7.z, r6.w, r6.y
                mul r9.x, r6.w, r8.y
                mul r10.x, r6.w, r8.x
                dp2 r9.y, r6.xyxx, r8.yzyy
                dp2 r10.y, r6.xyxx, r8.xyxx
                dp2 r9.z, r4.yzyy, r8.yzyy
                dp2 r10.z, r4.yzyy, r8.xyxx
                mov r9.w, r2.x
                dp4 r6.x, r5.xyzw, r9.xyzw
                mov r10.w, r2.y
                dp4 r6.y, r5.xyzw, r10.xyzw
                mov r7.w, r2.z
                dp4 r6.z, r5.xyzw, r7.xyzw
                mov r6.w, l(1.000000)
                mad r1.xyzw, r0.zzzz, r6.xyzw, r1.xyzw
                ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
                if_nz r0.z
                  ishl r0.z, r3.w, l(1)
                  iadd r0.z, r0.z, r4.x
                  ld r2.xyzw, r0.zzzz, t4.xyzw
                  iadd r0.z, r0.z, l(1)
                  ld r3.xyzw, r0.zzzz, t4.xyzw
                  sincos r4.xy, null, r2.xyxx
                  mov r4.w, -r4.x
                  sincos null, r2.yw, r2.xxxy
                  mov r6.x, -r4.y
                  sincos null, r7.y, r2.z
                  sincos r7.x, null, r2.z
                  mov r7.z, -r7.x
                  mul r2.x, r4.y, r4.x
                  mul r6.y, r4.x, r2.w
                  mul r4.z, r4.y, r2.y
                  mul r6.z, r2.w, r2.y
                  mul r8.x, r2.w, r7.y
                  mul r9.x, r2.w, r7.x
                  dp2 r8.y, r2.xyxx, r7.yzyy
                  dp2 r9.y, r2.xyxx, r7.xyxx
                  dp2 r8.z, r4.zwzz, r7.yzyy
                  dp2 r9.z, r4.zwzz, r7.xyxx
                  mov r8.w, r3.x
                  dp4 r2.x, r5.xyzw, r8.xyzw
                  mov r9.w, r3.y
                  dp4 r2.y, r5.xyzw, r9.xyzw
                  mov r6.w, r3.z
                  dp4 r2.z, r5.xyzw, r6.xyzw
                  mov r2.w, l(1.000000)
                  mad r1.xyzw, r0.wwww, r2.xyzw, r1.xyzw
                endif 
              endif 
            endif 
            udiv null, r0.z, v1.x, l(4)
            ushr r0.w, v1.x, l(2)
            udiv null, r0.w, r0.w, l(4)
            utof r2.xy, r0.zwzz
            mad o1.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
            dp4 o0.x, r1.xyzw, cb0[0].xyzw
            dp4 o0.y, r1.xyzw, cb0[1].xyzw
            dp4 o0.z, r1.xyzw, cb0[2].xyzw
            dp4 o0.w, r1.xyzw, cb0[3].xyzw
            add o3.xyz, -r1.xyzx, cb0[8].xyzx
            add o4.xyz, -r1.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 155 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_output o0.xyzw
            mov o0.xyzw, l(0.000000, 0.000000, 0.000000, 1.000000)
            ret 
            // Approximately 2 instruction slots used
                    
        };
    }
}

technique10 techGPUStreamoutMultiModels
{
    pass P0
    {
        VertexShader = multiModelVS;
        GeometryShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // skinVertexPos       texture   float          2d    0        1
            // skinVertexNormal    texture   float          2d    1        1
            // skinVertexTexCoord    texture   float          2d    2        1
            // skinVertexBoneIndex    texture   float          2d    3        1
            // boneMatrixBuffer    texture   float         buf    4        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_VertexID          0   x           0   VERTID   uint   x   
            // SV_InstanceID        0   x           1   INSTID   uint   x   
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SKINNED              0   xyzw        0     NONE  float   xyzw
            // NORMAL               0   xyzw        1     NONE  float   xyzw
            //
            vs_4_0
            dcl_input_sgv  v0.x , vertex_id
            dcl_input_sgv  v1.x , instance_id
            dcl_output o0.xyzw
            dcl_output o1.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_resource_texture2d ( float , float , float , float ) t3
            dcl_resource_buffer ( float , float , float , float ) t4
            dcl_temps 12
            utof r0.x, v0.x
            ftoi r0.x, r0.x
            ftoi r0.yzw, l(0.000000, 0.000000, 0.000000, 0.000000)
            ld r1.xyzw, r0.xyzw, t0.xyzw
            ld r2.xyzw, r0.xyzw, t1.xyzw
            ld r3.xyzw, r0.xyzw, t3.xyzw
            ftou r3.xyzw, r3.xyzw
            ld r0.xyzw, r0.xyzw, t2.xyzw
            ishl r3.x, r3.x, l(1)
            umul null, r4.x, v1.x, l(62)
            iadd r3.x, r3.x, r4.x
            ld r5.xyzw, r3.xxxx, t4.xyzw
            iadd r3.x, r3.x, l(1)
            ld r6.xyzw, r3.xxxx, t4.xyzw
            sincos r4.yz, null, r5.xxyx
            mov r7.y, -r4.y
            sincos null, r5.yw, r5.xxxy
            mov r8.x, -r4.z
            sincos null, r9.y, r5.z
            sincos r9.x, null, r5.z
            mov r9.z, -r9.x
            mul r5.x, r4.z, r4.y
            mul r8.y, r4.y, r5.w
            mul r7.x, r4.z, r5.y
            mul r8.z, r5.w, r5.y
            mul r10.x, r5.w, r9.y
            mul r11.x, r5.w, r9.x
            dp2 r10.y, r5.xyxx, r9.yzyy
            dp2 r11.y, r5.xyxx, r9.xyxx
            dp2 r10.z, r7.xyxx, r9.yzyy
            dp2 r11.z, r7.xyxx, r9.xyxx
            mov r5.xyz, r1.xyzx
            mov r5.w, l(1.000000)
            mov r10.w, r6.x
            dp4 r1.x, r5.xyzw, r10.xyzw
            mov r11.w, r6.y
            dp4 r1.y, r5.xyzw, r11.xyzw
            mov r8.w, r6.z
            dp4 r1.z, r5.xyzw, r8.xyzw
            mul r1.xyz, r1.wwww, r1.xyzx
            dp3 o1.x, r2.xyzx, r10.xyzx
            dp3 o1.y, r2.xyzx, r11.xyzx
            dp3 o1.z, r2.xyzx, r8.xyzx
            ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r2.w
            if_nz r2.x
              ishl r2.x, r3.y, l(1)
              iadd r2.x, r2.x, r4.x
              ld r6.xyzw, r2.xxxx, t4.xyzw
              iadd r2.x, r2.x, l(1)
              ld r7.xyzw, r2.xxxx, t4.xyzw
              sincos r2.xy, null, r6.xyxx
              mov r3.y, -r2.x
              sincos null, r4.zw, r6.xxxy
              mov r8.x, -r2.y
              sincos null, r6.y, r6.z
              sincos r6.x, null, r6.z
              mov r6.w, -r6.x
              mul r4.y, r2.y, r2.x
              mul r8.y, r2.x, r4.w
              mul r3.x, r2.y, r4.z
              mul r8.z, r4.w, r4.z
              mul r9.x, r4.w, r6.y
              mul r10.x, r4.w, r6.x
              dp2 r9.y, r4.yzyy, r6.ywyy
              dp2 r10.y, r4.yzyy, r6.xyxx
              dp2 r9.z, r3.xyxx, r6.ywyy
              dp2 r10.z, r3.xyxx, r6.xyxx
              mov r9.w, r7.x
              dp4 r2.x, r5.xyzw, r9.xyzw
              mov r10.w, r7.y
              dp4 r2.y, r5.xyzw, r10.xyzw
              mov r8.w, r7.z
              dp4 r2.z, r5.xyzw, r8.xyzw
              mad r1.xyz, r2.wwww, r2.xyzx, r1.xyzx
              ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), r0.z
              if_nz r2.x
                ishl r2.x, r3.z, l(1)
                iadd r2.x, r2.x, r4.x
                ld r6.xyzw, r2.xxxx, t4.xyzw
                iadd r2.x, r2.x, l(1)
                ld r2.xyzw, r2.xxxx, t4.xyzw
                sincos r3.xy, null, r6.xyxx
                mov r4.z, -r3.x
                sincos null, r6.yw, r6.xxxy
                mov r7.x, -r3.y
                sincos null, r8.y, r6.z
                sincos r8.x, null, r6.z
                mov r8.z, -r8.x
                mul r6.x, r3.y, r3.x
                mul r7.y, r3.x, r6.w
                mul r4.y, r3.y, r6.y
                mul r7.z, r6.w, r6.y
                mul r9.x, r6.w, r8.y
                mul r10.x, r6.w, r8.x
                dp2 r9.y, r6.xyxx, r8.yzyy
                dp2 r10.y, r6.xyxx, r8.xyxx
                dp2 r9.z, r4.yzyy, r8.yzyy
                dp2 r10.z, r4.yzyy, r8.xyxx
                mov r9.w, r2.x
                dp4 r3.x, r5.xyzw, r9.xyzw
                mov r10.w, r2.y
                dp4 r3.y, r5.xyzw, r10.xyzw
                mov r7.w, r2.z
                dp4 r3.z, r5.xyzw, r7.xyzw
                mad r1.xyz, r0.zzzz, r3.xyzx, r1.xyzx
                ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
                if_nz r0.z
                  ishl r0.z, r3.w, l(1)
                  iadd r0.z, r0.z, r4.x
                  ld r2.xyzw, r0.zzzz, t4.xyzw
                  iadd r0.z, r0.z, l(1)
                  ld r3.xyzw, r0.zzzz, t4.xyzw
                  sincos r4.xy, null, r2.xyxx
                  mov r4.w, -r4.x
                  sincos null, r2.yw, r2.xxxy
                  mov r6.x, -r4.y
                  sincos null, r7.y, r2.z
                  sincos r7.x, null, r2.z
                  mov r7.z, -r7.x
                  mul r2.x, r4.y, r4.x
                  mul r6.y, r4.x, r2.w
                  mul r4.z, r4.y, r2.y
                  mul r6.z, r2.w, r2.y
                  mul r8.x, r2.w, r7.y
                  mul r9.x, r2.w, r7.x
                  dp2 r8.y, r2.xyxx, r7.yzyy
                  dp2 r9.y, r2.xyxx, r7.xyxx
                  dp2 r8.z, r4.zwzz, r7.yzyy
                  dp2 r9.z, r4.zwzz, r7.xyxx
                  mov r8.w, r3.x
                  dp4 r2.x, r5.xyzw, r8.xyzw
                  mov r9.w, r3.y
                  dp4 r2.y, r5.xyzw, r9.xyzw
                  mov r6.w, r3.z
                  dp4 r2.z, r5.xyzw, r6.xyzw
                  mad r1.xyz, r0.wwww, r2.xyzx, r1.xyzx
                endif 
              endif 
            endif 
            udiv null, r0.z, v1.x, l(4)
            ushr r0.w, v1.x, l(2)
            udiv null, r0.w, r0.w, l(4)
            utof r2.xy, r0.zwzz
            mad r0.xy, r2.xyxx, l(0.250000, 0.250000, 0.000000, 0.000000), r0.xyxx
            mov r1.w, r0.x
            mov o0.xyzw, r1.xyzw
            mov o1.w, r0.y
            ret 
            // Approximately 148 instruction slots used
                    
        };
        PixelShader = NULL;
    }
}

technique10 techGPUDrawStreamoutModels
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SKINNED              0   xyzw        0     NONE  float   xyzw
            // NORMAL               0   xyzw        1     NONE  float   xyzw
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input v0.xyzw
            dcl_input v1.xyzw
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            mov o1.x, v0.w
            mov o1.y, v1.w
            mov o2.xyz, v1.xyzx
            add o3.xyz, -v0.xyzx, cb0[8].xyzx
            add o4.xyz, -v0.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 12 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // diffuseMap          texture   float          2d    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v2.xyz
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_sampler s0, mode_default
            dcl_temps 3
            dp3 r0.x, -v3.xyzx, -v3.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, -v3.xyzx
            dp3 r0.w, v2.xyzx, v2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, v2.xyzx
            dp3 r0.w, r0.xyzx, r1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, r1.xyzx, -r0.wwww, r0.xyzx
            dp3 r0.w, v4.xyzx, v4.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, v4.xyzx
            dp3_sat r0.x, r0.xyzx, r2.xyzx
            dp3_sat r0.y, r1.xyzx, r2.xyzx
            log r0.x, r0.x
            mul r0.x, r0.x, l(16.000000)
            exp r0.x, r0.x
            add r0.y, r0.y, l(0.300000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.yyyy, r0.xxxx
            mov_sat o0.w, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
    }
}

technique10 techGPUDrawStreamoutShadows
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12 [unused]
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SKINNED              0   xyzw        0     NONE  float   xyz 
            // NORMAL               0   xyzw        1     NONE  float       
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_output_siv  o0.xyzw , position
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            ret 
            // Approximately 7 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_output o0.xyzw
            mov o0.xyzw, l(0.000000, 0.000000, 0.000000, 1.000000)
            ret 
            // Approximately 2 instruction slots used
                    
        };
    }
}

technique10 techStatic
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64 [unused]
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // POSITION             0   xyz         0     NONE  float   xyz 
            // NORMAL               0   xyz         1     NONE  float   xyz 
            // TEXCOORD             0   xy          2     NONE  float   xy  
            // SV_InstanceID        0   x           3   INSTID   uint       
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_temps 1
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            mov o1.xy, v2.xyxx
            mov o2.xyz, v1.xyzx
            add o3.xyz, -v0.xyzx, cb0[8].xyzx
            add o4.xyz, -v0.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            ret 
            // Approximately 11 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // diffuseMap          texture   float          2d    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v2.xyz
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_sampler s0, mode_default
            dcl_temps 3
            dp3 r0.x, -v3.xyzx, -v3.xyzx
            rsq r0.x, r0.x
            mul r0.xyz, r0.xxxx, -v3.xyzx
            dp3 r0.w, v2.xyzx, v2.xyzx
            rsq r0.w, r0.w
            mul r1.xyz, r0.wwww, v2.xyzx
            dp3 r0.w, r0.xyzx, r1.xyzx
            add r0.w, r0.w, r0.w
            mad r0.xyz, r1.xyzx, -r0.wwww, r0.xyzx
            dp3 r0.w, v4.xyzx, v4.xyzx
            rsq r0.w, r0.w
            mul r2.xyz, r0.wwww, v4.xyzx
            dp3_sat r0.x, r0.xyzx, r2.xyzx
            dp3_sat r0.y, r1.xyzx, r2.xyzx
            log r0.x, r0.x
            mul r0.x, r0.x, l(16.000000)
            exp r0.x, r0.x
            add r0.y, r0.y, l(0.300000)
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.yyyy, r0.xxxx
            mov_sat o0.w, r1.w
            ret 
            // Approximately 22 instruction slots used
                    
        };
    }
}

technique10 techShadowFloor
{
    pass P0
    {
        VertexShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Buffer Definitions: 
            //
            // cbuffer cbGlobal
            // {
            //
            //   float4x4 mvp;                      // Offset:    0 Size:    64
            //   float4x4 lightMvp;                 // Offset:   64 Size:    64
            //   float3 cameraPos;                  // Offset:  128 Size:    12
            //
            // }
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // cbGlobal            cbuffer      NA          NA    0        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // POSITION             0   xyz         0     NONE  float   xyz 
            // NORMAL               0   xyz         1     NONE  float   xyz 
            // TEXCOORD             0   xy          2     NONE  float   xy  
            // SV_InstanceID        0   x           3   INSTID   uint       
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float   xyzw
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float   xyz 
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            // LIGHTVIEWPOS         0   xyzw        5     NONE  float   xyzw
            //
            vs_4_0
            dcl_input v0.xyz
            dcl_input v1.xyz
            dcl_input v2.xy
            dcl_output_siv  o0.xyzw , position
            dcl_output o1.xy
            dcl_output o2.xyz
            dcl_output o3.xyz
            dcl_output o4.xyz
            dcl_output o5.xyzw
            dcl_constantbuffer  cb0[9], immediateIndexed
            dcl_temps 1
            add o4.xyz, -v0.xyzx, l(-60.000000, 60.000000, -60.000000, 0.000000)
            add o3.xyz, -v0.xyzx, cb0[8].xyzx
            mov o2.xyz, v1.xyzx
            mov o1.xy, v2.xyxx
            mov r0.xyz, v0.xyzx
            mov r0.w, l(1.000000)
            dp4 o0.x, r0.xyzw, cb0[0].xyzw
            dp4 o0.y, r0.xyzw, cb0[1].xyzw
            dp4 o0.z, r0.xyzw, cb0[2].xyzw
            dp4 o0.w, r0.xyzw, cb0[3].xyzw
            dp4 o5.x, r0.xyzw, cb0[4].xyzw
            dp4 o5.y, r0.xyzw, cb0[5].xyzw
            dp4 o5.z, r0.xyzw, cb0[6].xyzw
            dp4 o5.w, r0.xyzw, cb0[7].xyzw
            ret 
            // Approximately 15 instruction slots used
                    
        };
        GeometryShader = NULL;
        PixelShader = asm {

            //
            // Generated by Microsoft (R) HLSL Shader Compiler
            //
            //
            // Resource Bindings:
            //
            // Name                   Type  Format         Dim Slot Elements
            // ---------------- ---------- ------- ----------- ---- --------
            // g_samLinear         sampler      NA          NA    0        1
            // g_samLinearClamp    sampler      NA          NA    1        1
            // diffuseMap          texture   float          2d    0        1
            // bumpMap             texture   float          2d    1        1
            // shadowMap           texture   float          2d    2        1
            //
            //
            //
            // Input signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Position          0   xyzw        0      POS  float       
            // TexCoord             0   xy          1     NONE  float   xy  
            // NORMAL               0   xyz         2     NONE  float       
            // VIEW                 0   xyz         3     NONE  float   xyz 
            // LIGHT                0   xyz         4     NONE  float   xyz 
            // LIGHTVIEWPOS         0   xyzw        5     NONE  float   xy w
            //
            //
            // Output signature:
            //
            // Name             Index   Mask Register SysValue Format   Used
            // ---------------- ----- ------ -------- -------- ------ ------
            // SV_Target            0   xyzw        0     NONE  float   xyzw
            //
            ps_4_0
            dcl_input linear v1.xy
            dcl_input linear v3.xyz
            dcl_input linear v4.xyz
            dcl_input linear v5.xyw
            dcl_output o0.xyzw
            dcl_resource_texture2d ( float , float , float , float ) t0
            dcl_resource_texture2d ( float , float , float , float ) t1
            dcl_resource_texture2d ( float , float , float , float ) t2
            dcl_sampler s0, mode_default
            dcl_sampler s1, mode_default
            dcl_temps 3
            div r0.xy, v5.xyxx, v5.wwww
            add r0.zw, r0.xxxy, l(0.000000, 0.000000, 0.000488, 0.000000)
            sample r1.xyzw, r0.zwzz, t2.xyzw, s1
            sample r2.xyzw, r0.xyxx, t2.xyzw, s1
            add r0.z, r1.x, r2.x
            add r1.xy, r0.xyxx, l(0.000000, 0.000488, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            add r1.xy, r0.xyxx, l(-0.000488, 0.000000, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            add r1.xy, r0.xyxx, l(0.000000, -0.000488, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            add r1.xy, r0.xyxx, l(0.000488, 0.000488, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            add r1.xy, r0.xyxx, l(-0.000488, -0.000488, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            add r1.xy, r0.xyxx, l(0.000488, -0.000488, 0.000000, 0.000000)
            add r0.xy, r0.xyxx, l(-0.000488, 0.000488, 0.000000, 0.000000)
            sample r1.xyzw, r1.xyxx, t2.xyzw, s1
            add r0.z, r0.z, r1.x
            sample r1.xyzw, r0.xyxx, t2.xyzw, s1
            add r0.x, r0.z, r1.x
            mul r0.x, r0.x, l(0.111111)
            sample r1.xyzw, v1.xyxx, t1.xyzw, s0
            add r0.yzw, r1.xxzy, l(0.000000, -0.500000, -0.500000, -0.500000)
            mul r0.yzw, r0.yyzw, l(0.000000, 2.000000, 2.000000, -2.000000)
            dp3 r1.x, r0.yzwy, r0.yzwy
            rsq r1.x, r1.x
            mul r0.yzw, r0.yyzw, r1.xxxx
            dp3 r1.x, v4.xyzx, v4.xyzx
            rsq r1.x, r1.x
            mul r1.xyz, r1.xxxx, v4.xyzx
            dp3_sat r1.w, r0.yzwy, r1.xyzx
            mad r0.x, r1.w, r0.x, l(0.300000)
            dp3 r1.w, -v3.xyzx, -v3.xyzx
            rsq r1.w, r1.w
            mul r2.xyz, r1.wwww, -v3.xyzx
            dp3 r1.w, r2.xyzx, r0.yzwy
            add r1.w, r1.w, r1.w
            mad r0.yzw, r0.yyzw, -r1.wwww, r2.xxyz
            dp3_sat r0.y, r0.yzwy, r1.xyzx
            log r0.y, r0.y
            mul r0.y, r0.y, l(16.000000)
            exp r0.y, r0.y
            sample r1.xyzw, v1.xyxx, t0.xyzw, s0
            mad_sat o0.xyz, r1.xyzx, r0.xxxx, r0.yyyy
            mov_sat o0.w, r1.w
            ret 
            // Approximately 52 instruction slots used
                    
        };
    }
}

 